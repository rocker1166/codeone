File: code (2).txt

//action.tsx
'use server'

import { generateText } from 'ai'
import { createStreamableUI } from 'ai/rsc'
import { ReactNode } from 'react'
import { z } from 'zod'
import { getZooInfo } from '../../utils/zoo-data'
import  TicketBooking  from '@/components/TicketBooking'
import {google} from '@ai-sdk/google'
export interface Message {
  role: 'user' | 'assistant'
  content: string
  display?: ReactNode
}

export async function continueConversation(history: Message[]) {
  const stream = createStreamableUI()
  const zooInfo = getZooInfo()

  const { text, toolResults } = await generateText({
    model: google('gemini-1.5-pro'),
    system: `You are a friendly assistant for ${zooInfo.name}. Here's some information about the zoo:
    - Location: ${zooInfo.location}
    - Opening Hours: ${zooInfo.openingHours}
    - Animals: ${zooInfo.animals.map(animal => animal.name).join(', ')}
    - Attractions: ${zooInfo.attractions.join(', ')}
    Only answer questions related to this zoo. If asked about anything else, politely redirect the conversation to zoo-related topics.`,
    messages: history,
    tools: {
      showWeather: {
        description: 'Show the weather for the zoo location.',
        parameters: z.object({
          date: z.string().describe('The date to show the weather for (YYYY-MM-DD).'),
        }),
        execute: async ({ date }) => {
          // Simulated weather data
          const weather = {
            temperature: 72 + Math.floor(Math.random() * 21) - 10,
            condition: ['Sunny', 'Cloudy', 'Rainy'][Math.floor(Math.random() * 3)],
          }
          stream.done(
            <div className="mt-4 p-4 border rounded-lg shadow-md">
              <h2 className="text-xl font-bold mb-2">Weather Forecast</h2>
              <p>Date: {date}</p>
              <p>Temperature: {weather.temperature}¬∞F</p>
              <p>Condition: {weather.condition}</p>
            </div>
          )
          return `Here's the weather forecast for ${zooInfo.name} on ${date}!`
        },
      },
      showTicketBooking: {
        description: 'Show the ticket booking interface.',
        parameters: z.object({
          showReason: z.string().optional().describe('Optional reason for showing the ticket booking interface.'),
        }),
        execute: async ({ showReason }) => {
          stream.done(<TicketBooking />)
          return `Here's the ticket booking interface for ${zooInfo.name}.${showReason ? ` Reason: ${showReason}` : ''} You can select the number of tickets and make a payment.`
        },
      },
    },
  })

  return {
    messages: [
      ...history,
      {
        role: 'assistant' as const,
        content: text || toolResults.map(toolResult => toolResult.result).join(),
        display: stream.value,
      },
    ],
  }
}




///chat.tsx
'use client'

import { useState, useRef, useEffect, ReactNode } from 'react'
import { Message, continueConversation } from '@/app/actions'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"


interface UIComponent {
  id: string;
  component: ReactNode;
}

export default function Chatbot() {
  const [conversation, setConversation] = useState<Message[]>([])
  const [uiComponents, setUIComponents] = useState<UIComponent[]>([])
  const [input, setInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const chatContainerRef = useRef<HTMLDivElement>(null)

  const handleSendMessage = async (messageContent: string) => {
    if (!messageContent.trim()) return

    setIsLoading(true)
    const userMessage: Message = { role: 'user', content: messageContent }
    setConversation(prev => [...prev, userMessage])
    setInput('')

    try {
      const { messages } = await continueConversation([
        ...conversation.map(({ role, content }) => ({ role, content })),
        userMessage,
      ])

      const newUIComponents: UIComponent[] = []
      const newMessages = messages.map(message => {
        if (message.display) {
          const id = `ui-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
          newUIComponents.push({ id, component: message.display })
          return { ...message, display: id }
        }
        return message
      })

      setConversation(newMessages)
      setUIComponents(prev => [...prev, ...newUIComponents])
    } catch (error) {
      console.error('Error sending message:', error)
      setConversation(prev => [
        ...prev,
        { role: 'assistant', content: 'Sorry, there was an error processing your request.' }
      ])
    } finally {
      setIsLoading(false)
    }
  }

  // Scroll chat container to the bottom on new messages
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight
    }
  }, [conversation, uiComponents])

  // Handle button click to send predefined message
  const handleQuickReply = (message: string) => {
    setInput(message)
    handleSendMessage(message)
  }

  return (
    <div className="flex flex-col h-screen bg-background">
      {/* Header */}
      <div className="bg-primary flex items-center justify-between px-6 py-4">
        <div className="flex items-center gap-4">
          <div className="bg-primary-foreground rounded-full w-12 h-12 flex items-center justify-center text-3xl">
            ü¶Å
          </div>
          <div>
            <h2 className="text-primary-foreground text-white font-bold text-lg">Wonderland Zoo Chat</h2>
            <p className="text-primary-foreground text-white text-sm">Your friendly zoo assistant</p>
          </div>
        </div>
      </div>
      
      {/* Conversation Container */}
      <div className="flex-1 overflow-y-auto p-6" ref={chatContainerRef}>
        <div className="grid gap-4">
          {conversation.map((message, index) => (
            <div key={index} className={`flex text-black flex-col ${message.role === 'user' ? 'items-end' : 'items-start'}`}>
              <div className={`flex items-start gap-4 ${message.role === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                <div className={`rounded-full w-10 h-10 flex items-center justify-center text-2xl ${message.role === 'user' ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>
                  {message.role === 'user' ? 'üôã' : 'ü¶Å'}
                </div>
                <div className={`rounded-lg p-4 max-w-[80%] ${message.role === 'user' ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>
                  <p>{message.content}</p>
                </div>
              </div>
              {typeof message.display === 'string' && (
                <div className="mt-2 p-4 border rounded-lg shadow-md  w-full">
                  {uiComponents.find(comp => comp.id === message.display)?.component}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
      
      {/* Quick Reply Buttons */}
      <div className="bg-muted px-6 py-2">
        <div className="flex gap-2 mb-4">
          <Button
            onClick={() => handleQuickReply('What are the opening hours?')}
            className="bg-blue-500 hover:bg-blue-600 text-white"
          >
            Opening Hours
          </Button>
          <Button
            onClick={() => handleQuickReply('Buy a ticket')}
            className="bg-green-500 hover:bg-green-600 text-white"
          >
            Buy a Ticket
          </Button>
          <Button
            onClick={() => handleQuickReply('Tell me about the zoo')}
            className="bg-yellow-500 hover:bg-yellow-600 text-white"
          >
            About the Zoo
          </Button>
        </div>
      </div>

      {/* Input & Send Section */}
      <div className="bg-muted flex items-center px-6 py-4">
        <form onSubmit={(e) => { e.preventDefault(); handleSendMessage(input); }} className="flex-1 flex">
          <Input 
            placeholder="Ask about our zoo..." 
            className="flex-1 bg-transparent focus:ring-0 focus:border-0"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            disabled={isLoading}
          />
          <Button type="submit" variant="ghost" size="icon" className="ml-2" disabled={isLoading}>
            <SendIcon className="w-5 h-5" />
          </Button>
        </form>
      </div>
    </div>
  )
}

function SendIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m22 2-7 20-4-9-9-4Z" />
      <path d="M22 2 11 13" />
    </svg>
  )
}


this is ai vercel sdk chatbot app , use this as to edit and provide code



