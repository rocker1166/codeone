File: page.js

"use client"
// import AboutSectionOne from "@/components/About/AboutSectionOne";
// import AboutSectionTwo from "@/components/About/AboutSectionTwo";
import AboutUsJson from "../../../Data/AboutUs.json"
import UserCard from "../../../components/About/UserCard";
import Breadcrumb from "../../../components/Common/Breadcrumb";

// ============== About Page ==============*
const AboutPage = () => {

  return (
    <div className="mb-10">
      <Breadcrumb
        pageName="About : Meet This Awesome People"
        description="At Last Minute Engineering, we are proud to have a team of dedicated and passionate individuals who bring their expertise and enthusiasm to everything we do. Get to know the minds behind our innovative content and supportive community:"
      />

      <p className="mb-12 px-4 font-medium text-black font-serif dark:text-white text-md md:text-lg text-justify">
        LastMinuteEngineering is a dedicated platform designed to assist engineering students in excelling in their exams. We offer a comprehensive range of free resources, including continuous assessment (CA) questions, past year questions (PYQ), and valuable suggestions to enhance your study process. Our aim is to make your exam preparation as efficient and effective as possible, right up to the last minute.
      </p>

      <div className="flex flex-wrap justify-center text-center">
        {AboutUsJson.map((data, index) => (
          <div key={index} className="py-2 sm:mx-4">
            <UserCard data={data} />
          </div>
        ))}
      </div>

      <div className=" sticky bottom-0 left-0 right-0 z-[-1]">
        <img src="/images/video/shape.svg" alt="shape" className="w-full" />
      </div>
      {/* <AboutSectionOne /> */}
      {/* <AboutSectionTwo /> */}
    </div>
  );
};

export default AboutPage;


---

File: page.js

"use client"

import Image from "next/image";
import LinkCard from "../../../components/CollegeReview/LinkCard";


export default function page() {

  const CardData = [
    {
      "pic": "/images/collegereview/collegebatch.png",
      "title": "College Batch",
      "desc": "Write review on your college 250 words or more. (Total words in all sections)",
      "link": "https://www.collegebatch.com/rferf65993f4bb7ed77"
    },
    {
      "pic": "/images/collegereview/collegedunia.png",
      "title": "College Dunia",
      "desc": "CollegeDunia has been created to fulfill a vision of empowering students with knowledge so that they make a wiser decision while choosing their career and alma mater.",
      "link": "https://collegedunia.com/write-review/temp?referral_code=1579DBD"
    },
    {
      "pic": "/images/collegereview/shiksha.png",
      "title": "Shiksha",
      "desc": "Shiksha is a one-stop-solution making course and college selection easy for students looking to pursue undergraduate (UG) and postgraduate (PG) courses in India and abroad; also accessible to users on the move through the website's mobile site.",
      "link": "https://www.shiksha.com/college-review-rating-form?utm_source=shiksha&utm_medium=referral&utm_campaign=3380627thankyou"
    },
  ]

  return (<>

    {/* <Breadcrumb
        pageName="Welcome to the College Review and Earn Section"
        description="Share your honest opinions about your college and earn rewards! Your reviews help future students make informed decisions, so make them count. Follow these simple guidelines to ensure your reviews are valuable and eligible for rewards:"
      /> */}


    <div className="container py-10">
      <div className="flex flex-col items-center justify-center">
        <div className="w-full lg:w-8/12">
          <div>
            <h2 className="mb-8 text-xl font-bold leading-tight text-black dark:text-white sm:text-4xl sm:leading-tight">
              Welcome to the College Review and Earn Section
              free
            </h2>

            <div>
              <p className="mb-10 text-base font-medium leading-relaxed text-body-color sm:text-lg sm:leading-relaxed lg:text-base lg:leading-relaxed xl:text-lg xl:leading-relaxed">
                Share your honest opinions about your college and earn rewards! Your reviews help future students make informed decisions, so make them count. Follow these simple guidelines to ensure your reviews are valuable and eligible for rewards:
              </p>
              <div className="mb-10 w-full overflow-hidden rounded">
                <div className="relative aspect-[97/60] w-full sm:aspect-[97/44]">
                  <Image
                    src="/images/collegereview/collegereviewbanner.jpg"
                    alt="image"
                    fill
                    className="object-cover object-center"
                  />
                </div>
              </div>

              <h3 className="font-xl mb-10 font-bold leading-tight text-black dark:text-white sm:text-2xl sm:leading-tight lg:text-xl lg:leading-tight xl:text-2xl xl:leading-tight">
                Dos:
              </h3>
              <ul className="mb-10 list-inside list-disc text-body-color">
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Be Honest: Share your genuine experiences, whether positive or negative.
                </li>
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Be Specific: Include details about academics, facilities, faculty, campus life, etc.
                </li>
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Be Constructive: Provide feedback that can help others understand the strengths and weaknesses of the college.
                </li>
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Be Clear: Write in simple language that is easy to understand for all readers.
                </li>
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Verify Your Identity: Submit your ID card, library card, or a result PDF (from any semester) for verification.
                </li>
              </ul>


              <h3 className="font-xl mb-10 font-bold leading-tight text-black dark:text-white sm:text-2xl sm:leading-tight lg:text-xl lg:leading-tight xl:text-2xl xl:leading-tight">
                Don'ts:
              </h3>
              <ul className="mb-10 list-inside list-disc text-body-color">
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Plagiarize: Do not copy content from other websites or reviews.
                </li>
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Use Unoriginal Content: Your review should be unique and original.
                </li>
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Use Unusual Words: Stick to clear and straightforward language.
                </li>
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Include Personal Information: Avoid sharing personal details in your review.
                </li>
              </ul>

              <h3 className="font-xl mb-10 font-bold leading-tight text-black dark:text-white sm:text-2xl sm:leading-tight lg:text-xl lg:leading-tight xl:text-2xl xl:leading-tight">
                How It Works:
              </h3>
              <ul className="mb-10 list-inside list-disc text-body-color">
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Submit Your Review: Fill out the review form honestly and thoroughly.
                </li>
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Verification: Upload your ID card, library card, or result PDF for verification purposes.
                </li>
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Earn Rewards: Once your review is verified, you will receive â‚¹225 credited to your account within one and a half days.
                </li>
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Include Personal Information: Avoid sharing personal details in your review.
                </li>
              </ul>

              <h3 className="font-xl mb-10 font-bold leading-tight text-black dark:text-white sm:text-2xl sm:leading-tight lg:text-xl lg:leading-tight xl:text-2xl xl:leading-tight">
                Terms and Conditions:
              </h3>
              <ul className="mb-10 list-inside list-disc text-body-color">
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Reviews must be genuine and based on personal experiences.
                </li>
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Rewards are credited upon successful verification.
                </li>
                <li className="mb-2 text-base font-medium text-body-color sm:text-lg lg:text-base xl:text-lg">
                  Your personal information will be kept confidential.
                </li>
              </ul>
              <p className="text-center text-base font-medium italic text-body-color">
                Start sharing your college journey today and help others navigate theirs! Your insights matter.
              </p>

            </div>
          </div>
        </div>
        <div className="pt-6 lg:w-8/12 flex justify-center items-center flex-col">

          {CardData.map((data, index) => (
            <LinkCard key={index} data={data} />
          ))}

        </div>
      </div>
    </div>
    <div className=" sticky bottom-0 left-0 right-0 z-[-1]">
      <img src="/images/video/shape.svg" alt="shape" className="w-full" />
    </div>

  </>);
};



---

File: page.js

"use client"
// import Breadcrumb from "@/components/Common/Breadcrumb";
import Contact from "../../../components/Contact";

// ============= Contact Us =============*

const ContactPage = () => {
  return (<>

    <Contact />

    <div className=" sticky bottom-0 left-0 right-0 z-[-1]">
      <img src="/images/video/shape.svg" alt="shape" className="w-full" />
    </div>
  </>);
};

export default ContactPage;


---

File: page.js

"use client"
import React from 'react';
import CourseSec from '../../../components/Courses/CourseSec';


export default function page() {
  return (
    <div className='mt-10'>

      {/* <Breadcrumb
      pageName="Courses"
      description="Our teachers will ensure you are well-prepared for your semester exams, helping you achieve excellent marks and a high SGPA. Join us and become part of our family to excel in your academic journey"
    /> */}
      <CourseSec />

      <div className=" sticky bottom-0 left-0 right-0 z-[-1]">
        <img src="/images/video/shape.svg" alt="shape" className="w-full" />
      </div>
    </div>
  )
}


---

File: page.js

"use client"
import React from 'react';
import { useAuth } from '../../../helper/Auth1';
import NotFound from '../../../components/Common/NotFound';
import AccountSetting from '../../../components/EditProfile/AccountSetting';

// ============== Edit Profile ==============*
export default function page() {
    const { LoggedInUserData } = useAuth();


    return (
        <div className='mt-6'>

            {LoggedInUserData ?
                <div className="conatiner m-2 mt-10 sm:mx-10">
                    <h1 className="mb-4 text-3xl font-extrabold text-purple-700 dark:text-purple-300 md:text-5xl lg:text-6xl">Edit Profile :</h1>

                    {/* ======================== Accounts ======================== */}
                    {LoggedInUserData &&
                        <AccountSetting />
                    }

                </div>
                :
                <NotFound />
            }

        </div>
    )
}


---

File: page.js

import Link from "next/link";


// ============== Error ==============*
const ErrorPage = () => {
  return (<>
    <section className="relative z-10 pt-36 pb-16 md:pb-20 lg:pt-[180px] lg:pb-28">
      <div className="container">
        <div className="-mx-4 flex flex-wrap">
          <div className="w-full px-4">
            <div className="mx-auto max-w-[530px] text-center">
              <div className="mx-auto mb-9 text-center">
                <svg
                  className="mx-auto w-full text-center"
                  height="210"
                  viewBox="0 0 474 210"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    opacity="0.5"
                    d="M25 163.051H101.211V191H133.308V163.051H153V136.111H133.308V32H91.2871L25 136.577V163.051ZM101.831 136.111H58.8025V134.869L100.591 68.6445H101.831V136.111Z"
                    stroke="url(#paint0_linear_116:1137)"
                    strokeWidth="3"
                  />
                  <path
                    opacity="0.5"
                    d="M307 133.051H383.211V161H415.308V133.051H435V106.111H415.308V2H373.287L307 106.577V133.051ZM383.831 106.111H340.803V104.869L382.591 38.6445H383.831V106.111Z"
                    stroke="url(#paint1_linear_116:1137)"
                    strokeWidth="3"
                  />
                  <circle
                    opacity="0.8"
                    cx="227.5"
                    cy="81.5"
                    r="68.5"
                    fill="#4A6CF7"
                  />
                  <mask
                    id="mask0_116:1137"
                    style={{ maskType: "alpha" }}
                    maskUnits="userSpaceOnUse"
                    x="159"
                    y="13"
                    width="137"
                    height="137"
                  >
                    <circle
                      opacity="0.8"
                      cx="227.5"
                      cy="81.5"
                      r="68.5"
                      fill="#4A6CF7"
                    />
                  </mask>
                  <g mask="url(#mask0_116:1137)">
                    <circle
                      opacity="0.8"
                      cx="227.5"
                      cy="81.5"
                      r="68.5"
                      fill="url(#paint2_radial_116:1137)"
                    />
                    <g opacity="0.8" filter="url(#filter0_f_116:1137)">
                      <circle
                        cx="233.543"
                        cy="49.2645"
                        r="28.2059"
                        fill="white"
                      />
                    </g>
                  </g>
                  <path
                    d="M0 182H83.5V209H150.5V178H169.5V148.5C169.5 148.5 194 165 229.5 165C265 165 294 134.5 294 134.5V152H306.5H361V178H435V152H474"
                    stroke="white"
                    strokeOpacity="0.08"
                    strokeWidth="2"
                  />
                  <defs>
                    <filter
                      id="filter0_f_116:1137"
                      x="175.337"
                      y="-8.94141"
                      width="116.412"
                      height="116.412"
                      filterUnits="userSpaceOnUse"
                      colorInterpolationFilters="sRGB"
                    >
                      <feFlood floodOpacity="0" result="BackgroundImageFix" />
                      <feBlend
                        mode="normal"
                        in="SourceGraphic"
                        in2="BackgroundImageFix"
                        result="shape"
                      />
                      <feGaussianBlur
                        stdDeviation="15"
                        result="effect1_foregroundBlur_116:1137"
                      />
                    </filter>
                    <linearGradient
                      id="paint0_linear_116:1137"
                      x1="25"
                      y1="183"
                      x2="126.155"
                      y2="27.0837"
                      gradientUnits="userSpaceOnUse"
                    >
                      <stop stopColor="#4A6CF7" stopOpacity="0" />
                      <stop offset="1" stopColor="#4A6CF7" />
                    </linearGradient>
                    <linearGradient
                      id="paint1_linear_116:1137"
                      x1="307"
                      y1="153"
                      x2="408.155"
                      y2="-2.91631"
                      gradientUnits="userSpaceOnUse"
                    >
                      <stop stopColor="#4A6CF7" stopOpacity="0" />
                      <stop offset="1" stopColor="#4A6CF7" />
                    </linearGradient>
                    <radialGradient
                      id="paint2_radial_116:1137"
                      cx="0"
                      cy="0"
                      r="1"
                      gradientUnits="userSpaceOnUse"
                      gradientTransform="translate(227.5 81.5) rotate(90) scale(73.5368)"
                    >
                      <stop stopOpacity="0.47" />
                      <stop offset="1" stopOpacity="0" />
                    </radialGradient>
                  </defs>
                </svg>
              </div>
              <h3 className="mb-4 text-3xl font-bold text-black dark:text-white sm:text-4xl">
                Sorry, the page canâ€™t be found
              </h3>
              <p className="mb-10 text-base font-medium leading-relaxed text-gray-700 sm:text-lg sm:leading-relaxed">
                The page you were looking for appears to have been moved,
                deleted or does not exist.
              </p>
              <Link
                href="/"
                className="rounded-md bg-blue-900 py-3 px-8 text-base font-bold text-white shadow-signUp duration-300 md:px-9 lg:px-8 xl:px-9"
              >
                Back to Homepage
              </Link>
            </div>
          </div>
        </div>
      </div>
      <div className="absolute left-0 bottom-0 z-[-1] hidden sm:block">
        <svg
          width="406"
          height="286"
          viewBox="0 0 406 286"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g opacity="0.5">
            <rect
              opacity="0.5"
              x="56.25"
              y="110.344"
              width="116.719"
              height="116.438"
              stroke="url(#paint0_linear_116:1140)"
            />
            <rect
              opacity="0.1"
              x="56.25"
              y="110.344"
              width="116.719"
              height="116.438"
              fill="url(#paint1_linear_116:1140)"
            />
            <path
              opacity="0.5"
              d="M172.688 110.344L229.219 51V167.601L172.688 226.781V110.344Z"
              stroke="url(#paint2_linear_116:1140)"
            />
            <path
              opacity="0.1"
              d="M172.688 110.344L229.219 51V167.601L172.688 226.781V110.344Z"
              fill="url(#paint3_linear_116:1140)"
            />
            <path
              opacity="0.5"
              d="M0 169.619L56.25 110.344V226.85L0 286.125V169.619Z"
              stroke="url(#paint4_linear_116:1140)"
            />
            <path
              opacity="0.1"
              d="M0 169.619L56.25 110.344V226.85L0 286.125V169.619Z"
              fill="url(#paint5_linear_116:1140)"
            />
            <rect
              opacity="0.5"
              x="228.938"
              y="51.2812"
              width="119.25"
              height="116.438"
              stroke="url(#paint6_linear_116:1140)"
            />
            <rect
              opacity="0.1"
              x="228.938"
              y="51.2812"
              width="119.25"
              height="116.438"
              fill="url(#paint7_linear_116:1140)"
            />
            <path
              opacity="0.5"
              d="M347.906 51.2812L405 2V110.113L347.906 167.719V51.2812Z"
              stroke="url(#paint8_linear_116:1140)"
            />
            <path
              opacity="0.1"
              d="M347.906 51.2812L405 2V110.113L347.906 167.719V51.2812Z"
              fill="url(#paint9_linear_116:1140)"
            />
          </g>
          <defs>
            <linearGradient
              id="paint0_linear_116:1140"
              x1="49.0781"
              y1="112.313"
              x2="148.922"
              y2="131.859"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint1_linear_116:1140"
              x1="179.141"
              y1="209.062"
              x2="32.6026"
              y2="145.47"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint2_linear_116:1140"
              x1="170.016"
              y1="125.25"
              x2="217.542"
              y2="125.507"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint3_linear_116:1140"
              x1="233.578"
              y1="113.156"
              x2="146.509"
              y2="143.95"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint4_linear_116:1140"
              x1="-3.45633"
              y1="113.316"
              x2="46.311"
              y2="116.426"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint5_linear_116:1140"
              x1="69.8907"
              y1="189.234"
              x2="84.0124"
              y2="249.947"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint6_linear_116:1140"
              x1="218.953"
              y1="157.453"
              x2="330.261"
              y2="148.369"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint7_linear_116:1140"
              x1="348.187"
              y1="46.6406"
              x2="280.112"
              y2="168.552"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint8_linear_116:1140"
              x1="329"
              y1="190"
              x2="369.525"
              y2="-29.8829"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint9_linear_116:1140"
              x1="409"
              y1="10"
              x2="331.729"
              y2="34.2741"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
          </defs>
        </svg>
      </div>
      <div className="absolute top-0 right-0 z-[-1] hidden sm:block">
        <svg
          width="406"
          height="286"
          viewBox="0 0 406 286"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g opacity="0.5">
            <rect
              opacity="0.5"
              x="57.25"
              y="108.344"
              width="116.719"
              height="116.438"
              stroke="url(#paint0_linear_116:1151)"
            />
            <rect
              opacity="0.1"
              x="57.25"
              y="108.344"
              width="116.719"
              height="116.438"
              fill="url(#paint1_linear_116:1151)"
            />
            <path
              opacity="0.5"
              d="M173.688 108.344L230.219 49V165.601L173.688 224.781V108.344Z"
              stroke="url(#paint2_linear_116:1151)"
            />
            <path
              opacity="0.1"
              d="M173.688 108.344L230.219 49V165.601L173.688 224.781V108.344Z"
              fill="url(#paint3_linear_116:1151)"
            />
            <path
              opacity="0.5"
              d="M1 167.619L57.25 108.344V224.85L1 284.125V167.619Z"
              stroke="url(#paint4_linear_116:1151)"
            />
            <path
              opacity="0.1"
              d="M1 167.619L57.25 108.344V224.85L1 284.125V167.619Z"
              fill="url(#paint5_linear_116:1151)"
            />
            <rect
              opacity="0.5"
              x="229.938"
              y="49.2812"
              width="119.25"
              height="116.438"
              stroke="url(#paint6_linear_116:1151)"
            />
            <rect
              opacity="0.1"
              x="229.938"
              y="49.2812"
              width="119.25"
              height="116.438"
              fill="url(#paint7_linear_116:1151)"
            />
            <path
              opacity="0.5"
              d="M348.906 49.2812L406 0V108.113L348.906 165.719V49.2812Z"
              stroke="url(#paint8_linear_116:1151)"
            />
            <path
              opacity="0.1"
              d="M348.906 49.2812L406 0V108.113L348.906 165.719V49.2812Z"
              fill="url(#paint9_linear_116:1151)"
            />
          </g>
          <defs>
            <linearGradient
              id="paint0_linear_116:1151"
              x1="50.0781"
              y1="110.313"
              x2="149.922"
              y2="129.859"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint1_linear_116:1151"
              x1="180.141"
              y1="207.062"
              x2="33.6026"
              y2="143.47"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint2_linear_116:1151"
              x1="171.016"
              y1="123.25"
              x2="218.542"
              y2="123.507"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint3_linear_116:1151"
              x1="234.578"
              y1="111.156"
              x2="147.509"
              y2="141.95"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint4_linear_116:1151"
              x1="85.5"
              y1="71.5"
              x2="100.174"
              y2="270.716"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint5_linear_116:1151"
              x1="70.8907"
              y1="187.234"
              x2="85.0124"
              y2="247.947"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint6_linear_116:1151"
              x1="219.953"
              y1="155.453"
              x2="331.261"
              y2="146.369"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint7_linear_116:1151"
              x1="349.187"
              y1="44.6406"
              x2="281.112"
              y2="166.552"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint8_linear_116:1151"
              x1="394.75"
              y1="64.3284"
              x2="409.531"
              y2="110.901"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint9_linear_116:1151"
              x1="410"
              y1="8.00001"
              x2="332.729"
              y2="32.2741"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
          </defs>
        </svg>
      </div>
    </section>
  </>);
};

export default ErrorPage;


---

File: page.js

"use client"
import React, { useEffect, useState } from 'react';
import { useAuth } from '../../../helper/Auth1';
import { useRouter } from 'next/navigation';
import Breadcrumb from '../../../components/Common/Breadcrumb';
import OptionCard from '../../../components/Common/OptionCard';
import { FetchGFolderFunc } from '../../../helper/Others/FetchGFolderFunc';
import UsersPageSkeleton from '../../../components/Skeleton/UsersPageSkeleton';


// ===================== Find =====================*
export default function page() {
  const router = useRouter();
  const [Options, setOptions] = useState([]);
  const { LoggedInUserData, FirstLoad } = useAuth();
  const [LoaderVisi, setLoaderVisi] = useState(true);


  const GetFolderData = async () => {
    setLoaderVisi(true);
    try {
      // Root drive folder ID
      const data = await FetchGFolderFunc("1emjALkEUwYSRoCn3bo8DVcH_e69RL49v");
      // console.log(data)
      setOptions(data.children);
    } catch (error) {
      console.error(error);
    }
    setLoaderVisi(false);
  }


  useEffect(() => {
    GetFolderData();
  }, [FirstLoad, LoggedInUserData])


  return (
    <div className="min-h-screen mb-24">
      {/* {LoggedInUserData ? <> */}
      <Breadcrumb
        pageName="Select Department"
        description="Selecting the appropriate department will ensure you receive the most relevant and efficient help."
      />

      {LoaderVisi ? <UsersPageSkeleton /> : <>
        {Options.length != 0 &&
          <div className='flex justify-center items-center flex-row flex-wrap w-full p-1'>
            {Options.map((data, index) => (
              <OptionCard key={index} data={data} />
            ))}
          </div>
        }
      </>}

      <div className=" sticky bottom-0 left-0 right-0 z-[-1]">
        <img src="/images/video/shape.svg" alt="shape" className="w-full" />
      </div>
      {/* </>
        :
        <NotFound />
      } */}
    </div>
  )
}


---

File: page.js

"use client"
import React, { useEffect, useState } from 'react'
import { useAuth } from '../../../../helper/Auth1';
import { useRouter } from 'next/navigation';
import NoFile from '../../../../components/Common/NoPost';
import OptionCard from '../../../../components/Common/OptionCard';
import { FetchGFolderFunc } from '../../../../helper/Others/FetchGFolderFunc';
import UsersPageSkeleton from '../../../../components/Skeleton/UsersPageSkeleton';
import ShareBtn from '../../../../components/Common/ShareBtn';


// =========================== Page ===========================*
export default function page({ params }) {
  const { key } = params;
  const router = useRouter();
  const { LoggedInUserData, FirstLoad } = useAuth();
  const [Options, setOptions] = useState([])
  const [PageTitle, setPageTitle] = useState("")
  const [PageDesc, setPageDesc] = useState("")
  const [LoaderVisi, setLoaderVisi] = useState(true);


  const GetFolderData = async () => {
    setLoaderVisi(true);
    try {
      const data = await FetchGFolderFunc(key);
      // console.log(data)
      setOptions(data.children);
    } catch (error) {
      console.error(error);
    }
    setLoaderVisi(false);
  }


  useEffect(() => {
    GetFolderData();
  }, [FirstLoad, LoggedInUserData])


  return (
    <div className="min-h-screen my-24">

      {/* {LoggedInUserData ? <> */}
      {/* <Breadcrumb
        pageName={PageTitle}
        description={PageDesc}
      /> */}


      <div className='w-fit mx-auto font-bold text-lg text-black dark:text-white'>
        Share :
        <ShareBtn ButtonclassName="text-white order-3 bg-gray-800 hover:bg-gray-900 focus:outline-none font-medium rounded-lg text-md px-5 py-2.5 me-2 mb-2 mx-2  dark:bg-gray-800 dark:hover:bg-gray-700" icon="true" />
      </div>

      {LoaderVisi ? <UsersPageSkeleton /> : <>
        {Options.length != 0 ?
          <div className='flex justify-center items-center flex-row flex-wrap w-full p-1'>
            {Options.map((data, index) => (
              <OptionCard key={index} data={data} />
            ))}
          </div>
          :
          <NoFile />
        }
      </>}


      <div className=" sticky bottom-0 left-0 right-0 z-[-1]">
        <img src="/images/video/shape.svg" alt="shape" className="w-full" />
      </div>

      {/* </>
        :
        <NotFound />
      } */}

    </div>
  )
}


---

File: page.js

"use client"
// ================== Imports ==================
import { useEffect, useState } from "react";
import { useAuth } from "../../../helper/Auth1";

import depDetailsJson from "../../../Data/depDetails.json"
import SelectOption from "../../../components/Common/SelectOption";
import GPAOptions from "../../../components/GPACalculator/GPAOptions";
import SGPASec from "../../../components/GPACalculator/SGPASec";
import YGPATable from "../../../components/GPACalculator/YGPATable";
import CGPATable from "../../../components/GPACalculator/CGPATable";
import SectionTitle from "../../../components/Common/SectionTitle";


// ==================== Page ====================*
export default function GPACalculatorPage() {
  const { LoggedInUserData, FirstLoad } = useAuth();

  const [DepartmentOptions, setDepartmentOptions] = useState([]);
  const [SelectedDep, setSelectedDep] = useState("");

  const [GPAtype, setGPAtype] = useState("");


  useEffect(() => {
    const departments = Object.keys(depDetailsJson);
    const data = [];
    departments.forEach(dep => {
      data.push({
        "name": dep,
        "key": dep
      });
    });
    setDepartmentOptions(data);
  }, [])


  const handleDepSelect = (key) => {
    setSelectedDep(key);
  }

  return (
    <div className="relative min-h-fit my-12">

      <SectionTitle
        title="GPA CALCULATOR"
        paragraph="MAKAUT GPA CALCULATOR"
        center
        mb="20px"
      />

      <GPAOptions setGPAtype={setGPAtype} GPAtype={GPAtype} />

      <SelectOption text={"Department"} options={DepartmentOptions} onSelect={handleDepSelect} />


      {SelectedDep != "" && GPAtype == "SGPA" &&
        <SGPASec SelectedDep={SelectedDep} />
      }

      {GPAtype == "YGPA" &&
        <YGPATable />
      }

      {GPAtype == "CGPA" &&
        <CGPATable />
      }


      <div className="absolute bottom-0 left-0 right-0 z-[-1]">
        <img src="/images/video/shape.svg" alt="shape" className="w-full" />
      </div>

    </div>
  )
};



---

File: layout.js

import { Inter } from "next/font/google";
import { Analytics } from "@vercel/analytics/react"

import Footer from "../../components/Footer";
import Header from "../../components/Header";
import ScrollToTop from "../../components/ScrollToTop";
import { AuthUserProvider } from "../../helper/Auth1";
import Background from "../../components/Common/Background";
// import { BackgroundBeamsDemo } from "@/components/Common/BackgroundBeamsDemo";

const inter = Inter({ subsets: ["latin"] });

// ============================= Meta Data =============================
export const metadata = {
  manifest: "/manifest.json",
  metadataBase: new URL(process.env.NEXT_PUBLIC_BASE_URL),
  title: 'Last Minute Engineering',
  description: 'Join Last Minute Engineering today and take control of your engineering education, no matter how tight the schedule.',
  generator: 'Next.js',
  applicationName: 'Last Minute Engineering',
  referrer: 'origin-when-cross-origin',
  keywords: [
    'Last Minute Engineering',
    'lastminuteengineering',
    'lme', 'engineers',
    'Last', 'Minute', 'Engineering',
    'tuitions', 'momente', 'lastminuteengineers',
    'lastmomenttuitions', 'lastmomentengineering',
    'last', 'minute', 'engineering',
    'soumojit', 'shome', 'soumojitshome', 'Next.js'
  ],

  authors: [{ name: 'Soumojit Shome' }, { name: 'Soumojit Shome', url: 'https://soumojitshome.vercel.app' }],
  creator: 'Soumojit Shome',
  publisher: 'Soumojit Shome',

  icons: {
    icon: '/images/logo/mainlogo2.jpg',
    shortcut: '/images/logo/mainlogo2.jpg',
    apple: '/images/logo/mainlogo2.jpg',
    other: {
      rel: 'apple-touch-icon-precomposed',
      url: '/images/logo/mainlogo2.jpg',
    },
  },

  openGraph: {
    title: 'Last Minute Engineering',
    description: 'Join Last Minute Engineering today and take control of your engineering education, no matter how tight the schedule.',
    url: '/images/logo/mainlogo2.jpg',
    siteName: 'Last Minute Engineering',
    images: [
      {
        url: '/images/logo/mainlogo2.jpg', // Must be an absolute URL
        width: 800,
        height: 600,
      },
      {
        url: '/images/logo/mainlogo2.jpg', // Must be an absolute URL
        width: 1800,
        height: 1600,
        alt: 'Last Minute Engineering',
      },
    ],
    locale: 'en_US',
    type: 'website',
  },
}

// ============================= Root Layout =============================
export default function RootLayout({ children, }) {
  return (
    

     <>
        <AuthUserProvider>
      
            <Header />
            <Background />

          

            {children}
            
            <Footer />
            <ScrollToTop />
      
        </AuthUserProvider >
        <Analytics />
        </>  
  );
}





---

File: page.js

"use client"
import React from 'react'
import socialLinks from '../../../Data/socialLinks.json'
import SectionTitle from '../../../components/Common/SectionTitle'

export default function page() {


  return (<>
    <div className='w-full p-2 py-10'>

      <SectionTitle
        title="Links"
        paragraph=""
        center
        mb="20px"
      />


      <div className='mt-4 mb-10 p-2 sm:w-[80vw] mx-auto gap-4 flex justify-center items-center flex-col'>

        {socialLinks.map((data, index) => (
          <a href={data.link} key={index} target="_blank"
            className="align-middle select-none font-sans font-bold text-center transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none text-md py-3 px-6 rounded-lg bg-gray-900 text-white shadow-md shadow-gray-900/10 hover:shadow-lg hover:shadow-gray-900/20 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none block w-full">
            {data.name} â†’
          </a>
        ))}

      </div>
    </div>
    <div className=" sticky bottom-0 left-0 right-0 z-[-1]">
      <img src="/images/video/shape.svg" alt="shape" className="w-full" />
    </div>
  </>)
}


---

File: page.js

'use client'

import { useState, useEffect, Suspense } from 'react'
import { useSearchParams, useRouter, usePathname } from 'next/navigation'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../../../components/ui/select"
import { Card, CardContent, CardHeader, CardTitle } from "../../../components/ui/card"
import { Button } from "../../../components/ui/button"
import Link from 'next/link'
import { MainDataSet } from '../../../Data/MainDataSet'

function MaterialSearch() {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()
  
  const [stream, setStream] = useState(searchParams.get('stream') || '')
  const [semester, setSemester] = useState(searchParams.get('semester') || '')
  const [materialType, setMaterialType] = useState(searchParams.get('type') || 'all')

  const [filteredMaterials, setFilteredMaterials] = useState([])

  useEffect(() => {
    const filtered = MainDataSet
      .filter(dept => dept.key === stream)
      .flatMap(dept => 
        dept.children
          .filter(sem => !semester || sem.key === semester)
          .flatMap(sem => 
            materialType === 'all' ? sem.children : sem.children.filter(material => material.key === materialType)
          )
      )
    setFilteredMaterials(filtered)
  }, [stream, semester, materialType])

  const updateSearchParams = (key, value) => {
    const current = new URLSearchParams(Array.from(searchParams.entries()))
    if (!value || (key === 'type' && value === 'all')) {
      current.delete(key)
    } else {
      current.set(key, value)
    }
    const search = current.toString()
    const query = search ? `?${search}` : ""
    router.push(`${pathname}${query}`)
  }

  const isFiltered = stream && (semester || materialType !== 'all')

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Study Material Search</h1>
       
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
        <Select value={stream} onValueChange={(value) => { setStream(value); updateSearchParams('stream', value) }}>
          <SelectTrigger>
            <SelectValue placeholder="Select Stream" />
          </SelectTrigger>
          <SelectContent>
            {MainDataSet.map(dept => (
              <SelectItem key={dept.key} value={dept.key}>{dept.name}</SelectItem>
            ))}
          </SelectContent>
        </Select>
        <Select value={semester} onValueChange={(value) => { setSemester(value); updateSearchParams('semester', value) }}>
          <SelectTrigger>
            <SelectValue placeholder="Select Semester" />
          </SelectTrigger>
          <SelectContent>
            {stream && MainDataSet.find(dept => dept.key === stream)?.children.map(sem => (
              <SelectItem key={sem.key} value={sem.key}>{sem.name}</SelectItem>
            ))}
          </SelectContent>
        </Select>
        <Select value={materialType} onValueChange={(value) => { setMaterialType(value); updateSearchParams('type', value) }}>
          <SelectTrigger>
            <SelectValue placeholder="Select Material Type" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Materials</SelectItem>
            {stream && MainDataSet.find(dept => dept.key === stream)?.children[0].children.map(material => (
              <SelectItem key={material.key} value={material.key}>{material.name}</SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      {!isFiltered ? (
        <div className="text-center p-8  backdrop-blur-lg rounded-lg">
          <p className="text-lg font-semibold">Please select a stream and either a semester or specific material type to view study materials.</p>
          <p className="text-sm text-gray-600 mt-2">You can further refine your search by selecting all three filters.</p>
        </div>
      ) : filteredMaterials.length === 0 ? (
        <div className="text-center p-8  backdrop-blur-lg rounded-lg">
          <p className="text-lg font-semibold">No materials found for the selected filters.</p>
          <p className="text-sm text-gray-600 mt-2">Try adjusting your selection criteria.</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {filteredMaterials.map((material, index) => (
            <Card key={`${material.key}-${index}`}>
              <CardHeader>
                <CardTitle>{material.name}</CardTitle>
              </CardHeader>
              <CardContent>
                {material.link ? (
                  <Button className="w-full" onClick={() => window.open(material.link, '_blank')}>
                    View Material
                  </Button>
                ) : material.type === 'folder' && material.id ? (
                  <Link href={`/find/${material.id}`} passHref>
                    <Button className="w-full">View Folder</Button>
                  </Link>
                ) : (
                  <Button className="w-full" disabled>No Link Available</Button>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  )
}

export default function MaterialPage() {
  return (
    // Wrap with Suspense to handle async client-side rendering properly
    <Suspense fallback={<div>Loading...</div>}>
      <MaterialSearch />
    </Suspense>
  )
}


---

File: page.js

"use client"
import React from 'react';
import NoticeJson from "../../../Data/Notice.json";
import OptionCard from '../../../components/Common/OptionCard';
import SectionTitle from '../../../components/Common/SectionTitle';

export default function Noticepage({ HScroll = false }) {
  return (
    <div className='min-h-fit my-10'>
      <SectionTitle
        title="Latest Announcement"
        paragraph="MAKAUT Latest Announcement"
        center
        mb="10px"
      />

      <div className={`flex ${HScroll ? "flex-row overflow-x-auto" : "justify-center"} w-full py-4`}>
        <div className="flex flex-wrap justify-center gap-4 max-w-screen-lg mx-auto">
          {NoticeJson.map((data, index) => (
            <div key={index} className="py-2 flex justify-center">
              <OptionCard data={data} />
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}


---

File: page.js

"use client"
// ================== Imports ==================
import { useEffect, useState } from "react";
import { useAuth } from "../../../../helper/Auth1";
import ErrorPage from "../../error/page";
import { useRouter } from 'next/navigation';
import Breadcrumb from "../../../../components/Common/Breadcrumb";
import OptionCard from "../../../../components/Common/OptionCard";
import SelectOption from "../../../../components/Common/SelectOption";

const specificKeys = ["syllabus", "organizers", "pyqs", "books", "suggestions", "CA-Questions"];


// =========== Page ===========*
export default function page({ params }) {
  const { querykey } = params;
  const { LoggedInUserData, FirstLoad } = useAuth();
  const router = useRouter();
  const [Options, setOptions] = useState([]);



  // useEffect(() => {
  //   if (!LoggedInUserData && !FirstLoad) {
  //     router.push("/signin");
  //   }
  // }, [FirstLoad, LoggedInUserData])



  if (!specificKeys.includes(querykey)) {
    return <ErrorPage />
  }

  function getAllSemdata(departmentKey) {
    const department = MainDataJson.find(dept => dept.key == departmentKey);
    if (!department) {
      return `Department with key ${departmentKey} not found.`;
    }

    const data = [];
    // const queryData = department.children.find(ch => ch.key == querykey);

    department.children.forEach(sem => {
      const temp = sem.children.find(ch => ch.key == querykey.toLowerCase())
      data.push({
        "name": `${temp.name} : ${sem.name}`,
        "description": department.name,
        "id": temp.id,
        "link": temp.link,
        "type": temp.type
      });
    });

    return data;
  }

  const handleSelect = (value) => {
    const data = getAllSemdata(value);
    setOptions(data);
  }


  return (
    <div className="min-h-screen mb-24">

      {/* {LoggedInUserData ? <> */}
      <Breadcrumb
        pageName={querykey.charAt(0).toUpperCase() + querykey.slice(1)}
        description="Download and utilize detailed study guides, lecture notes, text books, and practice problems to reinforce your learning."
      />

      <SelectOption text={"Department"} options={MainDataJson} onSelect={handleSelect} />

      {Options.length != 0 &&
        <div className='flex justify-center items-center flex-row flex-wrap w-full p-1'>
          {Options.map((data, index) => (
            <OptionCard key={index} data={data} />

          ))}
        </div>
      }

      <div className=" sticky bottom-0 left-0 right-0 z-[-1]">
        <img src="/images/video/shape.svg" alt="shape" className="w-full" />
      </div>

      {/* </>
        :
        <NotFound />
      } */}

    </div>
  )
};



---

File: page.js

"use client"
import { useEffect } from "react";
import ScrollUp from "../../components/Common/ScrollUp";
import Contact from "../../components/Contact";
import Features from "../../components/Features";
import Hero from "../../components/Hero";
import Video from "../../components/Video";
import { useAuth } from "../../helper/Auth1";
import { useRouter } from 'next/navigation';
import { TextRevealDemo } from "../../components/Common/TextRevealDemo";
import { AnimatedBeamDemo } from "../../components/Common/AnimatedBeamDemo";
import SubscribeSec from "../../components/Common/Subscribe";
import VisitorCountSec from "../../components/Common/VisitorCount";
import CourseSec from "../../components/Courses/CourseSec";
import GPACalculatorPage from "./gpa/page";
import Noticepage from "./notice/page";
import WPIconBtn from "../../components/Common/WPIconBtn";


export default function Home() {
  const router = useRouter();
  const { LoggedInUserData, FirstLoad } = useAuth();

  // useEffect(() => {
  //   if (!LoggedInUserData && !FirstLoad) {
  //     router.push("/signin");
  //   }
  // }, [FirstLoad, LoggedInUserData])

  return (
    <>
      <ScrollUp />
      <WPIconBtn />
      <Hero />
      <Features />
      <Noticepage HScroll={true} />
      <VisitorCountSec />

      <AnimatedBeamDemo />
      <TextRevealDemo />
      <Video />
      <CourseSec />
      <GPACalculatorPage />

      {/* <Brands /> */}
      {/* <AboutSectionOne /> */}
      {/* <AboutSectionTwo /> */}
      {/* <Testimonials /> */}
      {/* <Pricing /> */}
      {/* <Blog /> */}
      {/* <CardWithTab / > */}

      <SubscribeSec />
      <Contact />
    </>
  );
}


---

File: page.js

"use client"
// ======================== Imports ========================
import React from "react";
import Link from "next/link";
import { useAuth } from "../../../helper/Auth1";
import { useRouter } from "next/navigation";
import { useState, useEffect } from "react";
import 'react-toastify/dist/ReactToastify.css';
import { LogInFunction } from "../../../helper/Auth/login";
import { ToastContainer, toast } from 'react-toastify';
import { OTPSendFunction } from "../../../helper/Mail/OTPSend";
import { ResetPassword } from "../../../helper/Auth/ResetPassword";
import { generateRandomNumber } from "../../../helper/Others/GenerateRandomNumber";
import { Get_Current_Time_String } from "../../../helper/Others/Get_Current_Time_String";
import ColorRingLoader from "../../../components/Common/ColorRingLoader";
import { signInWithGoogleFunc } from "../../../helper/Auth/SignInWithGoogleFunc";
import UserProfileSkeleton from "../../../components/Skeleton/UserProfileSkeleton";


// ==================== SignIn Page ====================*
const SigninPage = () => {
  const { LoggedInUserData, setLoggedInUserData } = useAuth();

  const router = useRouter();

  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [InputOTP, setInputOTP] = useState("");
  const [GenOTP, setGenOTP] = useState("");

  const [showPassword, setShowPassword] = useState(false);
  const [LoaderVisi, setLoaderVisi] = useState(false);
  const [GAuthLoaderVisi, setGAuthLoaderVisi] = useState(false);
  const [ShowMessage, setShowMessage] = useState('');
  const [PassResetLoading, setPassResetLoading] = useState(false);



  // ================= ReDirect =================
  useEffect(() => {
    if (LoggedInUserData) {
      router.push(`/user/${LoggedInUserData.userName}`);
      // router.push("/");
    }
  }, [LoggedInUserData])


  // ==================== Login With Email ====================
  const LogInHandel = async () => {
    // =============== Simple Login ===============
    if (GenOTP == "") {
      if (email.trim() != "" && password.trim() != "") {
        setLoaderVisi(true);
        try {
          const time = Get_Current_Time_String();
          const data = await LogInFunction(email, password, time)
          setShowMessage(data.message);
          if (data.success) {
            setLoggedInUserData(data.user);
            toast.success(data.message);
            if (typeof window !== 'undefined') {
              localStorage.setItem('authToken', data.token);
            }
            router.push(`/user/${data.user.userName}`);
          }
          else {
            toast.error(data.message);
          }
        } catch (error) {
          console.error(error)
        }
        setLoaderVisi(false);
      }
      else {
        setShowMessage("Fill All the Fields");
        toast.error("Fill All the Fields");
      }
    }
    // =============== Pass Reset Login ===============
    else {
      if (InputOTP != "" && GenOTP != "" && email.trim() != "" && password.trim() != "") {
        if (InputOTP == GenOTP) {
          setLoaderVisi(true);
          try {
            const time = Get_Current_Time_String();
            const data = await ResetPassword(email, password, time);
            setShowMessage(data.message);
            if (data.success) {
              setLoggedInUserData(data.user);
              toast.success(data.message);
              if (typeof window !== 'undefined') {
                localStorage.setItem('authToken', data.token);
              }
              router.push(`/user/${data.user.userName}`);
            }
            else {
              toast.error(data.message);
            }
          } catch (error) {
            console.error(error)
          }
          setLoaderVisi(false);
        }
        else {
          setShowMessage("Wrong OTP");
          toast.error("Wrong OTP");
        }
      }
      else {
        setShowMessage("Fill All the Fields");
        toast.error("Fill All the Fields");
      }
    }
  }


  // ============================ Reset Password Handel ============================
  const ResetPasswordHandel = async () => {
    if (email.trim() != "") {
      setPassResetLoading(true);
      try {
        const otp = generateRandomNumber(6);
        const data = await OTPSendFunction(otp, email);
        setGenOTP(otp);
        setPassword("");
        setShowMessage(data.message);
        toast.success(`${data.message} Check Mail`);
      } catch (error) {
        setShowMessage(error.message);
        toast.error(error.message);
      }
      setPassResetLoading(false);
    }
  }



  // =============== Handel Google LogIn ===============
  const HandelGoogleLogIn = async () => {
    setGAuthLoaderVisi(true);
    try {
      const res = await signInWithGoogleFunc();
      if (res.success) {
        setLoggedInUserData(res.user);
        if (typeof window !== 'undefined') {
          localStorage.setItem('authToken', res.token);
        }
        router.push(`/user/${res.user.userName}`);
      }
    } catch (error) {
      setShowMessage(`${error.error.message}`);
      setGAuthLoaderVisi(false);
    }
  }



  return (<>
    <ToastContainer />

    {GAuthLoaderVisi ? <UserProfileSkeleton /> :

      <section className="relative z-10 overflow-hidden py-20">
        <div className="container">
          <div className="-mx-4 flex flex-wrap">
            <div className="w-full px-4">
              <div className="mx-auto max-w-[500px] rounded-md bg-gray-500 bg-opacity-20 py-10 px-6 dark:bg-gray-900 sm:p-[60px]">
                <h3 className="mb-3 text-center text-2xl font-bold text-black dark:text-white sm:text-3xl">
                  Sign in to your account
                </h3>
                <p className="mb-11 text-center text-base font-medium text-black dark:text-white">
                  Login to your account for a faster checkout.
                </p>
                {LoaderVisi ? <ColorRingLoader /> :
                  <button onClick={HandelGoogleLogIn} className="mb-6 flex w-full items-center justify-center rounded-md bg-white p-3 text-base font-medium text-black dark:text-white dark:bg-[#242B51] dark:shadow-signUp">
                    <span className="mr-3">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 20 20"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <g clipPath="url(#clip0_95:967)">
                          <path
                            d="M20.0001 10.2216C20.0122 9.53416 19.9397 8.84776 19.7844 8.17725H10.2042V11.8883H15.8277C15.7211 12.539 15.4814 13.1618 15.1229 13.7194C14.7644 14.2769 14.2946 14.7577 13.7416 15.1327L13.722 15.257L16.7512 17.5567L16.961 17.5772C18.8883 15.8328 19.9997 13.266 19.9997 10.2216"
                            fill="#4285F4"
                          />
                          <path
                            d="M10.2042 20.0001C12.9592 20.0001 15.2721 19.1111 16.9616 17.5778L13.7416 15.1332C12.88 15.7223 11.7235 16.1334 10.2042 16.1334C8.91385 16.126 7.65863 15.7206 6.61663 14.9747C5.57464 14.2287 4.79879 13.1802 4.39915 11.9778L4.27957 11.9878L1.12973 14.3766L1.08856 14.4888C1.93689 16.1457 3.23879 17.5387 4.84869 18.512C6.45859 19.4852 8.31301 20.0005 10.2046 20.0001"
                            fill="#34A853"
                          />
                          <path
                            d="M4.39911 11.9777C4.17592 11.3411 4.06075 10.673 4.05819 9.99996C4.0623 9.32799 4.17322 8.66075 4.38696 8.02225L4.38127 7.88968L1.19282 5.4624L1.08852 5.51101C0.372885 6.90343 0.00012207 8.4408 0.00012207 9.99987C0.00012207 11.5589 0.372885 13.0963 1.08852 14.4887L4.39911 11.9777Z"
                            fill="#FBBC05"
                          />
                          <path
                            d="M10.2042 3.86663C11.6663 3.84438 13.0804 4.37803 14.1498 5.35558L17.0296 2.59996C15.1826 0.901848 12.7366 -0.0298855 10.2042 -3.6784e-05C8.3126 -0.000477834 6.45819 0.514732 4.8483 1.48798C3.2384 2.46124 1.93649 3.85416 1.08813 5.51101L4.38775 8.02225C4.79132 6.82005 5.56974 5.77231 6.61327 5.02675C7.6568 4.28118 8.91279 3.87541 10.2042 3.86663Z"
                            fill="#EB4335"
                          />
                        </g>
                        <defs>
                          <clipPath id="clip0_95:967">
                            <rect width="20" height="20" fill="white" />
                          </clipPath>
                        </defs>
                      </svg>
                    </span>
                    Sign in with Google
                  </button>
                }
                <div className="mb-8 flex items-center justify-center">
                  <span className="hidden h-[1px] w-full max-w-[70px] bg-gray-700 sm:block"></span>
                  <p className="w-full px-5 text-center text-base font-medium text-black dark:text-white">
                    Or, sign in with your email
                  </p>
                  <span className="hidden h-[1px] w-full max-w-[70px] bg-gray-700 sm:block"></span>
                </div>
                <div>
                  <div className="mb-8">
                    <label
                      htmlFor="email"
                      className="mb-3 block text-sm font-medium text-black dark:text-white"
                    >
                      Your Email
                    </label>
                    <input
                      type="email"
                      name="email"
                      placeholder="Enter your Email"
                      className="w-full rounded-md border border-transparent py-3 px-6 text-base text-black dark:text-white placeholder-gray-500 shadow-one outline-none focus:border-blue-900 focus-visible:shadow-none dark:bg-[#242B51] dark:shadow-signUp"
                      value={email} onChange={(e) => {
                        setEmail(e.target.value);
                        setGenOTP("");
                        setInputOTP("");
                      }} required />
                  </div>
                  <div className="mb-8">
                    <label
                      htmlFor="password"
                      className="mb-3 block text-sm font-medium text-black dark:text-white"
                    >
                      {GenOTP != "" && "Enter New"} Password
                    </label>
                    <input
                      type={showPassword ? 'text' : 'password'}
                      name="password"
                      placeholder="Enter your Password"
                      className="w-full rounded-md border border-transparent py-3 px-6 text-base text-black dark:text-white placeholder-gray-500 shadow-one outline-none focus:border-blue-900 focus-visible:shadow-none dark:bg-[#242B51] dark:shadow-signUp"
                      value={password}
                      onChange={(e) => setPassword(e.target.value)} />
                  </div>
                  {/* ================= Show Pass Btn ================= */}
                  <div className="flex w-full justify-end items-end m-2">
                    <input type="checkbox"
                      id="showPassword"
                      checked={showPassword}
                      onChange={() => setShowPassword(prev => !prev)} className="w-4 h-4 text-gray-900 dark:text-gray-300 bg-gray-100 border-gray-300 rounded dark:bg-gray-700  cursor-pointer dark:border-gray-600" />
                    <label htmlFor="showPassword" className=" cursor-pointer ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Show Password</label>
                  </div>

                  {/* <div className="mb-8 flex flex-col justify-between sm:flex-row sm:items-center">
                    <div className="mb-4 sm:mb-0">
                      <label
                        htmlFor="checkboxLabel"
                        className="flex cursor-pointer select-none items-center text-sm font-medium text-gray-700"
                      >
                        <div className="relative">
                          <input
                            type="checkbox"
                            id="checkboxLabel"
                            className="sr-only"
                          />
                          <div className="box mr-4 flex h-5 w-5 items-center justify-center rounded border border-gray-700 border-opacity-20 dark:border-white dark:border-opacity-10">
                            <span className="opacity-0">
                              <svg
                                width="11"
                                height="8"
                                viewBox="0 0 11 8"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M10.0915 0.951972L10.0867 0.946075L10.0813 0.940568C9.90076 0.753564 9.61034 0.753146 9.42927 0.939309L4.16201 6.22962L1.58507 3.63469C1.40401 3.44841 1.11351 3.44879 0.932892 3.63584C0.755703 3.81933 0.755703 4.10875 0.932892 4.29224L0.932878 4.29225L0.934851 4.29424L3.58046 6.95832C3.73676 7.11955 3.94983 7.2 4.1473 7.2C4.36196 7.2 4.55963 7.11773 4.71406 6.9584L10.0468 1.60234C10.2436 1.4199 10.2421 1.1339 10.0915 0.951972ZM4.2327 6.30081L4.2317 6.2998C4.23206 6.30015 4.23237 6.30049 4.23269 6.30082L4.2327 6.30081Z"
                                  fill="#3056D3"
                                  stroke="#3056D3"
                                  strokeWidth="0.4"
                                />
                              </svg>
                            </span>
                          </div>
                        </div>
                        Keep me signed in
                      </label>
                    </div>
                    <div>
                      <a
                        href="#0"
                        className="text-sm font-medium text-blue-900 hover:underline"
                      >
                        Forgot Password?
                      </a>
                    </div>
                  </div> */}

                  {/* ================= Enter OTP ================= */}
                  {GenOTP != "" &&
                    <div className="mt-4 pl-1 flex flex-col">
                      <label className="mb-3 block text-sm font-medium text-black dark:text-white">Enter OTP :</label>
                      <input type="number" name="otp" className="w-full rounded-md border border-transparent py-3 px-6 text-base text-black dark:text-white placeholder-gray-500 shadow-one outline-none focus:border-blue-900 focus-visible:shadow-none dark:bg-[#242B51] dark:shadow-signUp" value={InputOTP} onChange={(e) => setInputOTP(e.target.value)}
                        required placeholder="Enter OTP" />
                    </div>
                  }

                  {/* ================= Reset Pass Btn ================= */}
                  {email && <>
                    {PassResetLoading ? <ColorRingLoader /> :
                      <button className="m-2 font-bold underline  hover:text-green-700 dark:text-purple-400 text-purple-900"
                        onClick={ResetPasswordHandel}>Reset Password</button>
                    }
                  </>}


                  {/* ================= Show Message ================= */}
                  <p className="my-2 text-red-800 dark:text-red-400 font-bold p-2">{ShowMessage}</p>

                  <div className="mb-6">

                    {/* ================= LogIn Btn ================= */}
                    {(email.trim() != "" && password.trim() != "") && <>
                      {LoaderVisi ? <ColorRingLoader /> :
                        <button className="flex w-full items-center justify-center rounded-md bg-blue-900 py-4 px-9 text-base font-medium text-white transition duration-300 ease-in-out hover:bg-opacity-80 hover:shadow-signUp" onClick={LogInHandel}>
                          Sign in
                        </button>
                      }
                    </>}


                  </div>
                </div>
                <p className="text-center text-base font-medium text-black dark:text-white">
                  Donâ€™t you have an account?
                  <Link href="/signup" className="text-blue-900 dark:text-blue-500 hover:underline">
                    Sign up
                  </Link>
                </p>
              </div>
            </div>
          </div>
        </div>
        <div className="absolute top-0 left-0 z-[-1]">
          <svg
            width="1440"
            height="969"
            viewBox="0 0 1440 969"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <mask
              id="mask0_95:1005"
              style={{ maskType: "alpha" }}
              maskUnits="userSpaceOnUse"
              x="0"
              y="0"
              width="1440"
              height="969"
            >
              <rect width="1440" height="969" fill="#090E34" />
            </mask>
            <g mask="url(#mask0_95:1005)">
              <path
                opacity="0.1"
                d="M1086.96 297.978L632.959 554.978L935.625 535.926L1086.96 297.978Z"
                fill="url(#paint0_linear_95:1005)"
              />
              <path
                opacity="0.1"
                d="M1324.5 755.5L1450 687V886.5L1324.5 967.5L-10 288L1324.5 755.5Z"
                fill="url(#paint1_linear_95:1005)"
              />
            </g>
            <defs>
              <linearGradient
                id="paint0_linear_95:1005"
                x1="1178.4"
                y1="151.853"
                x2="780.959"
                y2="453.581"
                gradientUnits="userSpaceOnUse"
              >
                <stop stopColor="#4A6CF7" />
                <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
              </linearGradient>
              <linearGradient
                id="paint1_linear_95:1005"
                x1="160.5"
                y1="220"
                x2="1099.45"
                y2="1192.04"
                gradientUnits="userSpaceOnUse"
              >
                <stop stopColor="#4A6CF7" />
                <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
              </linearGradient>
            </defs>
          </svg>
        </div>
      </section>
    }
  </>);
};

export default SigninPage;


---

File: page.js

"use client"
// =================================== Imports ===================================
import { useState, useEffect } from "react";
import Link from "next/link";
import { useAuth } from "../../../helper/Auth1";
import { useRouter } from "next/navigation";
import 'react-toastify/dist/ReactToastify.css';
import { SignUpFunction } from "../../../helper/Auth/signup";
import { ToastContainer, toast } from 'react-toastify';
import { OTPSendFunction } from "../../../helper/Mail/OTPSend";
import ColorRingLoader from "../../../components/Common/ColorRingLoader";
import { generateRandomNumber } from "../../../helper/Others/GenerateRandomNumber";
import { Get_Current_Time_String } from "../../../helper/Others/Get_Current_Time_String";
import { signInWithGoogleFunc } from "../../../helper/Auth/SignInWithGoogleFunc";
import UserProfileSkeleton from "../../../components/Skeleton/UserProfileSkeleton";


// ======================= Sign Up Page =======================*
const SignupPage = () => {

  const { LoggedInUserData, setLoggedInUserData } = useAuth();
  const router = useRouter();

  const [UserName, setUserName] = useState("");
  const [UserFullName, setUserFullName] = useState("");
  const [email, setEmail] = useState("");
  const [InputOTP, setInputOTP] = useState("");
  const [password, setPassword] = useState("");

  const [GenOTP, setGenOTP] = useState("");

  const [ShowMessage, setShowMessage] = useState('');
  const [LoaderVisi, setLoaderVisi] = useState(false);
  const [GAuthLoaderVisi, setGAuthLoaderVisi] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [OTPSendLoading, setOTPSendLoading] = useState(false);



  // ================= ReDirect =================
  useEffect(() => {
    if (LoggedInUserData) {
      router.push(`/user/${LoggedInUserData.userName}`);
      // router.push("/");
    }
  }, [LoggedInUserData])



  // ================= Sign Up Handel =================
  const SignUpHandel = async () => {
    if (UserFullName.trim() != "" && InputOTP != "" && GenOTP != "" && UserName.trim() != "" && email.trim() != "" && password.trim() != "") {
      if (InputOTP != "" && GenOTP != "" && InputOTP == GenOTP) {
        const time = Get_Current_Time_String();
        setLoaderVisi(true);
        try {
          const data = await SignUpFunction(UserName, UserFullName, email, password, time)
          setShowMessage(data.message);
          if (data.success) {
            toast.success(data.message);
            setLoggedInUserData(data.user);
            if (typeof window !== 'undefined') {
              localStorage.setItem('authToken', data.token);
            }
            router.push(`/user/${UserName}`);
            // router.push("/");
          }
          else {
            toast.error(data.message);
          }
        } catch (error) {
          console.error(error);
        }
        setLoaderVisi(false);
      }
      else {
        setShowMessage("Wrong OTP");
        toast.error("Wrong OTP");
      }
    }
    else {
      setShowMessage("Fill All the Fields");
      toast.error("Fill All the Fields");
    }
  }


  // ============================ Verify Email ============================
  const verifyemail = async () => {
    if (email.trim() != "") {
      setOTPSendLoading(true);
      try {
        const otp = generateRandomNumber(6);
        const data = await OTPSendFunction(otp, email);
        setGenOTP(otp);
        setShowMessage(data.message);
        toast.success(`${data.message} Check Mail`);
      } catch (error) {
        setShowMessage(error.message);
        toast.error(error.message);
      }
      setOTPSendLoading(false);
    }
  }



  // =============== Handel Google LogIn ===============
  const HandelGoogleLogIn = async () => {
    setGAuthLoaderVisi(true);
    try {
      const res = await signInWithGoogleFunc();
      if (res.success) {
        setLoggedInUserData(res.user);
        if (typeof window !== 'undefined') {
          localStorage.setItem('authToken', res.token);
        }
        router.push(`/user/${res.user.userName}`);
      }
    } catch (error) {
      setShowMessage(`${error.error.message}`);
      setGAuthLoaderVisi(false);
    }
  }



  return (<>
    <ToastContainer />
    {GAuthLoaderVisi ? <UserProfileSkeleton /> :

      <section className="relative z-10 overflow-hidden py-20">
        <div className="container">
          <div className="-mx-4 flex flex-wrap">
            <div className="w-full px-4">
              <div className="mx-auto max-w-[500px] rounded-md bg-gray-500 bg-opacity-20 py-10 px-6 dark:bg-gray-900 sm:p-[60px]">
                <h3 className="mb-3 text-center text-2xl font-bold text-black dark:text-white sm:text-3xl">
                  Create your account
                </h3>
                <p className="mb-11 text-center text-base font-medium text-black dark:text-white">
                  Itâ€™s totally free and super easy
                </p>
                {LoaderVisi ? <ColorRingLoader /> :
                  <button onClick={HandelGoogleLogIn} className="mb-6 flex w-full items-center justify-center rounded-md bg-white p-3 text-base font-medium text-black dark:text-white dark:bg-[#242B51] dark:shadow-signUp">
                    <span className="mr-3">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 20 20"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <g clipPath="url(#clip0_95:967)">
                          <path
                            d="M20.0001 10.2216C20.0122 9.53416 19.9397 8.84776 19.7844 8.17725H10.2042V11.8883H15.8277C15.7211 12.539 15.4814 13.1618 15.1229 13.7194C14.7644 14.2769 14.2946 14.7577 13.7416 15.1327L13.722 15.257L16.7512 17.5567L16.961 17.5772C18.8883 15.8328 19.9997 13.266 19.9997 10.2216"
                            fill="#4285F4"
                          />
                          <path
                            d="M10.2042 20.0001C12.9592 20.0001 15.2721 19.1111 16.9616 17.5778L13.7416 15.1332C12.88 15.7223 11.7235 16.1334 10.2042 16.1334C8.91385 16.126 7.65863 15.7206 6.61663 14.9747C5.57464 14.2287 4.79879 13.1802 4.39915 11.9778L4.27957 11.9878L1.12973 14.3766L1.08856 14.4888C1.93689 16.1457 3.23879 17.5387 4.84869 18.512C6.45859 19.4852 8.31301 20.0005 10.2046 20.0001"
                            fill="#34A853"
                          />
                          <path
                            d="M4.39911 11.9777C4.17592 11.3411 4.06075 10.673 4.05819 9.99996C4.0623 9.32799 4.17322 8.66075 4.38696 8.02225L4.38127 7.88968L1.19282 5.4624L1.08852 5.51101C0.372885 6.90343 0.00012207 8.4408 0.00012207 9.99987C0.00012207 11.5589 0.372885 13.0963 1.08852 14.4887L4.39911 11.9777Z"
                            fill="#FBBC05"
                          />
                          <path
                            d="M10.2042 3.86663C11.6663 3.84438 13.0804 4.37803 14.1498 5.35558L17.0296 2.59996C15.1826 0.901848 12.7366 -0.0298855 10.2042 -3.6784e-05C8.3126 -0.000477834 6.45819 0.514732 4.8483 1.48798C3.2384 2.46124 1.93649 3.85416 1.08813 5.51101L4.38775 8.02225C4.79132 6.82005 5.56974 5.77231 6.61327 5.02675C7.6568 4.28118 8.91279 3.87541 10.2042 3.86663Z"
                            fill="#EB4335"
                          />
                        </g>
                        <defs>
                          <clipPath id="clip0_95:967">
                            <rect width="20" height="20" fill="white" />
                          </clipPath>
                        </defs>
                      </svg>
                    </span>
                    Sign up with Google
                  </button>
                }
                <div className="mb-8 flex items-center justify-center">
                  <span className="hidden h-[1px] w-full max-w-[60px] bg-gray-700 sm:block"></span>
                  <p className="w-full px-5 text-center text-base font-medium text-black dark:text-white">
                    Or, register with your email
                  </p>
                  <span className="hidden h-[1px] w-full max-w-[60px] bg-gray-700 sm:block"></span>
                </div>
                <div>
                  <div className="mb-8">
                    <label
                      htmlFor="Username"
                      className="mb-3 block text-sm font-medium text-black dark:text-white"
                    >
                      {" "}
                      Username{" "}
                    </label>
                    <input
                      type="text"
                      name="Username"
                      placeholder="Enter your Username"
                      className="w-full rounded-md border border-transparent py-3 px-6 text-base text-black dark:text-white placeholder-gray-500 shadow-one outline-none focus:border-blue-900 focus-visible:shadow-none dark:bg-[#242B51] dark:shadow-signUp"
                      value={UserName} onChange={(e) => {
                        const inputUsername = e.target.value.toLowerCase().replace(/[^a-zA-Z0-9]/g, "");
                        setUserName(inputUsername);
                      }} required />
                  </div>
                  <div className="mb-8">
                    <label
                      htmlFor="name"
                      className="mb-3 block text-sm font-medium text-black dark:text-white"
                    >
                      {" "}
                      Full Name{" "}
                    </label>
                    <input
                      type="text"
                      name="name"
                      placeholder="Enter your full name"
                      className="w-full rounded-md border border-transparent py-3 px-6 text-base text-black dark:text-white placeholder-gray-500 shadow-one outline-none focus:border-blue-900 focus-visible:shadow-none dark:bg-[#242B51] dark:shadow-signUp"
                      value={UserFullName} onChange={(e) => setUserFullName(e.target.value)} required />
                  </div>
                  <div className="mb-8">
                    <label
                      htmlFor="email"
                      className="mb-3 block text-sm font-medium text-black dark:text-white"
                    >
                      {" "}
                      Work Email{" "}
                    </label>
                    <input
                      type="email"
                      name="email"
                      placeholder="Enter your Email"
                      className="w-full rounded-md border border-transparent py-3 px-6 text-base text-black dark:text-white placeholder-gray-500 shadow-one outline-none focus:border-blue-900 focus-visible:shadow-none dark:bg-[#242B51] dark:shadow-signUp"
                      value={email} readOnly={GenOTP != ""} onChange={(e) => {
                        setEmail(e.target.value);
                        setGenOTP("");
                        setInputOTP("");
                      }} required />
                  </div>
                  <div className="mb-8">
                    <label
                      htmlFor="password"
                      className="mb-3 block text-sm font-medium text-black dark:text-white"
                    >
                      {" "}
                      Your Password{" "}
                    </label>
                    <input
                      type={showPassword ? 'text' : 'password'}
                      name="password"
                      placeholder="Enter your Password"
                      className="w-full rounded-md border border-transparent py-3 px-6 text-base text-black dark:text-white placeholder-gray-500 shadow-one outline-none focus:border-blue-900 focus-visible:shadow-none dark:bg-[#242B51] dark:shadow-signUp"
                      value={password} onChange={(e) => setPassword(e.target.value)}
                      required />
                  </div>
                  {/* ================= Show Pass Btn ================= */}
                  <div className="flex w-full justify-end items-end m-2">
                    <input type="checkbox"
                      id="showPassword"
                      checked={showPassword}
                      onChange={() => setShowPassword(prev => !prev)} className="w-4 h-4 text-gray-900 dark:text-gray-300 bg-gray-100 border-gray-300 rounded dark:bg-gray-700  cursor-pointer dark:border-gray-600" />
                    <label htmlFor="showPassword" className=" cursor-pointer ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Show Password</label>
                  </div>

                  {/* <div className="mb-8 flex">
                    <label
                      htmlFor="checkboxLabel"
                      className="flex cursor-pointer select-none text-sm font-medium text-gray-700"
                    >
                      <div className="relative">
                        <input
                          type="checkbox"
                          id="checkboxLabel"
                          className="sr-only"
                        />
                        <div className="box mr-4 mt-1 flex h-5 w-5 items-center justify-center rounded border border-gray-700 border-opacity-20 dark:border-white dark:border-opacity-10">
                          <span className="opacity-0">
                            <svg
                              width="11"
                              height="8"
                              viewBox="0 0 11 8"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M10.0915 0.951972L10.0867 0.946075L10.0813 0.940568C9.90076 0.753564 9.61034 0.753146 9.42927 0.939309L4.16201 6.22962L1.58507 3.63469C1.40401 3.44841 1.11351 3.44879 0.932892 3.63584C0.755703 3.81933 0.755703 4.10875 0.932892 4.29224L0.932878 4.29225L0.934851 4.29424L3.58046 6.95832C3.73676 7.11955 3.94983 7.2 4.1473 7.2C4.36196 7.2 4.55963 7.11773 4.71406 6.9584L10.0468 1.60234C10.2436 1.4199 10.2421 1.1339 10.0915 0.951972ZM4.2327 6.30081L4.2317 6.2998C4.23206 6.30015 4.23237 6.30049 4.23269 6.30082L4.2327 6.30081Z"
                                fill="#3056D3"
                                stroke="#3056D3"
                                strokeWidth="0.4"
                              />
                            </svg>
                          </span>
                        </div>
                      </div>
                      <span>
                        By creating account means you agree to the
                        <a href="#0" className="text-blue-900 hover:underline">
                          {" "}
                          Terms and Conditions{" "}
                        </a>
                        , and our
                        <a href="#0" className="text-blue-900 hover:underline">
                          {" "}
                          Privacy Policy{" "}
                        </a>
                      </span>
                    </label>
                  </div> */}

                  {/* ================= Get OTP Btn ================= */}
                  {email.trim() != "" && <>
                    {OTPSendLoading ? <ColorRingLoader /> :
                      <button className="text-white w-full bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-full text-sm px-5 py-2.5 me-2 my-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700" onClick={verifyemail}>
                        Get OTP
                      </button>
                    }
                  </>}


                  {/* ================= Enter OTP ================= */}
                  <div className="mt-4 pl-1 flex flex-col">
                    <label className="mb-3 block text-sm font-medium text-black dark:text-white">Enter OTP</label>
                    <input type="number" name="otp" className="w-full rounded-md border border-transparent py-3 px-6 text-base text-black dark:text-white placeholder-gray-500 shadow-one outline-none focus:border-blue-900 focus-visible:shadow-none dark:bg-[#242B51] dark:shadow-signUp" value={InputOTP} onChange={(e) => setInputOTP(e.target.value)}
                      required placeholder="Enter OTP" />
                  </div>


                  {/* ================= Show Message ================= */}
                  <p className="my-2 text-red-800 dark:text-red-400 font-bold p-2">{ShowMessage}</p>


                  <div className="mb-6">
                    {(UserFullName.trim() != "" && InputOTP != "" && GenOTP != "" && UserName.trim() != "" && email.trim() != "" && password.trim() != "") && <>
                      {LoaderVisi ? <ColorRingLoader /> :
                        <button className="flex w-full items-center justify-center rounded-md bg-blue-900 py-4 px-9 text-base font-medium text-white transition duration-300 ease-in-out hover:bg-opacity-80 hover:shadow-signUp" onClick={SignUpHandel}>
                          Sign up
                        </button>
                      }
                    </>}

                  </div>
                </div>
                <p className="text-center text-base font-medium text-black dark:text-white">
                  Already using LastMinuteEngineering?
                  <Link href="/signin" className="text-blue-900 dark:text-blue-500 hover:underline">
                    Sign in
                  </Link>
                </p>
              </div>
            </div>
          </div>
        </div>
        <div className="absolute left-0 top-0 z-[-1]">
          <svg
            width="1440"
            height="969"
            viewBox="0 0 1440 969"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <mask
              id="mask0_95:1005"
              style={{ maskType: "alpha" }}
              maskUnits="userSpaceOnUse"
              x="0"
              y="0"
              width="1440"
              height="969"
            >
              <rect width="1440" height="969" fill="#090E34" />
            </mask>
            <g mask="url(#mask0_95:1005)">
              <path
                opacity="0.1"
                d="M1086.96 297.978L632.959 554.978L935.625 535.926L1086.96 297.978Z"
                fill="url(#paint0_linear_95:1005)"
              />
              <path
                opacity="0.1"
                d="M1324.5 755.5L1450 687V886.5L1324.5 967.5L-10 288L1324.5 755.5Z"
                fill="url(#paint1_linear_95:1005)"
              />
            </g>
            <defs>
              <linearGradient
                id="paint0_linear_95:1005"
                x1="1178.4"
                y1="151.853"
                x2="780.959"
                y2="453.581"
                gradientUnits="userSpaceOnUse"
              >
                <stop stopColor="#4A6CF7" />
                <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
              </linearGradient>
              <linearGradient
                id="paint1_linear_95:1005"
                x1="160.5"
                y1="220"
                x2="1099.45"
                y2="1192.04"
                gradientUnits="userSpaceOnUse"
              >
                <stop stopColor="#4A6CF7" />
                <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
              </linearGradient>
            </defs>
          </svg>
        </div>
      </section>

    }
  </>);
};

export default SignupPage;


---

File: layout.js

import { connectDb } from "../../../../helper/db";
import { User } from "../../../../models/user.models";

export async function generateMetadata({ params }) {
  const { username } = params;
  try {
    await connectDb();

    const user = await User.findOne({ userName: username }).select("-password");
    if (user) {
      const data = user;

      const UserPichttpsUrl = data.userPicUrl ?? '/user_default_pic.jpg';
      return {
        metadataBase: new URL(process.env.NEXT_PUBLIC_BASE_URL),
        title: `${data.displayName} | LastMinuteEngineering`,
        description: `@${data.userName}`,
        generator: 'Next.js',
        applicationName: 'LastMinuteEngineering',
        referrer: 'origin-when-cross-origin',
        keywords: ['engineering', 'soumojit', 'LastMinuteEngineering', 'shome', 'soumojitshome', 'Next.js', 'React'],

        authors: [{ name: 'Soumojit Shome' }, { name: 'Soumojit Shome', url: 'https://soumojitshome.vercel.app' }],
        creator: 'Soumojit Shome',
        publisher: 'Soumojit Shome',

        icons: {
          icon: UserPichttpsUrl,
          shortcut: UserPichttpsUrl,
          apple: UserPichttpsUrl,
          other: {
            rel: 'apple-touch-icon-precomposed',
            url: UserPichttpsUrl,
          },
        },

        openGraph: {
          title: `${data.displayName} | LastMinuteEngineering`,
          description: `@${data.userName}`,
          url: `${process.env.NEXT_PUBLIC_BASE_URL}/user/${username}`,
          siteName: 'LastMinuteEngineering',
          images: [
            {
              url: UserPichttpsUrl, // Must be an absolute URL
              width: 800,
              height: 600,
            },
            {
              url: UserPichttpsUrl, // Must be an absolute URL
              width: 1800,
              height: 1600,
              alt: 'LastMinuteEngineering',
            },
          ],
          locale: 'en_US',
          type: 'website',
        },
      }
    }
  } catch (error) {
    console.log("OG Error", error);
  }
}

const UserLayout = ({ children }) => {

  return (
    <div>
      {children}
    </div>

  )
}

export default UserLayout;


---

File: page.js

"use client"
// ==================== Imports ====================
import React, { useEffect, useState } from 'react'
import UserProfile from '../../../../components/userprofile/UserProfile';


export default function page({ params }) {
  const { username } = params;


  useEffect(() => {
    if (typeof window !== 'undefined') {
      window.scrollTo({
        top: 0,
        left: 0,
        behavior: 'smooth',
      });
    }
  }, [])

  
  return (<>
    <UserProfile UserName={username} />

  </>)
}




---

File: page.js

"use client"
import React from 'react';
import UsersSec from '../../../components/users/UsersSec';
// ==================== Imports ====================

/*============================================================
Description :
This is '/users' page. where all users are listed. 
============================================================*/


// ==================== Page ====================
export default function page() {


  return (
    <UsersSec />
  )
}

// ============================================================


---

File: page.jsx

'use client'

import { ChatbotUI } from '../../../../../components/studyjam/Chatbot'
import React from 'react'

function Chatbot() {
  return (
    <div className="flex flex-col h-[93vh]  backdrop-blur-lg">
      <div className="flex-grow overflow-hidden">
        <ChatbotUI />
      </div>
    </div>
  )
}

export default Chatbot

---

File: layout.jsx

import Background1 from "../../../../components/studyjam/Background";
import Dashsidebar from "../../../../components/studyjam/dashsidebar";

export default function DashboardLayout({ children }) {
  return (<><Background1 />
    <div className="flex h-screen">
      
      <Dashsidebar />
      <main className="flex-1 overflow-auto p-6">
        {children}
      </main>
    </div>
    </>
  );
}

---

File: page.jsx

import dynamic from 'next/dynamic'

const EditorComponent = dynamic(() => import('../../../../../components/studyjam/EditorComponent'), { ssr: false })

export default function EditorPage() {
  return (
    <div className="container mx-auto p-4">
     
      <EditorComponent />
    </div>
  )
}

---

File: page.jsx

'use client'

import StudentDashboard from '../../../../components/studyjam/Dashboard'
import { useInput } from '../../../../helper/Others/InputContext'
import { useEffect, useState } from 'react'

export default function Dashboard() {
  const { inputValue } = useInput()
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return <h1>loading.....</h1> // or a loading indicator
  }

  return (
    <div>
    <StudentDashboard />
    </div>
  )
}

---

File: page.jsx


import QuestionAnswerPage from '../../../../../components/studyjam/Question'
import React from 'react'

function question() {
  return (
    <div >
      <QuestionAnswerPage />


    </div>
  )
}

export default question

---

File: page.jsx

import YouTubePage from '../../../../../components/studyjam/Youtube'
import React from 'react'

function youtube() {
  return (
    <div><YouTubePage /></div>
  )
}

export default youtube

---

File: page.jsx

'use client'

import { useRouter } from 'next/navigation'
import Header from "../../../components/Header"
import PlaceholdersAndVanishInput from "../../../components/ui/placeholders-and-vanish-input.jsx"
import { useInput } from '../../../helper/Others/InputContext'

export default function PlaceholdersAndVanishInputDemo() {
  const { inputValue, setInputValue } = useInput()
  const router = useRouter()
  const placeholders = [
    "What is Gravitation?",
    "Linear Sorting?",
    "Weathers of India?",
    "How to Learn Next.js",
    "How to make a time machine?",
  ]

  const handleChange = (e) => {
    setInputValue(e.target.value)
    console.log(e.target.value)
  }

  const onSubmit = (e) => {
    e.preventDefault()
    console.log("submitted")
    router.push('/study/dashboard/notes')
  }

  return (
    <>
      <Header />
      <div className="h-[40rem] flex flex-col justify-center items-center px-4">
        <h2 className="mb-10 sm:mb-20 text-xl text-center sm:text-5xl dark:text-white text-black">
          Ask Anything! Learn Anything!
        </h2>
        <PlaceholdersAndVanishInput
          placeholders={placeholders}
          value={inputValue}
          onChange={handleChange}
          onSubmit={onSubmit}
        />
      </div>
    </>
  )
}

---

File: action.js

'use server';

import { GoogleGenerativeAI } from '@google/generative-ai';
import { EditorDataSchema } from '../lib/schema';
import { v4 as uuidv4 } from 'uuid';

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);

export async function generateContent(topic) {
  const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash-latest' });

  const prompt = `
  As a professional search expert, your task is to generate comprehensive, well-structured, and engaging content on the topic "${topic}". Your response should strictly follow the given JSON format for Editor.js blocks while providing detailed, informative content in a clear, concise, and organized manner. Follow these guidelines to construct your response within the JSON structure:
  
  1. Begin with a brief introduction to the topic.
  2. Provide detailed explanations of key concepts, using clear and concise language.
  3. Use headers and subheaders to organize information logically.
  4. Incorporate relevant examples, roadmaps, or code snippets where applicable.
  5. Use ordered lists and checklists for easy readability when outlining steps or tasks.
  6. Include motivational or insightful quotes relevant to the topic.
  7. Add tables for comparisons, overviews, or summarizing information.
  8. If relevant, embed code examples using the "code" block.
  9. Include links to valuable resources in the "linkTool" block for further exploration.
  10. Ensure the response strictly adheres to the provided JSON structure, with accurate, high-quality information.
  
  Use this format to construct the JSON object:
  
  {
    "time": [current timestamp in milliseconds],
    "blocks": [
      {
        "id": "9V7e_m3ao4",
        "type": "title",
        "data": {
          "text": "[Insert section heading, e.g., 'Introduction to ${topic}']",
          "color": "[any color from this array: ['Red', 'Blue', 'Pink','Orange','Yellow','Purple','Green']]",
          "alignText": "Text-Align-Center",
          "titleType": "H2"
        }
      },
      {
        "id": "unique-id-1",
        "type": "header",
        "data": {
          "text": "[Insert section subheading]",
          "level": 2
        }
      },
      {
        "id": "unique-id-2",
        "type": "paragraph",
        "data": {
          "text": "[Insert an introduction explaining the topic, providing context, key concepts, and an overview]"
        }
      },
      {
        "id": "unique-id-3",
        "type": "list",
        "data": {
          "style": "ordered",
          "items": [
            "[Insert detailed steps or a roadmap for mastering the topic, broken down into actionable items, e.g., 'Step 1: Read the basics of...', 'Step 2: Watch tutorials on...']"
          ]
        }
      },
      {
        "id": "unique-id-4",
        "type": "checklist",
        "data": {
          "items": [
            {
              "text": "[Insert a key task related to the topic that the user should complete]",
              "checked": false
            },
            {
              "text": "[Another task for the user]",
              "checked": false
            }
          ]
        }
      },
      {
        "id": "unique-id-5",
        "type": "quote",
        "data": {
          "text": "[Include an insightful or motivational quote relevant to the topic]",
          "caption": "[Source or author of the quote]",
          "alignment": "left"
        }
      },
      {
        "id": "unique-id-6",
        "type": "table",
        "data": {
          "withHeadings": true,
          "content": [
            ["Heading 1", "Heading 2"],
            ["[Insert row data for an overview or comparison related to the topic]", "[Further row details]"],
            ["[Additional row]", "[More data]"]
          ]
        }
      },
      {
        "id": "unique-id-7",
        "type": "code",
        "data": {
          "code": "[Insert code examples related to the topic if applicable]",
          "language": "javascript"
        }
      },
      {
        "id": "unique-id-8",
        "type": "linkTool",
        "data": {
          "link": "[Insert a URL to a highly relevant resource for further reading or exploration]",
          "meta": {
            "title": "[Resource title]",
            "description": "[A brief description of the resource]",
            "image": "[URL of the preview image, if available]"
          }
        }
      }
    ],
    "version": "2.22.2"
  }
  
  IMPORTANT: The response should ONLY return the JSON object in the exact format outlined above. Do not add any extra text, commentary, or preambles.`;
  

  try {
    const result = await model.generateContent(prompt);
    const text = result.response.text();
    
    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('No valid JSON found in the response');
    }
    
    const jsonContent = jsonMatch[0];
    const rawData = JSON.parse(jsonContent);

    // Add unique IDs to the blocks
    rawData.blocks = rawData.blocks.map(block => ({
      ...block,
      id: uuidv4()
    }));

    // Validate the data against our schema
    const validationResult = EditorDataSchema.safeParse(rawData);

    if (validationResult.success) {
      return validationResult.data;
    } else {
      console.error('Validation error:', validationResult.error);
      throw new Error('Generated content did not match expected schema');
    }
  } catch (error) {
    console.error('Error generating or validating content:', error);
    throw new Error('Failed to process the generated content');
  }
}

---

File: route.js

import { CoreMessage, streamText } from 'ai';
import { createOpenAI } from '@ai-sdk/openai';

const groq = createOpenAI({
  baseURL: 'https://api.groq.com/openai/v1',
  apiKey: process.env.GROQ_API_KEY,
});

export const runtime = 'edge';

export async function POST(req) {
  try {
    const { messages } = await req.json();

    const result = await streamText({
      model: groq('llama-3.1-8b-instant'),
      system: `You are an AI Tutor, a helpful mentor dedicated to guiding students. Your role is to:

1. Always use concise and simple language. Keep answers brief and to the point.

2. Ask short, direct questions to identify what the student needs. For example: "What part do you need help with?" or "Is there a specific step you're stuck on?"

3. Provide guidance in clear, short steps. Avoid lengthy explanationsâ€”focus on the essentials.

4. Adapt based on student responses. Offer more details only if requested.

5. When both a question and answer are given, first ask: "Do you want help understanding the question or the answer?" Proceed based on the student's preference.

6. Stay supportive and encourage learning in a concise manner.

Your goal is to provide quick and effective help, making sure the student understands with minimal confusion.`,
      messages,
    });

    return result.toDataStreamResponse();
  } catch (error) {
    console.error('Error in chat API:', error);
    return new Response('Internal Server Error', { status: 500 });
  }
}


---

File: route.js

import { NextResponse } from "next/server";


// ==================== Mail Sent API ====================*
export async function POST(request) {
    const body = await request.json();
    if (process.env.FETCHAPIPASSCODE == body.PassCode) {
        try {

            // =======================================
            // const PassCode = body.PassCode;
            // console.log(body);
            // console.log(request.method);
            // console.log(request.headers);
            // console.log(request.nextUrl.pathname);
            // console.log(request.nextUrl);
            // console.log(request.nextUrl.href);
            // console.log(request.nextUrl.origin);
            // =======================================


            const nodemailer = require("nodemailer");
            let testAccount = await nodemailer.createTestAccount();

            const transporter = nodemailer.createTransport({
                service: 'gmail',

                auth: {
                    user: process.env.APIEMAILADDRESS,
                    pass: process.env.APIEMAILPASS
                }
            });

            let info = await transporter.sendMail({
                from: `LastMinuteEngineering <${process.env.APIEMAILADDRESS}>`, // sender address
                to: body.email, // list of receivers
                subject: body.subject, // Subject line
                // text: "Hello Raj", // plain text body
                html: body.html, // html body
                bcc: body.BccArr
            });

            // console.log("Message sent: %s", info.messageId);

            // =======================================

            return NextResponse.json({
                body: info,
                message: "Mail Send Successfully",
                success: true
            });

        } catch (error) {
            return NextResponse.json({
                message: `${error}`,
                success: false,
            });
        }
    }
    else {
        return NextResponse.json({
            message: "XOX :) Data Nahi ayega | Dev Soumojit Shome",
            success: false,
        });
    }
}

// ============================================================

---

File: route.js

import { NextResponse } from 'next/server';
import { GoogleGenerativeAI } from "@google/generative-ai";

const apiKey = process.env.GEMINI_API_KEY_q;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash-002",
});

const systemInstruction = `You are an expert in generating high-quality, relevant, and important science and educational questions. Your task is to generate 5 questions based on a topic and question type provided by the user. Follow these rules strictly:

Accept only relevant educational topics related to science, technology, engineering, mathematics, and other academic subjects. Do not generate any questions if the user provides a random or unrelated topic (such as jokes, adult content, or non-academic material). Politely respond with: "make only one question as the given structure with two option, are you mad. yes and no"

Question Types:

MCQ (Multiple Choice Questions): Provide 4 distinct options with one correct answer.
SAQ (Short Answer Questions): Questions should have concise, factual answers.
Numerical: Focus on questions that require calculations or numerical problem-solving.
Long: Questions that require detailed explanations, critical thinking, or exploration of concepts.
For MCQ questions:

Provide 4 plausible options.
Include the correct answer from the options.
For Numerical questions:

Ensure the calculations are directly related to the topic.
Provide a correct numerical answer with units, where applicable.
Ensure the questions are relevant, important, and aligned with the academic learning objectives for the provided topic.

Return the questions in this structured format:

{
  "questions": [
    {
      "id": 1,
      "type": "mcq/saq/numerical/long",
      "question": "Your question text here",
      "options": ["Option 1", "Option 2", "Option 3", "Option 4"],
      "answer": "Correct answer (for MCQs), and answer for other type of question"
    }
  ]
}
Generate exactly 5 questions based on the user-provided topic and type.

Ensure the questions are clear, accurate, and suitable for learning purposes.`;

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
};

export async function POST(req) {
  try {
    const { topic, type = 'mcq' } = await req.json();

    if (!topic) {
      return NextResponse.json({ error: 'Missing required parameter: topic' }, { status: 400 });
    }

    const chatSession = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [{ text: systemInstruction }],
        },
        {
          role: "model",
          parts: [{ text: "Understood. I will generate questions based on the provided instructions." }],
        },
      ],
    });

    const result = await chatSession.sendMessage(`Generate 5 ${type} questions on ${topic}`);
    const responseText = result.response.text();
    
    // Extract JSON from the response
    const jsonMatch = responseText.match(/```json\n([\s\S]*?)\n```/);
    if (!jsonMatch) {
      throw new Error('Failed to extract JSON from the response');
    }
    
    const generatedQuestions = JSON.parse(jsonMatch[1]);

    return NextResponse.json(generatedQuestions);
  } catch (error) {
    console.error('Error generating questions:', error);
    return NextResponse.json({ error: 'Failed to generate questions' }, { status: 500 });
  }
}

---

File: route.js

import { NextResponse } from "next/server";
import { connectDb } from "../../../helper/db";
import jwt from "jsonwebtoken";
import { Subscription } from "../../../models/subscription.models";

connectDb();

// ====================== Subscription ======================*
export async function POST(request) {

    // Get Request Body
    const { email, time, PassCode } = await request.json();

    if (process.env.FETCHAPIPASSCODE == PassCode) {
        try {
            const FinduserByEmail = await Subscription.findOne({ email: email })
            if (FinduserByEmail) {
                // throw new Error("Already Subscribed");
                return NextResponse.json({
                    message: "Already Subscribed",
                    success: true,
                });
            }

            const newSubscription = new Subscription({
                email: email,
                time: time
            });


            const createdSubscription = await newSubscription.save();
            const subscriptionId = createdSubscription._id;

            // Create Web Token
            const token = jwt.sign(
                {
                    subscriptionId: subscriptionId,
                },
                process.env.JWT_KEY
            );


            // Response
            const response = NextResponse.json({
                subscriptionId: subscriptionId,
                message: "Subscription Created Successfully",
                token: token,
                success: true
            })

            // Set Token on Cookie
            response.cookies.set("subscriptionToken", token, {
                expiresIn: 100 * 365 * 24 * 60 * 60 * 1000, // 100 years in milliseconds
                httpOnly: true,
                secure: true,
                path: '/',
            });

            return response;

        } catch (error) {
            return NextResponse.json({
                message: `${error}`,
                success: false,
            });
        }
    }
    else {
        return NextResponse.json({
            message: "XOX :) Data Nahi ayega | Dev Soumojit Shome",
            success: false,
        });
    }
}

// ========================================================================

---

File: route.js

import { streamText } from 'ai';
import { google } from "@ai-sdk/google";

async function summarizeYouTubeVideo() {
  try {
    const result = await streamText({
      model: google("gemini-1.5-pro-latest"),
      prompt: `Summarize the following YouTube video:

YouTube video link: "https://www.youtube.com/watch?v=kNkcFDs0frQ"

Please provide a concise summary including:
1. The main points discussed in the video.
2. Key takeaways or insights.
3. Any notable details or highlights.

Your summary should be clear and focused, providing an overview of the videoâ€™s content in a structured format.`
    });

    // Use textStream as an async iterable
    for await (const textPart of result.textStream) {
      console.log(textPart);
    }
  } catch (error) {
    console.error('Error summarizing video:', error);
  }
}

summarizeYouTubeVideo();


---

File: route.js

import { NextResponse } from "next/server";
import { connectDb } from "../../../../helper/db";
import { User } from "../../../../models/user.models";
import jwt from "jsonwebtoken";

connectDb();

// ================= Current User Route Get Data =================*
export async function POST(request) {
    const { lastOnlineTime, PassCode, token } = await request.json();

    if (process.env.FETCHAPIPASSCODE == PassCode) {
        try {
            let authToken = request.cookies.get("authToken")?.value;
            
            if (!authToken && !token) {
                throw new Error("Invalid Token !!");
            }
            if (!authToken) {
                authToken = token;
            }

            const data = jwt.verify(authToken, process.env.JWT_KEY);
            const user = await User.findById(data._id).select("-password");

            if (user == null) {
                throw new Error("user not found !!");
            }

            user.lastOnlineTime = lastOnlineTime;
            const UpdateUser = await user.save();

            const response = NextResponse.json({
                user: UpdateUser,
                message: "Current User Fetch Successfully",
                success: true
            });

            response.cookies.set("authToken", authToken, {
                expiresIn: "7d",
                httpOnly: true,
                secure: true,
                path: '/',
            });

            return response;

        } catch (error) {
            return NextResponse.json({
                message: `${error.message}`,
                success: false
            });
        }
    }
    else {
        return NextResponse.json({
            message: "XOX :) Data Nahi ayega | Dev Soumojit Shome",
            success: false,
        });
    }
}

// =======================================================================

---

File: route.js

import { NextResponse } from "next/server";
import { connectDb } from "../../../../helper/db";
import { User } from "../../../../models/user.models";
import jwt from "jsonwebtoken";

connectDb();

// ===================== Update User =====================*
export async function PUT(request) {
    const { UserUpdateDataObj, PassCode } = await request.json();

    if (process.env.FETCHAPIPASSCODE == PassCode) {

        try {
            const authToken = request.cookies.get("authToken")?.value;
            const data = jwt.verify(authToken, process.env.JWT_KEY);
            const user = await User.findById(data._id).select("-password");

            if (user == null) {
                throw new Error("user not found !!");
            }

            const FinduserByUserName = await User.findOne({ userName: UserUpdateDataObj.username }).select("-password");
            if (FinduserByUserName && data._id != FinduserByUserName._id) {
                throw new Error("Username Already Exist");
            }

            // Iterate over keys in UserUpdateDataObj and update user object
            Object.keys(UserUpdateDataObj).forEach(key => {
                user[key] = UserUpdateDataObj[key];
            });


            const UpdateUser = await user.save();

            return NextResponse.json({
                user: UpdateUser,
                message: "User Edit Successfully",
                ReqObj: UserUpdateDataObj,
                success: true
            })


        } catch (error) {
            return NextResponse.json({
                message: `${error}`,
                success: false,
            });
        }
    }
    else {
        return NextResponse.json({
            message: "XOX :) Data Nahi ayega | Dev Soumojit Shome",
            success: false,
        });
    }
}

// ====================================================================

---

File: route.js

import { NextResponse } from "next/server";
import { connectDb } from "../../../../helper/db";
import { User } from "../../../../models/user.models";

connectDb();

// ======================= Get Random Users Id =======================*
export async function POST(request) {
    const { skipCount, count, PassCode } = await request.json();

    if (process.env.FETCHAPIPASSCODE == PassCode) {
        try {
            // Count the total number of users
            const NetuserCount = await User.countDocuments({});

            // Find the first 4 blog documents and project only the _id field
            const users = await User.find({})
                .skip(skipCount) // Skip the first 'skipCount' documents
                .limit(count) // Limit to the next 4 documents
                .select('_id'); // Select only the _id field

            // Extract blog IDs from the fetched documents
            const selectedUserIds = users.map(user => user._id);

            const newskipCount = skipCount + selectedUserIds.length;

            return NextResponse.json({
                selectedUserIds: selectedUserIds,
                newskipCount: newskipCount,
                totalUserNo: NetuserCount,
                message: "Random Users fetched successfully",
                success: true
            });

        } catch (error) {
            return NextResponse.json({
                message: `${error}`,
                success: false,
            });
        }
    }
    else {
        return NextResponse.json({
            message: "XOX :) Data Nahi ayega | Dev Soumojit Shome",
            success: false,
        });
    }
}


---

File: route.js

import { NextResponse } from "next/server";
import { connectDb } from "../../../../helper/db";
import { User } from "../../../../models/user.models";

connectDb();


// ====================== Get User By Id ======================*
export async function POST(request) {
    const { UserId, PassCode } = await request.json();

    if (process.env.FETCHAPIPASSCODE == PassCode) {
        try {

            const user = await User.findById(UserId);

            if (user == null) {
                throw new Error("user not found !!");
            }


            // =============== Response ===============
            return NextResponse.json({
                user: user,
                message: "Get User By Id Successfully",
                success: true
            });

        } catch (error) {
            return NextResponse.json({
                message: `${error}`,
                success: false,
            });

        }
    }
    else {
        return NextResponse.json({
            message: "XOX :) Data Nahi ayega | Dev Soumojit Shome",
            success: false,
        });
    }
}

// =======================================================================

---

File: route.js

import { NextResponse } from "next/server";
import { connectDb } from "../../../../helper/db";
import { User } from "../../../../models/user.models";

connectDb();

// ====================== Get By UserName ======================*
export async function POST(request) {

    const { userName, PassCode } = await request.json();

    if (process.env.FETCHAPIPASSCODE == PassCode) {
        try {
            const user = await User.findOne({ userName: userName }).select("-password");

            if (user == null || !user.isActive) {
                throw new Error("user not found !!");
            }

            return NextResponse.json({
                user: user,
                message: "Get By UserName Successfully",
                success: true
            });

        } catch (error) {
            return NextResponse.json({
                message: `${error}`,
                success: false,
            });
        }
    }
    else {
        return NextResponse.json({
            message: "XOX :) Data Nahi ayega | Dev Soumojit Shome",
            success: false,
        });
    }
}

// ===================================================================================

---

File: route.js

import { NextResponse } from "next/server";
import { connectDb } from "../../../../helper/db";
import { User } from "../../../../models/user.models";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

connectDb();

// ======================= LogIn Route Post Data =======================*
export async function POST(request) {
    const { email, password, lastLoginTime, lastOnlineTime, PassCode } = await request.json();

    if (process.env.FETCHAPIPASSCODE == PassCode) {
        try {

            // 1.get user
            const user = await User.findOne({
                email: email,
            });

            if (user == null) {
                throw new Error("user not found !!");
            }

            if (!user.password) {
                throw new Error("Please reset password!!");
            }
            // 2.password check
            const matched = bcrypt.compareSync(password, user.password);
            if (!matched) {
                throw new Error("Password not matched !!");
            }


            // 3. generate token
            const token = jwt.sign(
                {
                    _id: user._id,
                },
                process.env.JWT_KEY
            );

            user.lastLoginTime = lastLoginTime;
            user.lastOnlineTime = lastOnlineTime;
            const UpdateUser = await user.save();


            // 4.create nextresponse-- cookie
            const response = NextResponse.json({
                user: UpdateUser,
                message: "Login success !!",
                success: true,
                token: token
            });

            response.cookies.set("authToken", token, {
                expiresIn: "7d",
                httpOnly: true,
                secure: true,
                path: '/',
            });


            return response;
        } catch (error) {
            return NextResponse.json({
                message: `${error}`,
                success: false,
            });
        }
    }
    else {
        return NextResponse.json({
            message: "XOX :) Data Nahi ayega | Dev Soumojit Shome",
            success: false,
        });
    }
}

// ========================================================

---

File: route.js

import { connectDb } from "../../../../helper/db";
import { NextResponse } from "next/server";

connectDb();

// ================== Log Out Route Post Data ==================*
export async function POST(request) {
    const response = NextResponse.json({
        message: "Logged out !!",
        success: true,
    });

    response.cookies.set("authToken", "", {
        expires: new Date(0),
    });

    return response;
}

// ===========================================================

---

File: route.js

import { NextResponse } from "next/server";
import { connectDb } from "../../../../helper/db";
import { User } from "../../../../models/user.models";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

connectDb();

// ===================== Reset Password =====================*
export async function POST(request) {
    const { email, password, lastLoginTime, lastOnlineTime, PassCode } = await request.json();

    if (process.env.FETCHAPIPASSCODE == PassCode) {
        try {
            // 1.get user
            const user = await User.findOne({
                email: email,
            });

            if (user == null) {
                throw new Error("user not found !!");
            }

            user.password = bcrypt.hashSync(
                password,
                parseInt(process.env.BCRYPT_SALT)
            );

            // 2. generate token
            const token = jwt.sign(
                {
                    _id: user._id,
                },
                process.env.JWT_KEY,
                // { expiresIn: "7d" } // It's a good practice to set an expiration time
            );


            user.lastLoginTime = lastLoginTime;
            user.lastOnlineTime = lastOnlineTime;
            const UpdateUser = await user.save();


            // 3.create nextresponse-- cookie
            const response = NextResponse.json({
                user: UpdateUser,
                message: "Reset Password Successfully !!",
                success: true,
                token: token
            });

            response.cookies.set("authToken", token, {
                // maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days in milliseconds
                expiresIn: "7d",
                httpOnly: true,
                secure: true,
                path: '/',
            });

            return response;

        } catch (error) {
            // console.log("error");
            return NextResponse.json({
                message: `${error}`,
                success: false,
            });
        }
    }
    else {
        return NextResponse.json({
            message: "XOX :) Data Nahi ayega | Dev Soumojit Shome",
            success: false,
        });
    }
}

// ==============================================================================

---

File: route.js

import { NextResponse } from "next/server";
import { connectDb } from "../../../../helper/db";
import { User } from "../../../../models/user.models";
import jwt from "jsonwebtoken";


connectDb();


async function generateUniqueUsername(username) {
    let uniqueUsername = username;
    let count = 1;

    // Check if the username already exists
    while (await User.exists({ userName: uniqueUsername })) {
        // Append count to the username and increment the count
        uniqueUsername = `${username}${count}`;
        count++;
    }

    return uniqueUsername;
}


// ===================== signIn With Google =====================*
export async function POST(request) {

    // Get Request Body
    const { UserDataObj, PassCode } = await request.json();

    if (process.env.FETCHAPIPASSCODE == PassCode) {
        try {

            // Check Email Exist or not  
            // Login
            const FinduserByEmail = await User.findOne({ email: UserDataObj.email }).select("-password");
            if (FinduserByEmail) {
                // User Email Already Exist;
                FinduserByEmail.lastLoginTime = UserDataObj.lastLoginTime;
                FinduserByEmail.lastOnlineTime = UserDataObj.lastOnlineTime;
                const UpdateUser = await FinduserByEmail.save();
                const token = jwt.sign(
                    {
                        _id: FinduserByEmail._id,
                    },
                    process.env.JWT_KEY
                );
                const response = NextResponse.json({
                    user: UpdateUser,
                    message: "Login success !!",
                    success: true,
                    token: token
                });
                response.cookies.set("authToken", token, {
                    expiresIn: "7d",
                    httpOnly: true,
                    secure: true,
                    path: '/',
                });
                return response;
            }


            const uniqueUsername = await generateUniqueUsername(UserDataObj.userName);
            // Create a new user with the unique username
            const newUser = new User({
                ...UserDataObj,
                userName: uniqueUsername
            });

            // Save User
            const createdUser = await newUser.save();

            // Create Web Token
            const token = jwt.sign(
                {
                    _id: createdUser._id,
                },
                process.env.JWT_KEY
            );


            // Response
            const response = NextResponse.json({
                user: createdUser,
                message: "User Created Successfully",
                ReqObj: UserDataObj,
                token: token,
                success: true
            })

            // Set Token on Cookie
            response.cookies.set("authToken", token, {
                expiresIn: "7d",
                httpOnly: true,
                secure: true,
                path: '/',
            });

            return response;

        } catch (error) {
            return NextResponse.json({
                message: `${error}`,
                success: false,
            });
        }
    }
    else {
        return NextResponse.json({
            message: "XOX :) Data Nahi ayega | Dev Soumojit Shome",
            success: false,
        });
    }
}

// ========================================================================

---

File: route.js

import { NextResponse } from "next/server";
import { connectDb } from "../../../../helper/db";
import { User } from "../../../../models/user.models";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";


connectDb();


// =================== Sign Up Route Post Data ====================*
export async function POST(request) {

    // Get Request Body
    const { UserDataObj, PassCode } = await request.json();

    if (process.env.FETCHAPIPASSCODE == PassCode) {
        try {

            // Check UserName Exist or not
            const FinduserByUserName = await User.findOne({ userName: UserDataObj.userName }).select("-password");
            if (FinduserByUserName) {
                throw new Error("Username Already Exist");
            }

            // Check Email Exist or not
            const FinduserByEmail = await User.findOne({ email: UserDataObj.email }).select("-password");
            if (FinduserByEmail) {
                throw new Error("User Email Already Exist");
            }

            // Create User
            const user = new User(UserDataObj);
            // Encode Password
            user.password = bcrypt.hashSync(
                user.password,
                parseInt(process.env.BCRYPT_SALT)
            );

            // Save User
            const createdUser = await user.save();
            const createdUserId = createdUser._id;

            // Create Web Token
            const token = jwt.sign(
                {
                    _id: createdUserId,
                },
                process.env.JWT_KEY
            );


            // Response
            const response = NextResponse.json({
                user: createdUser,
                userId: createdUserId,
                message: "User Created Successfully",
                ReqObj: UserDataObj,
                token: token,
                success: true
            })

            // Set Token on Cookie
            response.cookies.set("authToken", token, {
                expiresIn: "7d",
                httpOnly: true,
                secure: true,
                path: '/',
            });

            return response;

        } catch (error) {
            return NextResponse.json({
                message: `${error}`,
                success: false,
            });
        }
    }
    else {
        return NextResponse.json({
            message: "XOX :) Data Nahi ayega | Dev Soumojit Shome",
            success: false,
        });
    }
}

// ========================================================================

---

File: route.js

// api/video/route.js
import { NextResponse } from 'next/server';

const API_KEY= '9fc07fb5bfa38e4ec9c2013f4102b097';
const BASE_URL = 'http://api.serpstack.com/search';

export async function GET(request) {
  const { searchParams } = new URL(request.url);
  const query = searchParams.get('query');

  if (!query) {
    return NextResponse.json({ error: 'Query parameter is required' }, { status: 400 });
  }

  const url = `${BASE_URL}?access_key=${API_KEY}&query=${encodeURIComponent(query)}&type=videos`;

  try {
    const response = await fetch(url);
    const data = await response.json();
    console.log(data)
    if (data.error) {
      throw new Error(data.error.info);
    }

    return NextResponse.json(data);
  } catch (error) {
    console.error('Error fetching video data:', error);
    return NextResponse.json({ error: 'Failed to fetch video data' }, { status: 500 });
  }
}


---

File: route.js

import { NextResponse } from "next/server";
import { connectDb } from "../../../helper/db";
import { VisitorStats } from "../../../models/visitorstats.models";


connectDb();


// ======================= VisitorCount =======================*
export async function POST(request) {

    // Get Request Body
    const { PassCode, isUniqueVisitorsIncrease, isTotalVisitorsIncrease } = await request.json();

    if (process.env.FETCHAPIPASSCODE == PassCode) {
        try {

            let query = { timeFrame: "lifetime" };
            let update = {};

            if (isUniqueVisitorsIncrease || isTotalVisitorsIncrease) {
                update.$inc = {};
                if (isUniqueVisitorsIncrease) {
                    update.$inc.uniqueVisitors = 1;
                }
                update.$inc.totalVisitors = 1;
                update.$inc.pageViews = 1; // Increment page views when total visitors increase
            }

            // Perform atomic update using findOneAndUpdate
            let updatedStats = await VisitorStats.findOneAndUpdate(query, update, {
                new: true, // Return updated document
                upsert: true, // If document does not exist, create it
                setDefaultsOnInsert: true // Ensure defaults are applied when upserting
            });

            // Response
            return NextResponse.json({
                uniqueVisitors: updatedStats.uniqueVisitors,
                totalVisitors: updatedStats.totalVisitors,
                pageViews: updatedStats.pageViews,
                success: true
            })


        } catch (error) {
            return NextResponse.json({
                message: `${error}`,
                success: false,
            });
        }
    }
    else {
        return NextResponse.json({
            message: "XOX :) Data Nahi ayega | Dev Soumojit Shome",
            success: false,
        });
    }
}

// ========================================================================

---

File: error.js

"use client"
import React from 'react'
import ErrorPage from './(Material)/error/page'

export default function notfound() {
  return (
    <ErrorPage />
  )
}


---

File: globals.css

@tailwind base;
@tailwind components;
@tailwind utilities;


/* globals.css */
@keyframes spin-slow {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.animate-spin-slow {
  animation: spin-slow 5s linear infinite;
}



@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    font-family: "Inter", sans-serif;

  }
}


@layer components {
  input[type="checkbox"]:checked~label span svg {
    @apply inline-flex;
  }

  .sticky .header-logo {
    @apply py-5 lg:py-2;
  }

  .sticky .menu-scroll.active {
    @apply opacity-70;
  }

  input#togglePlan:checked~.dot {
    @apply translate-x-full;
  }

  input#checkboxLabel:checked~.box span {
    @apply opacity-100;
  }
}



::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}

/* Track */
::-webkit-scrollbar-track {
  background: #f1f1f1;
}

/* Handle */
::-webkit-scrollbar-thumb {
  background: #888;
}

/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
  background: #555;
}


/* @tailwind base;
@tailwind components;
@tailwind utilities;
:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}
@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}
body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}
@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
} */

---

File: layout.js

import { Inter } from "next/font/google";
import "./globals.css";
import { Analytics } from "@vercel/analytics/react"
import { Providers } from "./providers";
import NextTopLoader from 'nextjs-toploader';
import ScrollToTop from "../components/ScrollToTop";
import { AuthUserProvider } from "../helper/Auth1";
import Background from "../components/Common/Background";
import  {InputProvider}  from "../helper/Others/InputContext";
// import { BackgroundBeamsDemo } from "@/components/Common/BackgroundBeamsDemo";

const inter = Inter({ subsets: ["latin"] });

// ============================= Meta Data =============================
export const metadata = {
  manifest: "/manifest.json",
  metadataBase: new URL(process.env.NEXT_PUBLIC_BASE_URL),
  title: 'Last Minute Engineering',
  description: 'Join Last Minute Engineering today and take control of your engineering education, no matter how tight the schedule.',
  generator: 'Next.js',
  applicationName: 'Last Minute Engineering',
  referrer: 'origin-when-cross-origin',
  keywords: [
    'Last Minute Engineering',
    'lastminuteengineering',
    'lme', 'engineers',
    'Last', 'Minute', 'Engineering',
    'tuitions', 'momente', 'lastminuteengineers',
    'lastmomenttuitions', 'lastmomentengineering',
    'last', 'minute', 'engineering',
    'soumojit', 'shome', 'soumojitshome', 'Next.js'
  ],

  authors: [{ name: 'Soumojit Shome' }, { name: 'Soumojit Shome', url: 'https://soumojitshome.vercel.app' }],
  creator: 'Soumojit Shome',
  publisher: 'Soumojit Shome',

  icons: {
    icon: '/images/logo/mainlogo2.jpg',
    shortcut: '/images/logo/mainlogo2.jpg',
    apple: '/images/logo/mainlogo2.jpg',
    other: {
      rel: 'apple-touch-icon-precomposed',
      url: '/images/logo/mainlogo2.jpg',
    },
  },

  openGraph: {
    title: 'Last Minute Engineering',
    description: 'Join Last Minute Engineering today and take control of your engineering education, no matter how tight the schedule.',
    url: '/images/logo/mainlogo2.jpg',
    siteName: 'Last Minute Engineering',
    images: [
      {
        url: '/images/logo/mainlogo2.jpg', // Must be an absolute URL
        width: 800,
        height: 600,
      },
      {
        url: '/images/logo/mainlogo2.jpg', // Must be an absolute URL
        width: 1800,
        height: 1600,
        alt: 'Last Minute Engineering',
      },
    ],
    locale: 'en_US',
    type: 'website',
  },
}

// ============================= Root Layout =============================
export default function RootLayout({ children, }) {
  return (
    <InputProvider>
    <html suppressHydrationWarning lang="en">
      <head>
        <title>Last Minute Engineering</title>

        {/* <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9294955976732697"
          crossorigin="anonymous"></script> */}
      </head >

      <body className="dark:bg-black">
        <AuthUserProvider>
          <Providers>
           
            <Background />

            <NextTopLoader color="#FF0000"
              initialPosition={0.08}
              height={4}
              crawl={true}
              showSpinner={false} />
          
           {children}
          
            
            
            
            <ScrollToTop />
          </Providers>
        </AuthUserProvider >
        <Analytics />
      </body>
    </html>
    </InputProvider>
  );
}





---

File: not-found.js

"use client"
import React from 'react'
import ErrorPage from './(Material)/error/page'

export default function notfound() {
  return (
    <ErrorPage />
  )
}


---

File: providers.js

"use client";

import { ThemeProvider } from "next-themes";

export function Providers({ children }) {
  return (
    <ThemeProvider attribute="class" enableSystem={false} defaultTheme="dark">
      {children}
    </ThemeProvider>
  );
}


---

File: AboutSectionOne.js

import Image from "next/image";
import SectionTitle from "../Common/SectionTitle";

const checkIcon = (
  <svg width="16" height="13" viewBox="0 0 16 13" className="fill-current">
    <path d="M5.8535 12.6631C5.65824 12.8584 5.34166 12.8584 5.1464 12.6631L0.678505 8.1952C0.483242 7.99994 0.483242 7.68336 0.678505 7.4881L2.32921 5.83739C2.52467 5.64193 2.84166 5.64216 3.03684 5.83791L5.14622 7.95354C5.34147 8.14936 5.65859 8.14952 5.85403 7.95388L13.3797 0.420561C13.575 0.22513 13.8917 0.225051 14.087 0.420383L15.7381 2.07143C15.9333 2.26669 15.9333 2.58327 15.7381 2.77854L5.8535 12.6631Z" />
  </svg>
);

const AboutSectionOne = () => {
  const List = ({ text }) => (
    <p className="mb-5 flex items-center text-lg font-medium text-gray-700">
      <span className="mr-4 flex h-[30px] w-[30px] items-center justify-center rounded-md bg-blue-900 bg-opacity-10 text-blue-900">
        {checkIcon}
      </span>
      {text}
    </p>
  );

  return (
    <section id="about" className="pt-16 md:pt-20 lg:pt-28">
      <div className="container">
        <div className="border-b border-gray-700/[.15] pb-16 dark:border-white/[.15] md:pb-20 lg:pb-28">
          <div className="-mx-4 flex flex-wrap items-center">
            <div className="w-full px-4 lg:w-1/2">
              <SectionTitle
                title="Crafted for Startup, SaaS and Business Sites."
                paragraph="The main â€˜thrustâ€™ is to focus on educating attendees on how to best protect highly vulnerable business applications with interactive panel discussions and roundtables."
                mb="44px"
              />

              <div
                className="wow fadeInUp mb-12 max-w-[570px] lg:mb-0"
                data-wow-delay=".15s"
              >
                <div className="mx-[-12px] flex flex-wrap">
                  <div className="w-full px-3 sm:w-1/2 lg:w-full xl:w-1/2">
                    <List text="Premium quality" />
                    <List text="Tailwind CSS" />
                    <List text="Use for lifetime" />
                  </div>

                  <div className="w-full px-3 sm:w-1/2 lg:w-full xl:w-1/2">
                    <List text="Next.js" />
                    <List text="Rich documentation" />
                    <List text="Developer friendly" />
                  </div>
                </div>
              </div>
            </div>

            <div className="w-full px-4 lg:w-1/2">
              <div
                className="wow fadeInUp relative mx-auto aspect-[25/24] max-w-[500px] lg:mr-0"
                data-wow-delay=".2s"
              >
                <Image
                  src="/images/about/about-image.svg"
                  alt="about-image"
                  fill
                  className="mx-auto max-w-full lg:mr-0"
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default AboutSectionOne;


---

File: AboutSectionTwo.js

import Image from "next/image";

const AboutSectionTwo = () => {
  return (
    <section className="py-16 md:py-20 lg:py-28">
      <div className="container">
        <div className="-mx-4 flex flex-wrap items-center">
          <div className="w-full px-4 lg:w-1/2">
            <div
              className="wow fadeInUp relative mx-auto mb-12 aspect-[25/24] max-w-[500px] text-center lg:m-0"
              data-wow-delay=".15s"
            >
              <Image
                src="/images/about/about-image-2.svg"
                alt="about image"
                fill
              />
            </div>
          </div>
          <div className="w-full px-4 lg:w-1/2">
            <div className="wow fadeInUp max-w-[470px]" data-wow-delay=".2s">
              <div className="mb-9">
                <h3 className="mb-4 text-xl font-bold text-black dark:text-white sm:text-2xl lg:text-xl xl:text-2xl">
                  Bug free code
                </h3>
                <p className="text-base font-medium leading-relaxed text-gray-700 sm:text-lg sm:leading-relaxed">
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
                  do eiusmod tempor incididunt ut labore et dolore magna aliqua.
                </p>
              </div>
              <div className="mb-9">
                <h3 className="mb-4 text-xl font-bold text-black dark:text-white sm:text-2xl lg:text-xl xl:text-2xl">
                  Premier support
                </h3>
                <p className="text-base font-medium leading-relaxed text-gray-700 sm:text-lg sm:leading-relaxed">
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
                  do eiusmod tempor incididunt.
                </p>
              </div>
              <div className="mb-1">
                <h3 className="mb-4 text-xl font-bold text-black dark:text-white sm:text-2xl lg:text-xl xl:text-2xl">
                  Next.js
                </h3>
                <p className="text-base font-medium leading-relaxed text-gray-700 sm:text-lg sm:leading-relaxed">
                  Lorem ipsum dolor sit amet, sed do eiusmod tempor incididunt
                  consectetur adipiscing elit setim.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default AboutSectionTwo;


---

File: UserCard.js

"use client"
// import Link from 'next/link';
import React from 'react'


// =================== User Card ===================*
export default function UserCard({ data }) {


  // =================== Return ===================
  return (<>
    <div className="text-center text-gray-600 dark:text-gray-300 py-2 md:w-96 border-b-4 border-gray-700 rounded-lg dark:border-gray-700 border-opacity-60 md:mx-2 w-screen min-h-80 h-full">

      <div className="bg-transparent rounded-b lg:rounded-b-none lg:rounded-r h-fit flex flex-col justify-between leading-normal">

        {/* ==================== Cover Pic ==================== */}
        <div className="rounded-t-lg overflow-hidden">
          <img className="h-32  object-top w-full" src={data.bannerpic ?? "/images/about/cover.jpg"} alt='Cover Pic'
          />
        </div>


        {/* ==================== User Image ==================== */}
        <div className="mx-auto w-32 h-32 relative -mt-12 border-4 items-center border-white rounded-full overflow-hidden">
          <img className="object-contain object-center items-center h-32 w-32 bg-black" src={data.imglink} alt='User Pic' />
        </div>

        {/* ==================== User Details ==================== */}
        <div className="text-center mt-2">

          {/* ==================== Display Name ==================== */}
          <div className='flex justify-center items-center flex-row'>
            <h2 className="font-bold text-black dark:text-white text-lg">{data.name}</h2>
            <img className="h-6 w-6 ml-2 inline object-contain object-cente rounded-full" src={'/images/verifiedbadge.png'} />
          </div>


          {/* ==================== Username ==================== */}
          <p className="font-bold text-gray-900 dark:text-gray-300">{data.mail}</p>


          {/* ==================== About ==================== */}
          <p className="text-gray-900 dark:text-gray-300 font-semibold break-words px-2">{data.about}</p>


          {/* ==================== Position ==================== */}
          <p className="text-gray-900 dark:text-gray-300 font-semibold break-words px-2">{data.position}</p>


        </div>

        {/* ==================== Visit Profile Btn ==================== */}
        <div className="p-4 border-t mx-4 mt-2">
          <a target='_blank' href={data.socialmedialink} className="w-full block mx-auto rounded-full bg-gray-700 hover:bg-gray-800 font-semibold text-white px-6 py-2 text-md">View Profile</a>
        </div>

      </div>
    </div>
  </>)
}

// ================================================================================

---

File: blogData.js


const blogData = [
  {
    id: 1,
    title: "Best UI components for modern websites",
    paragraph:
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras sit amet dictum neque, laoreet dolor.",
    image: "/images/blog/blog-01.jpg",
    author: {
      name: "Samuyl Joshi",
      image: "/images/blog/author-01.png",
      designation: "Graphic Designer",
    },
    tags: ["creative"],
    publishDate: "2025",
  },
  {
    id: 2,
    title: "9 simple ways to improve your design skills",
    paragraph:
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras sit amet dictum neque, laoreet dolor.",
    image: "/images/blog/blog-02.jpg",
    author: {
      name: "Musharof Chy",
      image: "/images/blog/author-02.png",
      designation: "Content Writer",
    },
    tags: ["computer"],
    publishDate: "2025",
  },
  {
    id: 3,
    title: "Tips to quickly improve your coding speed.",
    paragraph:
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras sit amet dictum neque, laoreet dolor.",
    image: "/images/blog/blog-03.jpg",
    author: {
      name: "Lethium Deo",
      image: "/images/blog/author-03.png",
      designation: "Graphic Designer",
    },
    tags: ["design"],
    publishDate: "2025",
  },
];
export default blogData;


---

File: index.js

import SectionTitle from "../Common/SectionTitle";
import SingleBlog from "./SingleBlog";
import blogData from "./blogData";

const Blog = () => {
  return (
    <section id="blog" className=" py-6">
      <div className="container">
        <SectionTitle
          title="Blogs"
          paragraph="Explore the universe of thoughts and ideas with LME Blog. Whether you're a seasoned writer or just starting out, we've got the tools and community to support you on your journey."
          center
        />

        <div className="grid grid-cols-1 gap-x-8 gap-y-10 md:grid-cols-2 md:gap-x-6 lg:gap-x-8 xl:grid-cols-3">
          {blogData.map((blog) => (
            <div key={blog.id} className="w-full">
              <SingleBlog blog={blog} />
            </div>
          ))}
        </div>
        
      </div>
    </section>
  );
};

export default Blog;


---

File: RelatedPost.js

import Image from "next/image";
import Link from "next/link";

const RelatedPost = ({
  image,
  slug,
  title,
  date,
}) => {
  return (
    <div className="flex items-center lg:block xl:flex">
      <div className="mr-5 lg:mb-3 xl:mb-0">
        <div className="relative h-[60px] w-[70px] overflow-hidden rounded-md sm:h-[75px] sm:w-[85px]">
          <Image src={image} alt={title} fill />
        </div>
      </div>
      <div className="w-full">
        <h5>
          <Link
            href={slug}
            className="mb-[6px] block text-base font-medium leading-snug text-black hover:text-blue-900 dark:text-white dark:hover:text-blue-900"
          >
            {title}
          </Link>
        </h5>
        <p className="text-xs font-medium text-gray-700">{date}</p>
      </div>
    </div>
  );
};

export default RelatedPost;


---

File: SharePost.js

const SharePost = () => {
  return (
    <>
      <a
        href="#0"
        className="mb-3 inline-flex h-9 w-9 items-center justify-center rounded-md bg-blue-900 bg-opacity-10 text-gray-700 duration-300 hover:bg-opacity-100 hover:text-white sm:ml-3"
      >
        <svg
          width="16"
          height="16"
          viewBox="0 0 16 16"
          className="fill-current"
        >
          <path d="M14.3442 0H1.12455C0.499798 0 0 0.497491 0 1.11936V14.3029C0 14.8999 0.499798 15.4222 1.12455 15.4222H14.2942C14.919 15.4222 15.4188 14.9247 15.4188 14.3029V1.09448C15.4688 0.497491 14.969 0 14.3442 0ZM4.57316 13.1089H2.29907V5.7709H4.57316V13.1089ZM3.42362 4.75104C2.67392 4.75104 2.09915 4.15405 2.09915 3.43269C2.09915 2.71133 2.69891 2.11434 3.42362 2.11434C4.14833 2.11434 4.74809 2.71133 4.74809 3.43269C4.74809 4.15405 4.19831 4.75104 3.42362 4.75104ZM13.1947 13.1089H10.9206V9.55183C10.9206 8.7061 10.8956 7.58674 9.72108 7.58674C8.52156 7.58674 8.34663 8.53198 8.34663 9.47721V13.1089H6.07255V5.7709H8.29665V6.79076H8.32164C8.64651 6.19377 9.37122 5.59678 10.4958 5.59678C12.8198 5.59678 13.2447 7.08925 13.2447 9.12897V13.1089H13.1947Z" />
        </svg>
      </a>
      <a
        href="#0"
        className="ml-3 mb-3 inline-flex h-9 w-9 items-center justify-center rounded-md bg-blue-900 bg-opacity-10 text-gray-700 duration-300 hover:bg-opacity-100 hover:text-white"
      >
        <svg
          width="18"
          height="14"
          viewBox="0 0 18 14"
          className="fill-current"
        >
          <path d="M15.5524 2.26027L16.625 1.0274C16.9355 0.693493 17.0202 0.436644 17.0484 0.308219C16.2016 0.770548 15.4113 0.924658 14.9032 0.924658H14.7056L14.5927 0.821918C13.9153 0.282534 13.0685 0 12.1653 0C10.1895 0 8.6371 1.48973 8.6371 3.21062C8.6371 3.31336 8.6371 3.46747 8.66532 3.57021L8.75 4.0839L8.15726 4.05822C4.54435 3.95548 1.58065 1.13014 1.10081 0.642123C0.310484 1.92637 0.762097 3.15925 1.24194 3.92979L2.20161 5.36815L0.677419 4.5976C0.705645 5.67637 1.15726 6.52397 2.03226 7.14041L2.79435 7.65411L2.03226 7.93665C2.5121 9.24658 3.58468 9.78596 4.375 9.99144L5.41935 10.2483L4.43145 10.8647C2.85081 11.8921 0.875 11.8151 0 11.738C1.77823 12.8682 3.89516 13.125 5.3629 13.125C6.46371 13.125 7.28226 13.0223 7.47984 12.9452C15.3831 11.25 15.75 4.82877 15.75 3.54452V3.36473L15.9194 3.26199C16.879 2.44007 17.2742 2.00342 17.5 1.74658C17.4153 1.77226 17.3024 1.82363 17.1895 1.84932L15.5524 2.26027Z" />
        </svg>
      </a>
      <a
        href="#0"
        className="ml-3 mb-3 inline-flex h-9 w-9 items-center justify-center rounded-md bg-blue-900 bg-opacity-10 text-gray-700 duration-300 hover:bg-opacity-100 hover:text-white"
      >
        <svg width="9" height="18" viewBox="0 0 9 18" className="fill-current">
          <path d="M8.13643 7H6.78036H6.29605V6.43548V4.68548V4.12097H6.78036H7.79741C8.06378 4.12097 8.28172 3.89516 8.28172 3.55645V0.564516C8.28172 0.254032 8.088 0 7.79741 0H6.02968C4.11665 0 2.78479 1.58064 2.78479 3.92339V6.37903V6.94355H2.30048H0.65382C0.314802 6.94355 0 7.25403 0 7.70564V9.7379C0 10.1331 0.266371 10.5 0.65382 10.5H2.25205H2.73636V11.0645V16.7379C2.73636 17.1331 3.00273 17.5 3.39018 17.5H5.66644C5.81174 17.5 5.93281 17.4153 6.02968 17.3024C6.12654 17.1895 6.19919 16.9919 6.19919 16.8226V11.0927V10.5282H6.70771H7.79741C8.11222 10.5282 8.35437 10.3024 8.4028 9.96371V9.93548V9.90726L8.74182 7.95968C8.76604 7.7621 8.74182 7.53629 8.59653 7.31048C8.54809 7.16935 8.33016 7.02823 8.13643 7Z" />
        </svg>
      </a>
    </>
  );
};

export default SharePost;


---

File: SingleBlog.js

import Image from "next/image";
import Link from "next/link";

const SingleBlog = ({ blog }) => {
  const { title, image, paragraph, author, tags, publishDate } = blog;
  return (
    <>
      <div
        className="wow fadeInUp relative overflow-hidden rounded-md bg-white shadow-one dark:bg-black"
        data-wow-delay=".1s"
      >
        <Link href="/" className="relative block h-[220px] w-full">
          <span className="absolute top-6 right-6 z-20 inline-flex items-center justify-center rounded-full bg-blue-900 py-2 px-4 text-sm font-semibold capitalize text-white">
            {tags[0]}
          </span>
          <Image src={image} alt="image" fill />
        </Link>
        <div className="p-6 sm:p-8 md:py-8 md:px-6 lg:p-8 xl:py-8 xl:px-5 2xl:p-8">
          <h3>
            <Link
              href="/"
              className="mb-4 block text-xl font-bold text-black hover:text-blue-900 dark:text-white dark:hover:text-blue-900 sm:text-2xl"
            >
              {title}
            </Link>
          </h3>
          <p className="mb-6 border-b border-gray-700 border-opacity-10 pb-6 text-base font-medium text-gray-700 dark:border-white dark:border-opacity-10">
            {paragraph}
          </p>
          <div className="flex items-center">
            <div className="mr-5 flex items-center border-r border-gray-700 border-opacity-10 pr-5 dark:border-white dark:border-opacity-10 xl:mr-3 xl:pr-3 2xl:mr-5 2xl:pr-5">
              <div className="mr-4">
                <div className="relative h-10 w-10 overflow-hidden rounded-full">
                  <Image src={author.image} alt="author" fill />
                </div>
              </div>
              <div className="w-full">
                <h4 className="mb-1 text-sm font-medium text-black dark:text-white">
                  By {author.name}
                </h4>
                <p className="text-xs text-gray-700">{author.designation}</p>
              </div>
            </div>
            <div className="inline-block">
              <h4 className="mb-1 text-sm font-medium text-black dark:text-white">
                Date
              </h4>
              <p className="text-xs text-gray-700">{publishDate}</p>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default SingleBlog;


---

File: TagButton.js

const TagButton = ({ href = "#0", text }) => {
  return (
    <a
      href={href}
      className="mr-3 mb-3 inline-flex items-center justify-center rounded-md bg-blue-900 bg-opacity-10 py-2 px-4 text-gray-700 duration-300 hover:bg-opacity-100 hover:text-white"
    >
      {text}
    </a>
  );
};

export default TagButton;


---

File: index.js

import Image from "next/image";

const brandsData = [
  {
    id: 1,
    name: "UIdeck",
    href: "#",
    image: "/images/brands/uideck.svg",
  },
  {
    id: 2,
    name: "Tailgrids",
    href: "#",
    image: "/images/brands/tailgrids.svg",
  },
  {
    id: 3,
    name: "Lineicons",
    href: "#",
    image: "/images/brands/lineicons.svg",
  },
  {
    id: 4,
    name: "GrayGrids",
    href: "#",
    image: "/images/brands/graygrids.svg",
  },
  {
    id: 5,
    name: "TailAdmin",
    href: "#",
    image: "/images/brands/tailadmin.svg",
  },
];

const Brands = () => {
  return (
    <section className="pt-16">
      <div className="container">
        <div className="-mx-4 flex flex-wrap">
          <div className="w-full px-4">
            <div
              className="wow fadeInUp flex flex-wrap items-center justify-center rounded-md bg-black py-8 px-8 dark:bg-blue-900 dark:bg-opacity-5 sm:px-10 md:py-[40px] md:px-[50px] xl:p-[50px] 2xl:py-[60px] 2xl:px-[70px]"
              data-wow-delay=".1s
              "
            >
              {brandsData.map((brand) => (
                <SingleBrand key={brand.id} brand={brand} />
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Brands;

const SingleBrand = ({ brand }) => {
  const { href, image, name } = brand;

  return (
    <div className="mx-3 flex w-full max-w-[160px] items-center justify-center py-[15px] sm:mx-4 lg:max-w-[130px] xl:mx-6 xl:max-w-[150px] 2xl:mx-8 2xl:max-w-[160px]">
      <a
        href={href}
        target="_blank"
        rel="nofollow noreferrer"
        className="relative h-10 w-full opacity-70 grayscale transition hover:opacity-100 hover:grayscale-0 dark:opacity-60 dark:hover:opacity-100"
      >
        <Image src={image} alt={name} fill />
      </a>
    </div>
  );
};


---

File: LinkCard.js

"use client"
import React from 'react'
import Link from "next/link";

export default function LinkCard({ data }) {
  return (<>


    <a href={data.link} target='_blank' className="m-2 flex w-full flex-col items-center bg-white border border-gray-200 rounded-lg shadow md:flex-row md:max-w-xl hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
      <img className="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-48 md:rounded-none md:rounded-s-lg" src={data.pic} alt="" />
      <div className="flex flex-col justify-between p-4 leading-normal">
        <h5 className="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">{data.title}</h5>
        <p className="mb-3 font-normal text-gray-700 dark:text-gray-400">{data.desc}</p>
      </div>
    </a>


  </>)
}


---

File: AnimatedBeamDemo.js

"use client";

import React, { forwardRef, useRef } from "react";
import { cn } from "../../lib/utils";
import Image from "next/image";
import { AnimatedBeam } from "../magicui/animated-beam";


const Circle = forwardRef(function Circle({ className, children }, ref) {
  return (
    <div
      ref={ref}
      className={cn(
        "z-10 flex size-12 items-center justify-center rounded-full border-2 bg-white p-3 shadow-[0_0_20px_-12px_rgba(0,0,0,0.8)]",
        className,
      )}
    >
      {children}
    </div>
  );
});

Circle.displayName = "Circle";

export function AnimatedBeamDemo() {
  const containerRef = useRef(null);
  const div1Ref = useRef(null);
  const div2Ref = useRef(null);
  const div3Ref = useRef(null);
  const div4Ref = useRef(null);
  const div5Ref = useRef(null);
  const div6Ref = useRef(null);
  const div7Ref = useRef(null);

  return (
    <div className="relative flex h-fit w-full items-center justify-center overflow-hidden p-10" ref={containerRef} >
      <div className="flex size-full flex-col max-w-lg max-h-[200px] items-stretch justify-between gap-10">
        <div className="flex flex-row items-center justify-between">
          <Circle ref={div1Ref}>
            <Icons.googleDrive />
          </Circle>
          <Circle ref={div5Ref}>
            <Icons.googleDocs />
          </Circle>
        </div>
        <div className="flex flex-row items-center justify-between">
          <Circle ref={div2Ref}>
            <Icons.openai />
          </Circle>
          <Circle ref={div4Ref} className="size-16">
            <Image src="/images/logo/mainlogo.png"
              alt="logo"
              width={60}
              height={60}
              className="rounded-full"
            />
          </Circle>
          <Circle ref={div6Ref}>
            <Icons.user />
          </Circle>
        </div>
        <div className="flex flex-row items-center justify-between">
          <Circle ref={div3Ref}>
            <Icons.whatsapp />
          </Circle>
          <Circle ref={div7Ref}>
            <Icons.messenger />
          </Circle>
        </div>
      </div>

      <AnimatedBeam
        containerRef={containerRef}
        fromRef={div1Ref}
        toRef={div4Ref}
        curvature={-75}
        endYOffset={-10}
      />
      <AnimatedBeam
        containerRef={containerRef}
        fromRef={div2Ref}
        toRef={div4Ref}
      />
      <AnimatedBeam
        containerRef={containerRef}
        fromRef={div3Ref}
        toRef={div4Ref}
        curvature={75}
        endYOffset={10}
      />
      <AnimatedBeam
        containerRef={containerRef}
        fromRef={div5Ref}
        toRef={div4Ref}
        curvature={-75}
        endYOffset={-10}
        reverse
      />
      <AnimatedBeam
        containerRef={containerRef}
        fromRef={div6Ref}
        toRef={div4Ref}
        reverse
      />
      <AnimatedBeam
        containerRef={containerRef}
        fromRef={div7Ref}
        toRef={div4Ref}
        curvature={75}
        endYOffset={10}
        reverse
      />
    </div>
  );
}


const Icons = {
  user: () => (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="#000000"
      strokeWidth="2"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
      <circle cx="12" cy="7" r="4" />
    </svg>
  ),
  openai: () => (
    <svg
      width="100"
      height="100"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z" />
    </svg>
  ),
  googleDrive: () => (
    <svg
      width="100"
      height="100"
      viewBox="0 0 87.3 78"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="m6.6 66.85 3.85 6.65c.8 1.4 1.95 2.5 3.3 3.3l13.75-23.8h-27.5c0 1.55.4 3.1 1.2 4.5z"
        fill="#0066da"
      />
      <path
        d="m43.65 25-13.75-23.8c-1.35.8-2.5 1.9-3.3 3.3l-25.4 44a9.06 9.06 0 0 0 -1.2 4.5h27.5z"
        fill="#00ac47"
      />
      <path
        d="m73.55 76.8c1.35-.8 2.5-1.9 3.3-3.3l1.6-2.75 7.65-13.25c.8-1.4 1.2-2.95 1.2-4.5h-27.502l5.852 11.5z"
        fill="#ea4335"
      />
      <path
        d="m43.65 25 13.75-23.8c-1.35-.8-2.9-1.2-4.5-1.2h-18.5c-1.6 0-3.15.45-4.5 1.2z"
        fill="#00832d"
      />
      <path
        d="m59.8 53h-32.3l-13.75 23.8c1.35.8 2.9 1.2 4.5 1.2h50.8c1.6 0 3.15-.45 4.5-1.2z"
        fill="#2684fc"
      />
      <path
        d="m73.4 26.5-12.7-22c-.8-1.4-1.95-2.5-3.3-3.3l-13.75 23.8 16.15 28h27.45c0-1.55-.4-3.1-1.2-4.5z"
        fill="#ffba00"
      />
    </svg>
  ),
  whatsapp: () => (
    <svg
      width="100"
      height="100"
      viewBox="0 0 175.216 175.552"
      xmlns="http://www.w3.org/2000/svg"
    >
      <defs>
        <linearGradient
          id="b"
          x1="85.915"
          x2="86.535"
          y1="32.567"
          y2="137.092"
          gradientUnits="userSpaceOnUse"
        >
          <stop offset="0" stopColor="#57d163" />
          <stop offset="1" stopColor="#23b33a" />
        </linearGradient>
        <filter
          id="a"
          width="1.115"
          height="1.114"
          x="-.057"
          y="-.057"
          colorInterpolationFilters="sRGB"
        >
          <feGaussianBlur stdDeviation="3.531" />
        </filter>
      </defs>
      <path
        d="m54.532 138.45 2.235 1.324c9.387 5.571 20.15 8.518 31.126 8.523h.023c33.707 0 61.139-27.426 61.153-61.135.006-16.335-6.349-31.696-17.895-43.251A60.75 60.75 0 0 0 87.94 25.983c-33.733 0-61.166 27.423-61.178 61.13a60.98 60.98 0 0 0 9.349 32.535l1.455 2.312-6.179 22.558zm-40.811 23.544L24.16 123.88c-6.438-11.154-9.825-23.808-9.821-36.772.017-40.556 33.021-73.55 73.578-73.55 19.681.01 38.154 7.669 52.047 21.572s21.537 32.383 21.53 52.037c-.018 40.553-33.027 73.553-73.578 73.553h-.032c-12.313-.005-24.412-3.094-35.159-8.954zm0 0"
        fill="#b3b3b3"
        filter="url(#a)"
      />
      <path
        d="m12.966 161.238 10.439-38.114a73.42 73.42 0 0 1-9.821-36.772c.017-40.556 33.021-73.55 73.578-73.55 19.681.01 38.154 7.669 52.047 21.572s21.537 32.383 21.53 52.037c-.018 40.553-33.027 73.553-73.578 73.553h-.032c-12.313-.005-24.412-3.094-35.159-8.954z"
        fill="#ffffff"
      />
      <path
        d="M87.184 25.227c-33.733 0-61.166 27.423-61.178 61.13a60.98 60.98 0 0 0 9.349 32.535l1.455 2.312-6.179 22.559 23.146-6.069 2.235 1.324c9.387 5.571 20.15 8.518 31.126 8.524h.023c33.707 0 61.14-27.426 61.153-61.135a60.75 60.75 0 0 0-17.895-43.251 60.75 60.75 0 0 0-43.235-17.929z"
        fill="url(#linearGradient1780)"
      />
      <path
        d="M87.184 25.227c-33.733 0-61.166 27.423-61.178 61.13a60.98 60.98 0 0 0 9.349 32.535l1.455 2.313-6.179 22.558 23.146-6.069 2.235 1.324c9.387 5.571 20.15 8.517 31.126 8.523h.023c33.707 0 61.14-27.426 61.153-61.135a60.75 60.75 0 0 0-17.895-43.251 60.75 60.75 0 0 0-43.235-17.928z"
        fill="url(#b)"
      />
      <path
        d="M68.772 55.603c-1.378-3.061-2.828-3.123-4.137-3.176l-3.524-.043c-1.226 0-3.218.46-4.902 2.3s-6.435 6.287-6.435 15.332 6.588 17.785 7.506 19.013 12.718 20.381 31.405 27.75c15.529 6.124 18.689 4.906 22.061 4.6s10.877-4.447 12.408-8.74 1.532-7.971 1.073-8.74-1.685-1.226-3.525-2.146-10.877-5.367-12.562-5.981-2.91-.919-4.137.921-4.746 5.979-5.819 7.206-2.144 1.381-3.984.462-7.76-2.861-14.784-9.124c-5.465-4.873-9.154-10.891-10.228-12.73s-.114-2.835.808-3.751c.825-.824 1.838-2.147 2.759-3.22s1.224-1.84 1.836-3.065.307-2.301-.153-3.22-4.032-10.011-5.666-13.647"
        fill="#ffffff"
        fillRule="evenodd"
      />
    </svg>
  ),
  googleDocs: () => (
    <svg
      width="47px"
      height="65px"
      viewBox="0 0 47 65"
      xmlns="http://www.w3.org/2000/svg"
    >
      <defs>
        <path
          d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z"
          id="path-1"
        />
        <path
          d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z"
          id="path-3"
        />
        <linearGradient
          x1="50.0053945%"
          y1="8.58610612%"
          x2="50.0053945%"
          y2="100.013939%"
          id="linearGradient-5"
        >
          <stop stopColor="#1A237E" stopOpacity="0.2" offset="0%" />
          <stop stopColor="#1A237E" stopOpacity="0.02" offset="100%" />
        </linearGradient>
        <path
          d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z"
          id="path-6"
        />
        <path
          d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z"
          id="path-8"
        />
        <path
          d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z"
          id="path-10"
        />
        <path
          d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z"
          id="path-12"
        />
        <path
          d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z"
          id="path-14"
        />
        <radialGradient
          cx="3.16804688%"
          cy="2.71744318%"
          fx="3.16804688%"
          fy="2.71744318%"
          r="161.248516%"
          gradientTransform="translate(0.031680,0.027174),scale(1.000000,0.723077),translate(-0.031680,-0.027174)"
          id="radialGradient-16"
        >
          <stop stopColor="#FFFFFF" stopOpacity="0.1" offset="0%" />
          <stop stopColor="#FFFFFF" stopOpacity="0" offset="100%" />
        </radialGradient>
      </defs>
      <g
        id="Page-1"
        stroke="none"
        strokeWidth="1"
        fill="none"
        fillRule="evenodd"
      >
        <g transform="translate(-451.000000, -463.000000)">
          <g id="Hero" transform="translate(0.000000, 63.000000)">
            <g id="Personal" transform="translate(277.000000, 309.000000)">
              <g id="Docs-icon" transform="translate(174.000000, 91.000000)">
                <g id="Group">
                  <g id="Clipped">
                    <mask id="mask-2" fill="white">
                      <use xlinkHref="#path-1" />
                    </mask>
                    <g id="SVGID_1_" />
                    <path
                      d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L36.71875,10.3409091 L29.375,0 Z"
                      id="Path"
                      fill="#4285F4"
                      fillRule="nonzero"
                      mask="url(#mask-2)"
                    />
                  </g>
                  <g id="Clipped">
                    <mask id="mask-4" fill="white">
                      <use xlinkHref="#path-3" />
                    </mask>
                    <g id="SVGID_1_" />
                    <polygon
                      id="Path"
                      fill="url(#linearGradient-5)"
                      fillRule="nonzero"
                      mask="url(#mask-4)"
                      points="30.6638281 16.4309659 47 32.8582386 47 17.7272727"
                    ></polygon>
                  </g>
                  <g id="Clipped">
                    <mask id="mask-7" fill="white">
                      <use xlinkHref="#path-6" />
                    </mask>
                    <g id="SVGID_1_" />
                    <path
                      d="M11.75,47.2727273 L35.25,47.2727273 L35.25,44.3181818 L11.75,44.3181818 L11.75,47.2727273 Z M11.75,53.1818182 L29.375,53.1818182 L29.375,50.2272727 L11.75,50.2272727 L11.75,53.1818182 Z M11.75,32.5 L11.75,35.4545455 L35.25,35.4545455 L35.25,32.5 L11.75,32.5 Z M11.75,41.3636364 L35.25,41.3636364 L35.25,38.4090909 L11.75,38.4090909 L11.75,41.3636364 Z"
                      id="Shape"
                      fill="#F1F1F1"
                      fillRule="nonzero"
                      mask="url(#mask-7)"
                    />
                  </g>
                  <g id="Clipped">
                    <mask id="mask-9" fill="white">
                      <use xlinkHref="#path-8" />
                    </mask>
                    <g id="SVGID_1_" />
                    <g id="Group" mask="url(#mask-9)">
                      <g transform="translate(26.437500, -2.954545)">
                        <path
                          d="M2.9375,2.95454545 L2.9375,16.25 C2.9375,18.6985795 4.90929688,20.6818182 7.34375,20.6818182 L20.5625,20.6818182 L2.9375,2.95454545 Z"
                          id="Path"
                          fill="#A1C2FA"
                          fillRule="nonzero"
                        />
                      </g>
                    </g>
                  </g>
                  <g id="Clipped">
                    <mask id="mask-11" fill="white">
                      <use xlinkHref="#path-10" />
                    </mask>
                    <g id="SVGID_1_" />
                    <path
                      d="M4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,4.80113636 C0,2.36363636 1.9828125,0.369318182 4.40625,0.369318182 L29.375,0.369318182 L29.375,0 L4.40625,0 Z"
                      id="Path"
                      fillOpacity="0.2"
                      fill="#FFFFFF"
                      fillRule="nonzero"
                      mask="url(#mask-11)"
                    />
                  </g>
                  <g id="Clipped">
                    <mask id="mask-13" fill="white">
                      <use xlinkHref="#path-12" />
                    </mask>
                    <g id="SVGID_1_" />
                    <path
                      d="M42.59375,64.6306818 L4.40625,64.6306818 C1.9828125,64.6306818 0,62.6363636 0,60.1988636 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,60.1988636 C47,62.6363636 45.0171875,64.6306818 42.59375,64.6306818 Z"
                      id="Path"
                      fillOpacity="0.2"
                      fill="#1A237E"
                      fillRule="nonzero"
                      mask="url(#mask-13)"
                    />
                  </g>
                  <g id="Clipped">
                    <mask id="mask-15" fill="white">
                      <use xlinkHref="#path-14" />
                    </mask>
                    <g id="SVGID_1_" />
                    <path
                      d="M33.78125,17.7272727 C31.3467969,17.7272727 29.375,15.7440341 29.375,13.2954545 L29.375,13.6647727 C29.375,16.1133523 31.3467969,18.0965909 33.78125,18.0965909 L47,18.0965909 L47,17.7272727 L33.78125,17.7272727 Z"
                      id="Path"
                      fillOpacity="0.1"
                      fill="#1A237E"
                      fillRule="nonzero"
                      mask="url(#mask-15)"
                    />
                  </g>
                </g>
                <path
                  d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z"
                  id="Path"
                  fill="url(#radialGradient-16)"
                  fillRule="nonzero"
                />
              </g>
            </g>
          </g>
        </g>
      </g>
    </svg>
  ),
  messenger: () => (
    <svg
      width="100"
      height="100"
      viewBox="0 0 48 48"
      xmlns="http://www.w3.org/2000/svg"
    >
      <radialGradient
        id="8O3wK6b5ASW2Wn6hRCB5xa_YFbzdUk7Q3F8_gr1"
        cx="11.087"
        cy="7.022"
        r="47.612"
        gradientTransform="matrix(1 0 0 -1 0 50)"
        gradientUnits="userSpaceOnUse"
      >
        <stop offset="0" stopColor="#1292ff"></stop>
        <stop offset=".079" stopColor="#2982ff"></stop>
        <stop offset=".23" stopColor="#4e69ff"></stop>
        <stop offset=".351" stopColor="#6559ff"></stop>
        <stop offset=".428" stopColor="#6d53ff"></stop>
        <stop offset=".754" stopColor="#df47aa"></stop>
        <stop offset=".946" stopColor="#ff6257"></stop>
      </radialGradient>
      <path
        fill="url(#8O3wK6b5ASW2Wn6hRCB5xa_YFbzdUk7Q3F8_gr1)"
        d="M44,23.5C44,34.27,35.05,43,24,43c-1.651,0-3.25-0.194-4.784-0.564	c-0.465-0.112-0.951-0.069-1.379,0.145L13.46,44.77C12.33,45.335,11,44.513,11,43.249v-4.025c0-0.575-0.257-1.111-0.681-1.499	C6.425,34.165,4,29.11,4,23.5C4,12.73,12.95,4,24,4S44,12.73,44,23.5z"
      />
      <path
        d="M34.992,17.292c-0.428,0-0.843,0.142-1.2,0.411l-5.694,4.215	c-0.133,0.1-0.28,0.15-0.435,0.15c-0.15,0-0.291-0.047-0.41-0.136l-3.972-2.99c-0.808-0.601-1.76-0.918-2.757-0.918	c-1.576,0-3.025,0.791-3.876,2.116l-1.211,1.891l-4.12,6.695c-0.392,0.614-0.422,1.372-0.071,2.014	c0.358,0.654,1.034,1.06,1.764,1.06c0.428,0,0.843-0.142,1.2-0.411l5.694-4.215c0.133-0.1,0.28-0.15,0.435-0.15	c0.15,0,0.291,0.047,0.41,0.136l3.972,2.99c0.809,0.602,1.76,0.918,2.757,0.918c1.576,0,3.025-0.791,3.876-2.116l1.211-1.891	l4.12-6.695c0.392-0.614,0.422-1.372,0.071-2.014C36.398,17.698,35.722,17.292,34.992,17.292L34.992,17.292z"
        opacity=".05"
      />
      <path
        d="M34.992,17.792c-0.319,0-0.63,0.107-0.899,0.31l-5.697,4.218	c-0.216,0.163-0.468,0.248-0.732,0.248c-0.259,0-0.504-0.082-0.71-0.236l-3.973-2.991c-0.719-0.535-1.568-0.817-2.457-0.817	c-1.405,0-2.696,0.705-3.455,1.887l-1.21,1.891l-4.115,6.688c-0.297,0.465-0.32,1.033-0.058,1.511c0.266,0.486,0.787,0.8,1.325,0.8	c0.319,0,0.63-0.107,0.899-0.31l5.697-4.218c0.216-0.163,0.468-0.248,0.732-0.248c0.259,0,0.504,0.082,0.71,0.236l3.973,2.991	c0.719,0.535,1.568,0.817,2.457,0.817c1.405,0,2.696-0.705,3.455-1.887l1.21-1.891l4.115-6.688c0.297-0.465,0.32-1.033,0.058-1.511	C36.051,18.106,35.531,17.792,34.992,17.792L34.992,17.792z"
        opacity=".07"
      />
      <path
        fill="#ffffff"
        d="M34.394,18.501l-5.7,4.22c-0.61,0.46-1.44,0.46-2.04,0.01L22.68,19.74	c-1.68-1.25-4.06-0.82-5.19,0.94l-1.21,1.89l-4.11,6.68c-0.6,0.94,0.55,2.01,1.44,1.34l5.7-4.22c0.61-0.46,1.44-0.46,2.04-0.01	l3.974,2.991c1.68,1.25,4.06,0.82,5.19-0.94l1.21-1.89l4.11-6.68C36.434,18.901,35.284,17.831,34.394,18.501z"
      />
    </svg>
  ),
};


---

File: Background.js

import React from 'react'


// ===================== Normal Background =====================

export default function Background() {
    return (
        <div className="fixed inset-x-0 -top-10 -z-10 transform-gpu overflow-hidden blur-3xl sm:-top-80"
            aria-hidden="true" >
            <div
                className="relative left-[calc(50%-11rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-[#ff80b5] to-[#9089fc] opacity-50 sm:left-[calc(50%-30rem)] sm:w-[72.1875rem]"
                style={{
                    clipPath:
                        'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
                }}
            />
            <div
                className="aspect-[1155/678] w-[72.1875rem] bg-gradient-to-tr from-[#ff80b5] to-[#9089fc] opacity-50"
                style={{
                    clipPath:
                        'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
                }}
            />
        </div>
    )
}

// ===============================================================

---

File: BackgroundBeamsDemo.js

"use client";
import React from "react";
import { BackgroundBeams } from "../ui/background-beams";

export function BackgroundBeamsDemo() {
  return (
    // <div className="h-[40rem] w-full rounded-md bg-neutral-950 relative flex flex-col items-center justify-center antialiased">
      <BackgroundBeams />

    // </div>
  );
}


---

File: Breadcrumb.js

"use client"
import React from 'react';
import Link from "next/link";
import { useUrl } from 'nextjs-current-url';
import ShareBtn from "./ShareBtn";


// =========== Page ===========*
const Breadcrumb = ({ pageName, description }) => {
  const { href: currentUrl, pathname } = useUrl() ?? {};

  return (<>

    <section className="font-sans relative z-10 overflow-hidden pt-12 md:pt-24 mb-10">
      <div className="container">
        <div className="flex flex-wrap items-center">
          <div className="w-full md:w-8/12 lg:w-7/12">
            <div className="mb-8 max-w-full md:mb-0 lg:mb-12">
              <h1 className="mb-5 text-xl font-bold text-black dark:text-white sm:text-3xl">
                {pageName}
              </h1>
              <h2 className="text-sm sm:text-lg font-medium dark:text-white text-black">
                {description}
              </h2>
            </div>
          </div>
          <div className="w-full md:w-4/12 lg:w-5/12">
            <div className="text-end">
              <ul className="flex items-center font-bold md:justify-end">
                <li className="flex items-center">
                  <Link href="/" className="pr-1 text-md dark:text-white text-black hover:text-blue-900">
                    Home
                  </Link>
                  {/* <span className="mr-3 block h-2 w-2 rotate-45 border-t-2 border-r-2 border-gray-700"></span> */}
                </li>
                <li className="text-md text-blue-500">
                  {/* {pageName} */}
                  {pathname}
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>

      <div>
        <span className="absolute top-0 left-0 z-[-1]">
          <svg
            width="287"
            height="254"
            viewBox="0 0 287 254"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              opacity="0.1"
              d="M286.5 0.5L-14.5 254.5V69.5L286.5 0.5Z"
              fill="url(#paint0_linear_111:578)"
            />
            <defs>
              <linearGradient
                id="paint0_linear_111:578"
                x1="-40.5"
                y1="117"
                x2="301.926"
                y2="-97.1485"
                gradientUnits="userSpaceOnUse"
              >
                <stop stopColor="#4A6CF7" />
                <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
              </linearGradient>
            </defs>
          </svg>
        </span>
        <span className="absolute right-0 top-0 z-[-1]">
          <svg
            width="628"
            height="258"
            viewBox="0 0 628 258"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              opacity="0.1"
              d="M669.125 257.002L345.875 31.9983L524.571 -15.8832L669.125 257.002Z"
              fill="url(#paint0_linear_0:1)"
            />
            <path
              opacity="0.1"
              d="M0.0716344 182.78L101.988 -15.0769L142.154 81.4093L0.0716344 182.78Z"
              fill="url(#paint1_linear_0:1)"
            />
            <defs>
              <linearGradient
                id="paint0_linear_0:1"
                x1="644"
                y1="221"
                x2="429.946"
                y2="37.0429"
                gradientUnits="userSpaceOnUse"
              >
                <stop stopColor="#4A6CF7" />
                <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
              </linearGradient>
              <linearGradient
                id="paint1_linear_0:1"
                x1="18.3648"
                y1="166.016"
                x2="105.377"
                y2="32.3398"
                gradientUnits="userSpaceOnUse"
              >
                <stop stopColor="#4A6CF7" />
                <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
              </linearGradient>
            </defs>
          </svg>
        </span>
      </div>
    </section>

    <div className='w-fit mx-auto font-bold text-lg text-black dark:text-white'>
      Share :
      <ShareBtn ButtonclassName="text-white order-3 bg-gray-800 hover:bg-gray-900 focus:outline-none font-medium rounded-lg text-md px-5 py-2.5 me-2 mb-2 mx-2  dark:bg-gray-800 dark:hover:bg-gray-700" icon="true" />
    </div>
  </>);
};

export default Breadcrumb;


---

File: CardWithTab.js

import React from 'react'

export default function CardWithTab() {
  return (
    <div className="container">

      <div className="w-full border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
        <div className="sm:hidden">
          <label for="tabs" className="sr-only">Select tab</label>
          <select id="tabs" className="bg-gray-50 border-0 border-b border-gray-200 text-gray-900 text-sm rounded-t-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
            <option>Statistics</option>
            <option>Services</option>
            <option>FAQ</option>
          </select>
        </div>



        <ul className="hidden text-sm font-medium text-center text-gray-500 divide-x divide-gray-200 rounded-lg sm:flex dark:divide-gray-600 dark:text-gray-400 rtl:divide-x-reverse" id="fullWidthTab" data-tabs-toggle="#fullWidthTabContent" role="tablist">
          <li className="w-full">
            <button id="stats-tab" data-tabs-target="#stats" type="button" role="tab" aria-controls="stats" aria-selected="true" className="inline-block w-full p-4 rounded-ss-lg bg-gray-50 hover:bg-gray-100 focus:outline-none dark:bg-gray-700 dark:hover:bg-gray-600">Statistics</button>
          </li>
          <li className="w-full">
            <button id="about-tab" data-tabs-target="#about" type="button" role="tab" aria-controls="about" aria-selected="false" className="inline-block w-full p-4 bg-gray-50 hover:bg-gray-100 focus:outline-none dark:bg-gray-700 dark:hover:bg-gray-600">Services</button>
          </li>
          <li className="w-full">
            <button id="faq-tab" data-tabs-target="#faq" type="button" role="tab" aria-controls="faq" aria-selected="false" className="inline-block w-full p-4 rounded-se-lg bg-gray-50 hover:bg-gray-100 focus:outline-none dark:bg-gray-700 dark:hover:bg-gray-600">FAQ</button>
          </li>
        </ul>


        <div id="fullWidthTabContent" className="border-t border-gray-200 dark:border-gray-600">
          <div className=" p-4  rounded-lg md:p-8 dark:bg-gray-800" id="stats" role="tabpanel" aria-labelledby="stats-tab">
            <dl className="grid max-w-screen-xl grid-cols-2 gap-8 p-4 mx-auto text-gray-900 sm:grid-cols-3 xl:grid-cols-6 dark:text-white sm:p-8">
              <div className="flex flex-col items-center justify-center">
                <dt className="mb-2 text-3xl font-extrabold">73M+</dt>
                <dd className="text-gray-500 dark:text-gray-400">Developers</dd>
              </div>
              <div className="flex flex-col items-center justify-center">
                <dt className="mb-2 text-3xl font-extrabold">100M+</dt>
                <dd className="text-gray-500 dark:text-gray-400">Public repositories</dd>
              </div>
              <div className="flex flex-col items-center justify-center">
                <dt className="mb-2 text-3xl font-extrabold">1000s</dt>
                <dd className="text-gray-500 dark:text-gray-400">Open source projects</dd>
              </div>
              <div className="flex flex-col items-center justify-center">
                <dt className="mb-2 text-3xl font-extrabold">1B+</dt>
                <dd className="text-gray-500 dark:text-gray-400">Contributors</dd>
              </div>
              <div className="flex flex-col items-center justify-center">
                <dt className="mb-2 text-3xl font-extrabold">90+</dt>
                <dd className="text-gray-500 dark:text-gray-400">Top Forbes companies</dd>
              </div>
              <div className="flex flex-col items-center justify-center">
                <dt className="mb-2 text-3xl font-extrabold">4M+</dt>
                <dd className="text-gray-500 dark:text-gray-400">Organizations</dd>
              </div>
            </dl>
          </div>
          <div className="hidden p-4  rounded-lg md:p-8 dark:bg-gray-800" id="about" role="tabpanel" aria-labelledby="about-tab">
            <h2 className="mb-5 text-2xl font-extrabold tracking-tight text-gray-900 dark:text-white">We invest in the worldâ€™s potential</h2>


            <ul role="list" className="space-y-4 text-gray-500 dark:text-gray-400">
              <li className="flex space-x-2 rtl:space-x-reverse items-center">
                <svg className="flex-shrink-0 w-3.5 h-3.5 text-blue-600 dark:text-blue-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z" />
                </svg>
                <span className="leading-tight">Dynamic reports and dashboards</span>
              </li>
              <li className="flex space-x-2 rtl:space-x-reverse items-center">
                <svg className="flex-shrink-0 w-3.5 h-3.5 text-blue-600 dark:text-blue-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z" />
                </svg>
                <span className="leading-tight">Templates for everyone</span>
              </li>
              <li className="flex space-x-2 rtl:space-x-reverse items-center">
                <svg className="flex-shrink-0 w-3.5 h-3.5 text-blue-600 dark:text-blue-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z" />
                </svg>
                <span className="leading-tight">Development workflow</span>
              </li>
              <li className="flex space-x-2 rtl:space-x-reverse items-center">
                <svg className="flex-shrink-0 w-3.5 h-3.5 text-blue-600 dark:text-blue-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z" />
                </svg>
                <span className="leading-tight">Limitless business automation</span>
              </li>
            </ul>
          </div>
          <div className="hidden p-4  rounded-lg dark:bg-gray-800" id="faq" role="tabpanel" aria-labelledby="faq-tab">
            <div id="accordion-flush" data-accordion="collapse" data-active-classes=" dark:bg-gray-800 text-gray-900 dark:text-white" data-inactive-classes="text-gray-500 dark:text-gray-400">
              <h2 id="accordion-flush-heading-1">
                <button type="button" className="flex items-center justify-between w-full py-5 font-medium text-left rtl:text-right text-gray-500 border-b border-gray-200 dark:border-gray-700 dark:text-gray-400" data-accordion-target="#accordion-flush-body-1" aria-expanded="true" aria-controls="accordion-flush-body-1">
                  <span>What is Flowbite?</span>
                  <svg data-accordion-icon className="w-3 h-3 rotate-180 shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5" />
                  </svg>
                </button>
              </h2>
              <div id="accordion-flush-body-1" className="hidden" aria-labelledby="accordion-flush-heading-1">
                <div className="py-5 border-b border-gray-200 dark:border-gray-700">
                  <p className="mb-2 text-gray-500 dark:text-gray-400">Flowbite is an open-source library of interactive components built on top of Tailwind CSS including buttons, dropdowns, modals, navbars, and more.</p>
                  <p className="text-gray-500 dark:text-gray-400">Check out this guide to learn how to <a href="/docs/getting-started/introduction/" className="text-blue-600 dark:text-blue-500 hover:underline">get started</a> and start developing websites even faster with components on top of Tailwind CSS.</p>
                </div>
              </div>
              <h2 id="accordion-flush-heading-2">
                <button type="button" className="flex items-center justify-between w-full py-5 font-medium text-left rtl:text-right text-gray-500 border-b border-gray-200 dark:border-gray-700 dark:text-gray-400" data-accordion-target="#accordion-flush-body-2" aria-expanded="false" aria-controls="accordion-flush-body-2">
                  <span>Is there a Figma file available?</span>
                  <svg data-accordion-icon className="w-3 h-3 rotate-180 shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5" />
                  </svg>
                </button>
              </h2>
              <div id="accordion-flush-body-2" className="hidden" aria-labelledby="accordion-flush-heading-2">
                <div className="py-5 border-b border-gray-200 dark:border-gray-700">
                  <p className="mb-2 text-gray-500 dark:text-gray-400">Flowbite is first conceptualized and designed using the Figma software so everything you see in the library has a design equivalent in our Figma file.</p>
                  <p className="text-gray-500 dark:text-gray-400">Check out the <a href="https://flowbite.com/figma/" className="text-blue-600 dark:text-blue-500 hover:underline">Figma design system</a> based on the utility classes from Tailwind CSS and components from Flowbite.</p>
                </div>
              </div>
              <h2 id="accordion-flush-heading-3">
                <button type="button" className="flex items-center justify-between w-full py-5 font-medium text-left rtl:text-right text-gray-500 border-b border-gray-200 dark:border-gray-700 dark:text-gray-400" data-accordion-target="#accordion-flush-body-3" aria-expanded="false" aria-controls="accordion-flush-body-3">
                  <span>What are the differences between Flowbite and Tailwind UI?</span>
                  <svg data-accordion-icon className="w-3 h-3 rotate-180 shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5" />
                  </svg>
                </button>
              </h2>
              <div id="accordion-flush-body-3" className="hidden" aria-labelledby="accordion-flush-heading-3">
                <div className="py-5 border-b border-gray-200 dark:border-gray-700">
                  <p className="mb-2 text-gray-500 dark:text-gray-400">The main difference is that the core components from Flowbite are open source under the MIT license, whereas Tailwind UI is a paid product. Another difference is that Flowbite relies on smaller and standalone components, whereas Tailwind UI offers sections of pages.</p>
                  <p className="mb-2 text-gray-500 dark:text-gray-400">However, we actually recommend using both Flowbite, Flowbite Pro, and even Tailwind UI as there is no technical reason stopping you from using the best of two worlds.</p>
                  <p className="mb-2 text-gray-500 dark:text-gray-400">Learn more about these technologies:</p>
                  <ul className="ps-5 text-gray-500 list-disc dark:text-gray-400">
                    <li><a href="https://flowbite.com/pro/" className="text-blue-600 dark:text-blue-500 hover:underline">Flowbite Pro</a></li>
                    <li><a href="https://tailwindui.com/" rel="nofollow" className="text-blue-600 dark:text-blue-500 hover:underline">Tailwind UI</a></li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

    </div>
  )
}


---

File: ColorRingLoader.js

import React from 'react';
import { ColorRing } from 'react-loader-spinner';


// ===================== Color Ring Loader =====================
export default function ColorRingLoader() {

    return (
        <ColorRing
            visible={true}
            height="40"
            width="40"
            ariaLabel="blocks-loading"
            wrapperStyle={{}}
            wrapperclassName="blocks-wrapper"
            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}
        />
    )
}

// ===============================================================

---

File: DataLoader.js

"use client"
import React from "react";
import { DNA } from 'react-loader-spinner'


// ===================== DNA Loader =====================
const DataLoader = () => {
    return (
        <div className="top-0 left-0 w-full h-full flex justify-center items-center">

            <DNA
                visible={true}
                height="150"
                width="150"
                ariaLabel="dna-loading"
                wrapperStyle={{}}
                wrapperclassName="dna-wrapper" />
        </div>
    );
};

export default DataLoader;

// ===============================================================

---

File: DisplayImg.js

// ======================== Imports ========================
import React, { useState } from 'react'
import ColorRingLoader from './ColorRingLoader';
// import { downloadImage } from './DownloadFile';
import { faDownload } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';


// ======================== Display Image ========================
export default function DisplayImg({ url, setDisplayImgBoxVisibility }) {
    const [DownloadBtnVisi, setDownloadBtnVisi] = useState(true);

    const ButtonClass = "text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-full text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700";


    // ===================== Return =====================
    return (
        <div className='p-1 w-screen h-screen bg-black bg-opacity-60 fixed top-0 z-50 left-0 object-contain flex justify-center items-center'>
            <img className="max-h-full rounded-xl max-w-full z-40 " src={url} alt="image description" onClick={() => {
                setDisplayImgBoxVisibility(false);
            }} />

            <div className='absolute top-0 right-2 z-50 m-2 flex justify-center items-center flex-row flex-wrap'>

                {/* ===================== Download Btn ===================== */}
                {/* {DownloadBtnVisi ?
                    <button className={ButtonClass} onClick={async () => {
                        setDownloadBtnVisi(false);
                        await downloadImage(url);
                        setDownloadBtnVisi(true);

                    }}>
                        <FontAwesomeIcon icon={faDownload} />
                    </button> :
                    <div className="absolute top-0 right-16 m-2">
                        <ColorRingLoader />
                    </div>
                } */}

                {/* ===================== Close Btn ===================== */}
                <button className={ButtonClass} onClick={() => {
                    setDisplayImgBoxVisibility(false);
                }}>X</button>
            </div>
        </div>
    )
}

// ========================================================================

---

File: NoPost.js

"use client"
import React from 'react';

export default function NoFile() {

    return (
        <main className="grid place-items-center bg-transparent px-6 py-12 lg:px-8" >
            <div className="text-center">
                <h1 className="mt-4 text-3xl font-bold tracking-tight text-gray-900 dark:text-gray-300 sm:text-5xl">No File Available :(</h1>
                <p className="mt-6 text-base leading-7 text-gray-600 dark:text-gray-300">Sorry, we couldnâ€™t find the page youâ€™re looking for.</p>
                <div className="mt-10 flex items-center justify-center gap-x-6">
                </div>
            </div>
        </main>
    )
}



---

File: NotFound.js

"use client"
// ======================== Imports ========================
import Link from 'next/link';
import React from 'react';
import DataLoader from './DataLoader';
import { useAuth } from '../../helper/Auth1';
import ErrorPage from '../../app/(Material)/error/page';

export default function NotFound() {

    const { LoggedInUserData } = useAuth();



    // ======================== Return ========================

    return (<>
        <ErrorPage />
    </>)
}

// ===================================================================


---

File: OptionCard.js

"use client"
import React, { useEffect, useState } from 'react'
import Link from "next/link";


// =========== Option Card ===========*
export default function OptionCard({ data }) {

  function formatName(name) {
    return name
      .split(' ')                // Split the name by spaces
      .map(word =>
        word.charAt(0).toUpperCase() + word.slice(1).toLowerCase() // Uppercase first letter of each word
      )
      .join(' ');                // Join the words back with spaces
  }

  return (
    <div className='max-w-sm min-w-72 w-full sm:min-w-96 min-h-48 h-full p-1'>
      <div className="w-full h-full duration-500 group overflow-hidden relative rounded bg-transparent backdrop-blur-2xl dark:text-white text-black p-4 flex flex-col justify-evenly border-2 border-gray-700 dark:border-gray-300" >
        <div
          className="absolute duration-500 group-hover:blur-none w-32 h-32 rounded-full group-hover:translate-x-12 group-hover:translate-y-12 bg-gray-500 right-1 -bottom-10"
        ></div>
        <div
          className="absolute duration-500 group-hover:blur-none w-12 h-12 rounded-full group-hover:translate-x-12 group-hover:translate-y-2 bg-indigo-700 left-20 bottom-12"
        ></div>
        <div
          className="absolute duration-500 group-hover:blur-none w-28 h-28 rounded-full group-hover:translate-x-8 group-hover:-translate-y-8 dark:bg-indigo-800 bg-indigo-400 right-1 -top-12"
        ></div>
        <div
          className="absolute duration-500 group-hover:blur-none w-12 h-12 dark:bg-sky-700 bg-blue-400 rounded-full group-hover:-translate-x-6 -left-4"
        ></div>

        <div className="z-10 flex flex-col justify-between items-center gap-2 w-full h-full">
          <h5 className="mb-2 text-2xl font-bold tracking-tight text-center">{formatName(data.name)}</h5>
          <p className="mb-2 font-semibold text-center h-full">{formatName(data.description)}</p>

          {/* {data.children.length != 0 ? */}
          {data.type == "folder" ?
            <Link href={`/find/${data.id}`} className="hover:bg-gray-400 dark:bg-gray-800 bg-gray-300 m-2 rounded font-extrabold w-full p-3" >
              Click to See More
            </Link>
            :
            <>
              {data.link != "" ?
                <a href={data.link} target='_blank' className="hover:bg-gray-400 dark:bg-gray-800 bg-gray-300 m-2 rounded font-extrabold w-full p-3" >
                  Click to See More
                </a>
                :
                <p className="inline-flex items-center py-2 text-md sm:text-lg font-bold text-center">Coming Soon
                </p>
              }
            </>
          }

        </div>
      </div >




      {/* <div className="max-w-sm w-96 min-h-40 m-2 h-fit relative drop-shadow-xl overflow-hidden rounded-xl bg-[#3d3c3d]">
      <div className="absolute p-3 flex justify-center flex-col text-white z-[1] opacity-90 rounded-xl inset-0.5 bg-[#323132]">
        <div className="absolute w-56 h-20 bg-white blur-[50px] -left-1/2 -top-1/2"></div>

        <h5 className="mb-2 text-xl font-bold tracking-tight text-white">
          {data.name}
        </h5>

        <p className="mb-3 font-medium text-gray-400">{data.description}</p>


        {data.children ?
          <Link href={NextPageLink} className="inline-flex items-center py-2 text-md font-medium text-center text-white">
            Read more
            <svg className="rtl:rotate-180 w-3.5 h-3.5 ms-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
              <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M1 5h12m0 0L9 1m4 4L9 9" />
            </svg>
          </Link>
          :
          <>
            {data.link != "" ?
              <a href={data.link} target='_blank' className="inline-flex items-center py-2 text-md font-medium text-center text-white">
                Read more
                <svg className="rtl:rotate-180 w-3.5 h-3.5 ms-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
                  <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M1 5h12m0 0L9 1m4 4L9 9" />
                </svg>
              </a>
              :
              <p className="inline-flex items-center py-2 text-md font-medium text-center text-white"> Coming soon
              </p>
            }
          </>
        }

      </div>
    </div> */}
    </div >
  )
}


---

File: ScrollUp.js

"use client";

import { useEffect } from "react";

export default function ScrollUp() {
  useEffect(() => window.document.scrollingElement?.scrollTo(0, 0), []);

  return null;
}


---

File: SectionTitle.js


// =============== Section Ttile ===============*
const SectionTitle = ({ title, paragraph, width = "570px", center, mb = "100px", }) => {
  return (<>
    <div
      className={`wow fadeInUp w-full ${center ? "mx-auto text-center" : ""}`}
      data-wow-delay=".1s"
      style={{ maxWidth: width, marginBottom: mb }}
    >
      <h2 className="mb-4 text-3xl font-bold !leading-tight text-black dark:text-white sm:text-4xl md:text-[45px]">
        {title}
      </h2>
      <p className="text-base font-medium !leading-relaxed text-black dark:text-white md:text-lg">
        {paragraph}
      </p>
    </div>
  </>);
};

export default SectionTitle;


---

File: SelectOption.js

"use client"
import React, { useState } from 'react';


// ==================== Select Options ====================
function SelectOption({ options, onSelect, text = "" }) {
    const [selectedOption, setSelectedOption] = useState('');

    const handleSelectChange = (event) => {
        const value = event.target.value;
        // console.log(value)
        if (value != "off") {
            setSelectedOption(value);
            onSelect(value);
        }
    };
    

    return (
        <div className="flex justify-center flex-col items-center mb-10 cursor-pointer m-4">
            <label className="block mb-2 text-md font-bold text-gray-900 dark:text-white">Select {text} : </label>
            <select
                id="options"
                className="bg-transparent cursor-pointer border md:w-96 w-full border-gray-600 text-sm rounded-lg p-3 dark:bg-gray-800 dark:border-gray-300 dark:placeholder-gray-400 dark:text-white text-black font-bold uppercase"
                value={selectedOption}
                onChange={handleSelectChange}
            >
                <option defaultValue="selected" className='font-bold dark:bg-black dark:text-white text-black' value={"off"}>
                    Select {text}
                </option>
                {options?.map((option, index) => (
                    <option key={index} className='dark:bg-black dark:text-white text-black' value={option.key}>
                        {option.name}
                    </option>
                ))}
            </select>
        </div>
    );
}

export default SelectOption;


---

File: ShareBtn.js

"use client"
import React, { useState } from 'react'
import { useUrl } from 'nextjs-current-url';
import SocialMediaShareBox from './SocialMediaShareBox';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faClose, faSignOutAlt, faBell, faShareSquare } from '@fortawesome/free-solid-svg-icons';

export default function ShareBtn({ ButtonclassName = "", url, icon = false }) {

    const [DisplayShareBoxVisibility, setDisplayShareBoxVisibility] = useState(false);
    const { href: currentUrl, pathname } = useUrl() ?? {};

    const ShowShareBox = async () => {
        setDisplayShareBoxVisibility(true);
    }

    return (<>
        {DisplayShareBoxVisibility &&
            <SocialMediaShareBox link={url ?? currentUrl} setDisplayShareBoxVisibility={setDisplayShareBoxVisibility} />
        }


        <button className={ButtonclassName} onClick={ShowShareBox}>
            {icon ?
                <FontAwesomeIcon icon={faShareSquare} size='xl' style={{ color: '#ffffff' }} />
                :
                "Share"
            }
        </button>
    </>)
}


// ====================================================

---

File: SocialMediaShareBox.jsx

"use client"
// ===================== Imports =====================
import React, { useState } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faClose, faCopy, faCheck, faShareSquare } from '@fortawesome/free-solid-svg-icons';
import { LinkedinShareButton, LinkedinIcon, WhatsappShareButton, WhatsappIcon, EmailShareButton, EmailIcon } from "react-share";



// ===================== Page =====================
export default function SocialMediaShareBox({ link, setDisplayShareBoxVisibility }) {

  const [isCopied, setIsCopied] = useState(false);


  // ===================== Copy To Clipboard =====================
  const copyToClipboard = () => {
    navigator.clipboard.writeText(link)
      .then(() => {
        setIsCopied(true);
      })
      .catch((error) => {
        console.error('Copy failed: ', error);
      });
  };


  // ===================== Share Options =====================
  const ShareOptions = () => {
    if (navigator.share) {
      const shareData = {
        title: 'LastMinuteEngineering',
        text: 'LastMinuteEngineering',
        url: link,
      };
      navigator.share(shareData)
        .then(() => console.log('Successfully shared'))
        .catch((error) => console.error('Error sharing:', error));
    } else {
      console.error('Web Share API is not supported in this browser');
    }
  }


  // ===================== Return =====================
  return (
    <div className='p-1 w-screen h-screen bg-black bg-opacity-60 fixed top-0 z-50 left-0 object-contain flex justify-center items-center' onClick={() => setDisplayShareBoxVisibility(false)}>
      <div className="backdrop-blur-lg border-2 border-white relative text-center p-6 rounded-lg" onClick={(e) => { e.stopPropagation() }}>
        <p className="text-white text-xl mb-4 font-bold">Share</p>
        <div className="flex justify-center flex-row flex-wrap">


          {/* ===================== WhatsApp Share Btn ===================== */}
          <WhatsappShareButton
            url={link}
            quote="Andromeda"
            hashtag="#Andromeda" className='m-4'>
            <WhatsappIcon logofillcolor="white" className='rounded-xl h-20 w-20' />
          </WhatsappShareButton>


          {/* ===================== LinkedIn Share Btn ===================== */}
          {/* <LinkedinShareButton
            url={link}
            quote="Andromeda"
            hashtag="#Andromeda" className='m-4'>
            <LinkedinIcon logofillcolor="white" className='rounded-xl h-20 w-20' />
          </LinkedinShareButton> */}


          {/* ===================== Device Share Btn ===================== */}
          <button className='bg-gray-900 h-20 w-20 rounded-xl m-4' onClick={ShareOptions}>
            <FontAwesomeIcon icon={faShareSquare} size='2xl' style={{ color: '#ffffff' }} />
          </button>


          {/* ===================== Copy Link Btn ===================== */}
          <button className='bg-gray-900 h-20 w-20 rounded-xl m-4' onClick={copyToClipboard}>
            {isCopied ?
              <FontAwesomeIcon icon={faCheck} size='2xl' style={{ color: '#ffffff' }} />
              :
              <FontAwesomeIcon icon={faCopy} size='2xl' style={{ color: '#ffffff' }} />
            }
          </button>


          {/* ===================== Email Share Btn ===================== */}
          <EmailShareButton
            url={link}
            quote="Andromeda"
            hashtag="#Andromeda" className='m-4'>
            <EmailIcon logofillcolor="white" className='rounded-xl h-20 w-20' />
          </EmailShareButton>

        </div>


        {/* ===================== CopyRight ===================== */}
        {/* <p className="text-sm text-left text-gray-400 sm:ml-6 sm:mt-0 mt-2">Â© 2024 Designed By
          <a href="https://soumojitshome.vercel.app/" rel="noopener noreferrer" className="text-gray-400 ml-1" target="_blank">@soumojit_shome</a>
        </p> */}


        {/* ===================== Close Btn ===================== */}
        <button type="button" className="absolute top-0 right-0 mx-4 my-2 z-50 text-white bg-gradient-to-r  font-medium rounded-lg text-sm text-center" onClick={() => {
          setDisplayShareBoxVisibility(false);
        }}>
          <FontAwesomeIcon icon={faClose} size='2xl' style={{ color: '#ffffff' }} />
        </button>


      </div>
    </div>
  )
}

// =================================================================================

---

File: Subscribe.js

"use client"
import { useState } from 'react'
import ColorRingLoader from './ColorRingLoader';
import { CalendarDaysIcon, HandRaisedIcon } from '@heroicons/react/24/outline'
import { subscriptionFunc } from '../../helper/Subscription/subscriptionFunc';

export default function SubscribeSec() {
  const [LoaderVisi, setLoaderVisi] = useState(false);
  const [email, setemail] = useState("");
  const [ShowMessage, setShowMessage] = useState('');

  const SubmitSubs = async () => {
    setLoaderVisi(true);
    if (email != "") {
      try {
        const res = await subscriptionFunc(email);
        // console.log(res.message)
        if (res.success) {
          setShowMessage(res.message);
        }
        else {
          setShowMessage(res.message);
        }
      } catch (error) {
        console.error(error);
        setShowMessage("Error");
      }
      setemail("");
    }
    setLoaderVisi(false);
  }


  return (<>

    <div className="relative isolate overflow-hidden py-6">
      <div className="mx-auto max-w-7xl px-6 lg:px-8">
        <div className="mx-auto grid max-w-2xl grid-cols-1 gap-x-8 gap-y-16 lg:max-w-none lg:grid-cols-2">
          <div className="max-w-xl lg:max-w-lg">
            <h2 className="text-3xl font-bold tracking-tight text-black  dark:text-white sm:text-4xl">Subscribe to receive future updates</h2>
            <p className="mt-4 text-lg leading-8 dark:text-gray-300 font-medium">
              Stay informed about the latest courses, educational resources, and updates from Last Minute Engineering
            </p>
            {/* ================= Show Message ================= */}
            <p className="my-2 text-red-800 dark:text-red-400 text-lg font-bold p-2">{ShowMessage}</p>


            <div className="mt-6 flex max-w-md gap-x-4">
              <label htmlFor="email-address" className="sr-only">
                Email address
              </label>
              <input
                id="email-address"
                name="email"
                type="email"
                required
                value={email}
                onChange={(e) => setemail(e.target.value)}
                placeholder="Enter your email"
                autoComplete="email"
                className="w-full rounded-md border border-gray-700 py-3 px-6 text-base text-black dark:text-white placeholder-gray-500 shadow-one outline-none  dark:bg-gray-900 dark:shadow-signUp"
              />
              {LoaderVisi ? <ColorRingLoader /> :
                <button
                  className="bg-gradient-to-r from-purple-400 to-blue-500 hover:from-pink-500 hover:to-purple-600 text-white font-bold py-4 px-8 rounded-md shadow-lg transform transition-all duration-500 ease-in-out hover:scale-30 hover:brightness-110 hover:animate-pulse" onClick={SubmitSubs}
                >
                  Subscribe
                </button>
              }
            </div>
          </div>
          <dl className="grid grid-cols-1 gap-x-8 gap-y-10 sm:grid-cols-2 lg:pt-2">
            <div className="flex flex-col items-start">
              <div className="rounded-md bg-white/5 p-2 ring-1 ring-white/10">
                <CalendarDaysIcon aria-hidden="true" className="h-6 w-6 text-black  dark:text-white" />
              </div>
              {/* <dt className="mt-4 font-semibold text-black  dark:text-white">Weekly articles</dt> */}
              <dd className="mt-2 leading-7 dark:text-gray-300 font-medium">
                Stay informed about the latest courses, educational resources, and updates from Last Minute Engineering
              </dd>
            </div>
            <div className="flex flex-col items-start">
              <div className="rounded-md bg-white/5 p-2 ring-1 ring-white/10">
                <HandRaisedIcon aria-hidden="true" className="h-6 w-6 text-black  dark:text-white" />
              </div>
              <dt className="mt-4 font-semibold text-black  dark:text-white">No spam</dt>
              {/* <dd className="mt-2 leading-7 text-gray-400">
                Officia excepteur ullamco ut sint duis proident non adipisicing. Voluptate incididunt anim.
              </dd> */}
            </div>
          </dl>
        </div>
      </div>
      {/* <div aria-hidden="true" className="absolute left-1/2 top-0 -z-10 -translate-x-1/2 blur-3xl xl:-top-6">
        <div
          style={{
            clipPath:
              'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
          }}
          className="aspect-[1155/678] w-[72.1875rem] bg-gradient-to-tr from-[#ff80b5] to-[#9089fc] opacity-30"
        />
      </div> */}
    </div>
  </>)
}


---

File: TextRevealDemo.js

"use client"
import TextReveal from "../magicui/text-reveal";

export function TextRevealDemo() {
  return (
    <div className="z-10 flex min-h-24 items-center justify-center">
      <TextReveal text="The most important thing is to enjoy your lifeâ€”to be happyâ€”it's all that matters" />
    </div>
  );
}


---

File: VisitorCount.js

"use client"
import { useAuth } from "../../helper/Auth1";

export default function VisitorCountSec() {

  const { VisitorCountStats } = useAuth();


  return (<>
    {VisitorCountStats.length != 0 &&

      <div className="relative isolate overflow-hidden  text-black dark:text-white py-6 my-6">
        {/* <img
        alt=""
        src="https://images.unsplash.com/photo-1521737604893-d14cc237f11d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&crop=focalpoint&fp-y=.8&w=2830&h=1500&q=80&blend=111827&sat=-100&exp=15&blend-mode=multiply"
        className="absolute inset-0 -z-10 h-full w-full object-cover object-right md:object-center"
      /> */}
        {/* <div
          aria-hidden="true"
          className="hidden sm:absolute sm:-top-10 sm:right-1/2 sm:-z-10 sm:mr-10 sm:block sm:transform-gpu sm:blur-3xl"
        >
          <div
            style={{
              clipPath:
                'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
            }}
            className="aspect-[1097/845] w-[68.5625rem] bg-gradient-to-tr from-[#ff4694] to-[#776fff] opacity-20"
          />
        </div>
        <div
          aria-hidden="true"
          className="absolute -top-52 left-1/2 -z-10 -translate-x-1/2 transform-gpu blur-3xl sm:top-[-28rem] sm:ml-16 sm:translate-x-0 sm:transform-gpu"
        >
          <div
            style={{
              clipPath:
                'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
            }}
            className="aspect-[1097/845] w-[68.5625rem] bg-gradient-to-tr from-[#ff4694] to-[#776fff] opacity-20"
          />
        </div> */}
        <div className="mx-auto max-w-7xl px-6 lg:px-8">
          <div className="mx-auto max-w-2xl lg:mx-0">
            <h2 className="text-4xl font-bold tracking-tight sm:text-6xl">Visitors Count :</h2>
            {/* <p className="mt-6 text-lg leading-8 text-gray-300">
            Anim aute id magna aliqua ad ad non deserunt sunt. Qui irure qui lorem cupidatat commodo. Elit sunt amet
            fugiat veniam occaecat fugiat aliqua.
          </p> */}
          </div>
          <div className="mx-auto mt-10 max-w-2xl lg:mx-0 lg:max-w-none">

            <dl className="mt-16 grid grid-cols-1 gap-8 sm:mt-20 sm:grid-cols-2 lg:grid-cols-3">
              {VisitorCountStats.length != 0 && <>
                {VisitorCountStats.map((stat, index) => (
                  <div key={index} className="flex flex-col-reverse text-center">
                    <dt className="text-lg sm:text-2xl font-bold leading-7">{stat.name}</dt>
                    <dd className="text-3xl sm:text-6xl font-bold leading-9 tracking-tight">{stat.value}</dd>
                  </div>
                ))}
              </>}
            </dl>
          </div>
        </div>
      </div>}
  </>)
}


---

File: WPIconBtn.js

"use client";

import { useEffect } from "react";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faWhatsapp } from '@fortawesome/free-brands-svg-icons';
import socialLinks from '../../Data/socialLinks.json'

export default function WPIconBtn() {
  const socialLinksObj = Object.fromEntries(socialLinks.map(item => [item.id, item.link]));

  return (
    <>
      <a href={socialLinksObj.wpchannel} target="_blank" aria-label="social-link" className="text-white fixed bottom-24 right-4 z-[99] h-10 w-10  text-center bg-green-800 rounded-md p-1" >
        <FontAwesomeIcon className="h-8" icon={faWhatsapp} />
      </a>
    </>
  )
}


---

File: index.js

"use client"
import { useEffect, useState } from "react";
// import NewsLatterBox from "./NewsLatterBox";
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ColorRingLoader from "../Common/ColorRingLoader";
import { OrbitingCirclesDemo } from "./OrbitingCircles";


// ============= Contact =============*
const Contact = () => {

  const [Loader, setLoader] = useState(false);

  useEffect(() => {
    const form = document.forms['submit-to-google-sheet'];
    const handleSubmit = async (e) => {
      e.preventDefault();
      const scriptURL = 'https://docs.google.com/forms/d/e/1FAIpQLSfPm2-tfxBmv0Nmg57q91yMadB--z3hQxOYxNtC9KHYxUa2VQ/formResponse';
      setLoader(true);
      // console.log(new FormData(form))
      try {
        const response = await fetch(scriptURL, {
          method: 'POST',
          body: new FormData(form)
        });
        console.log('Success!', response);
      } catch (error) {
        console.error('Error!', error.message);
      }
      toast.success("Message sent successfully");
      form.reset();
      setLoader(false);
    };


    form.addEventListener('submit', handleSubmit);

    // Cleanup the event listener
    return () => {
      form.removeEventListener('submit', handleSubmit);
    };
  }, []);



  return (<>
    <ToastContainer />
    <section id="contact" className="overflow-hidden py-2">
      <div className="flex flex-wrap">
        {/* <div className="w-full px-4 lg:w-7/12 xl:w-8/12"> */}
        <div className="w-full">
          <div
            className="wow fadeInUp mb-10 rounded-md py-11 px-2 sm:p-4 lg:px-8"
            data-wow-delay=".15s"
          >
            <h2 className="mb-3 text-2xl font-bold text-black dark:text-white sm:text-3xl lg:text-2xl xl:text-3xl">
              Need Help?
            </h2>
            <p className="mb-12 text-base font-medium text-black dark:text-white">
              Our support team will get back to you ASAP via email.
            </p>
            <form name="submit-to-google-sheet" id="myForm">
              <div className="-mx-4 flex flex-wrap">
                <div className="w-full px-4 md:w-1/2">
                  <div className="mb-8">
                    <label
                      htmlFor="name"
                      className="mb-3 block text-lg font-bold text-black dark:text-white"
                    >
                      Your Name
                    </label>
                    <input
                      type="text"
                      name="entry.835474323"
                      required
                      placeholder="Enter your name"
                      className="w-full rounded-md border border-gray-700 py-3 px-6 text-base text-black dark:text-white placeholder-gray-500 shadow-one outline-none  dark:bg-gray-900 dark:shadow-signUp"
                    />
                  </div>
                </div>
                <div className="w-full px-4 md:w-1/2">
                  <div className="mb-8">
                    <label
                      htmlFor="email"
                      className="mb-3 block text-lg font-bold text-black dark:text-white"
                    >
                      Your Email
                    </label>
                    <input
                      type="email"
                      required
                      name="entry.384156307"
                      placeholder="Enter your email"
                      className="w-full rounded-md border border-gray-700 py-3 px-6 text-base text-black dark:text-white placeholder-gray-500 shadow-one outline-none  dark:bg-gray-900 dark:shadow-signUp"
                    />
                  </div>
                </div>
                <div className="w-full px-4">
                  <div className="mb-8">
                    <label
                      htmlFor="message"
                      className="mb-3 block text-lg font-bold text-black dark:text-white"
                    >
                      Your Message
                    </label>
                    <textarea
                      rows={5}
                      required
                      name="entry.1295493666"
                      placeholder="Enter your Message"
                      className="w-full resize-none rounded-md border border-gray-700 py-3 px-6 text-base text-black dark:text-white placeholder-gray-500 shadow-one outline-none  dark:bg-gray-900 dark:shadow-signUp"
                    ></textarea>
                  </div>
                </div>
                <div className="w-full px-4">
                  {Loader ? <ColorRingLoader /> :
                    <button type="submit" value="Register" className="bg-gradient-to-r from-purple-400 to-blue-500 hover:from-pink-500 hover:to-purple-600 text-white font-bold py-4 px-8 rounded-md shadow-lg transform transition-all duration-500 ease-in-out hover:scale-30 hover:brightness-110 hover:animate-pulse">
                      Submit
                    </button>
                  }
                  {/* <p className="dark:text-white text-black font-bold">Message sent successfully</p> */}
                </div>
              </div>
            </form>
          </div>
        </div>
        {/* <div className="w-full px-4 lg:w-5/12 xl:w-4/12">
            <NewsLatterBox />
          </div> */}
      </div>
    </section>


    <OrbitingCirclesDemo />

  </>);
};

export default Contact;


---

File: NewsLatterBox.js

const NewsLatterBox = () => {
  return (
    <div
      className="wow fadeInUp relative z-10 rounded-md bg-blue-900 p-8 dark:bg-blue-900 sm:p-11 lg:p-8 xl:p-11"
      data-wow-delay=".2s"
    >
      <h3 className="mb-4 text-2xl font-bold leading-tight text-black dark:text-white">
        Subscribe to receive future updates
      </h3>
      <p className="mb-11 border-b border-gray-700 border-opacity-25 pb-11 text-base font-medium leading-relaxed text-gray-700 dark:border-white dark:border-opacity-25">
      Stay informed about the latest courses, educational resources, and updates from Last Minute Engineering
      </p>
      <form>
        <input
          type="text"
          name="name"
          placeholder="Enter your name"
          className="mb-4 w-full rounded-md border border-gray-700 border-opacity-10 py-3 px-6 text-base font-medium text-gray-700 placeholder-gray-700 outline-none focus:border-blue-900 focus:border-opacity-100 focus-visible:shadow-none dark:border-white dark:border-opacity-10 dark:bg-[#242B51] focus:dark:border-opacity-50"
        />
        <input
          type="email"
          name="email"
          placeholder="Enter your email"
          className="mb-4 w-full rounded-md border border-gray-700 border-opacity-10 py-3 px-6 text-base font-medium text-gray-700 placeholder-gray-700 outline-none focus:border-blue-900 focus:border-opacity-100 focus-visible:shadow-none dark:border-white dark:border-opacity-10 dark:bg-[#242B51] focus:dark:border-opacity-50"
        />
        <input
          type="submit"
          value="Subscribe"
          className="duration-80 mb-4 w-full cursor-pointer rounded-md border border-transparent bg-blue-900 py-3 px-6 text-center text-base font-medium text-white outline-none transition ease-in-out hover:bg-opacity-80 hover:shadow-signUp focus-visible:shadow-none"
        />
        <p className="text-center text-base font-medium leading-relaxed text-gray-700">
          No spam guaranteed, So please donâ€™t send any spam mail.
        </p>
      </form>
      <div className="absolute top-0 left-0 z-[-1]">
        <svg
          width="370"
          height="596"
          viewBox="0 0 370 596"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <mask
            id="mask0_88:141"
            style={{ maskType: "alpha" }}
            maskUnits="userSpaceOnUse"
            x="0"
            y="0"
            width="370"
            height="596"
          >
            <rect width="370" height="596" rx="2" fill="#1D2144" />
          </mask>
          <g mask="url(#mask0_88:141)">
            <path
              opacity="0.15"
              d="M15.4076 50.9571L54.1541 99.0711L71.4489 35.1605L15.4076 50.9571Z"
              fill="url(#paint0_linear_88:141)"
            />
            <path
              opacity="0.15"
              d="M20.7137 501.422L44.6431 474.241L6 470.624L20.7137 501.422Z"
              fill="url(#paint1_linear_88:141)"
            />
            <path
              opacity="0.1"
              d="M331.676 198.309C344.398 204.636 359.168 194.704 358.107 180.536C357.12 167.363 342.941 159.531 331.265 165.71C318.077 172.69 318.317 191.664 331.676 198.309Z"
              fill="url(#paint2_linear_88:141)"
            />
            <g opacity="0.3">
              <path
                d="M209 89.9999C216 77.3332 235.7 50.7999 258.5 45.9999C287 39.9999 303 41.9999 314 30.4999C325 18.9999 334 -3.50014 357 -3.50014C380 -3.50014 395 4.99986 408.5 -8.50014C422 -22.0001 418.5 -46.0001 452 -37.5001C478.8 -30.7001 515.167 -45 530 -53"
                stroke="url(#paint3_linear_88:141)"
              />
              <path
                d="M251 64.9999C258 52.3332 277.7 25.7999 300.5 20.9999C329 14.9999 345 16.9999 356 5.49986C367 -6.00014 376 -28.5001 399 -28.5001C422 -28.5001 437 -20.0001 450.5 -33.5001C464 -47.0001 460.5 -71.0001 494 -62.5001C520.8 -55.7001 557.167 -70 572 -78"
                stroke="url(#paint4_linear_88:141)"
              />
              <path
                d="M212 73.9999C219 61.3332 238.7 34.7999 261.5 29.9999C290 23.9999 306 25.9999 317 14.4999C328 2.99986 337 -19.5001 360 -19.5001C383 -19.5001 398 -11.0001 411.5 -24.5001C425 -38.0001 421.5 -62.0001 455 -53.5001C481.8 -46.7001 518.167 -61 533 -69"
                stroke="url(#paint5_linear_88:141)"
              />
              <path
                d="M249 40.9999C256 28.3332 275.7 1.79986 298.5 -3.00014C327 -9.00014 343 -7.00014 354 -18.5001C365 -30.0001 374 -52.5001 397 -52.5001C420 -52.5001 435 -44.0001 448.5 -57.5001C462 -71.0001 458.5 -95.0001 492 -86.5001C518.8 -79.7001 555.167 -94 570 -102"
                stroke="url(#paint6_linear_88:141)"
              />
            </g>
          </g>
          <defs>
            <linearGradient
              id="paint0_linear_88:141"
              x1="13.4497"
              y1="63.5059"
              x2="81.144"
              y2="41.5072"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="white" />
              <stop offset="1" stopColor="white" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint1_linear_88:141"
              x1="28.1579"
              y1="501.301"
              x2="8.69936"
              y2="464.391"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="white" />
              <stop offset="1" stopColor="white" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint2_linear_88:141"
              x1="338"
              y1="167"
              x2="349.488"
              y2="200.004"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="white" />
              <stop offset="1" stopColor="white" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint3_linear_88:141"
              x1="369.5"
              y1="-53"
              x2="369.5"
              y2="89.9999"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="white" />
              <stop offset="1" stopColor="white" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint4_linear_88:141"
              x1="411.5"
              y1="-78"
              x2="411.5"
              y2="64.9999"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="white" />
              <stop offset="1" stopColor="white" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint5_linear_88:141"
              x1="372.5"
              y1="-69"
              x2="372.5"
              y2="73.9999"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="white" />
              <stop offset="1" stopColor="white" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint6_linear_88:141"
              x1="409.5"
              y1="-102"
              x2="409.5"
              y2="40.9999"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="white" />
              <stop offset="1" stopColor="white" stopOpacity="0" />
            </linearGradient>
          </defs>
        </svg>
      </div>
    </div>
  );
};

export default NewsLatterBox;


---

File: OrbitingCircles.js

"use client"
import OrbitingCircles from "../magicui/orbiting-circles";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faInstagram, faLinkedin, faTwitter, faYoutube, faThreads, faWhatsapp, faXTwitter } from '@fortawesome/free-brands-svg-icons';
import socialLinks from '../../Data/socialLinks.json'

export function OrbitingCirclesDemo() {
  const socialLinksObj = Object.fromEntries(socialLinks.map(item => [item.id, item.link]));

  return (
    <div className="relative flex h-[500px] w-full flex-col items-center justify-center overflow-hidden p-6">
      <span className="pointer-events-none whitespace-pre-wrap bg-gradient-to-b from-black to-gray-300 bg-clip-text text-center text-8xl font-semibold leading-none text-transparent dark:from-white dark:to-black">
        LME
      </span>

      {/* Inner Circles */}
      <OrbitingCircles
        className="size-[30px] border-none bg-transparent"
        duration={21}
        delay={0}
        radius={80}
      >
        <a href={socialLinksObj.insta} target="_blank">
          <FontAwesomeIcon className="h-10" icon={faInstagram} />
        </a>
      </OrbitingCircles>

      <OrbitingCircles
        className="size-[30px] border-none bg-transparent"
        duration={21}
        delay={7}
        radius={80}
      >
        <a href={socialLinksObj.twitter} target="_blank">
          <FontAwesomeIcon className="h-10" icon={faXTwitter} />
        </a>
      </OrbitingCircles>

      <OrbitingCircles
        className="size-[30px] border-none bg-transparent"
        duration={21}
        delay={14}
        radius={80}
      >
        <a href={socialLinksObj.threads} target="_blank">
          <FontAwesomeIcon className="h-10" icon={faThreads} />
        </a>
      </OrbitingCircles>

      {/* Outer Circles (reverse) */}
      <OrbitingCircles
        className="size-[50px] border-none bg-transparent"
        radius={190}
        duration={21}
        delay={0}
        reverse
      >
        <a href={socialLinksObj.youtube} target="_blank">
          <FontAwesomeIcon className="h-10" icon={faYoutube} />
        </a>
      </OrbitingCircles>

      <OrbitingCircles
        className="size-[50px] border-none bg-transparent"
        radius={190}
        duration={21}
        delay={7}
        reverse
      >
        <a href={socialLinksObj.wpchannel} target="_blank">
          <FontAwesomeIcon className="h-10" icon={faWhatsapp} />
        </a>
      </OrbitingCircles>

      <OrbitingCircles
        className="size-[50px] border-none bg-transparent cursor-pointer"
        radius={190}
        duration={21}
        delay={14}
        reverse
      >
        <a href={socialLinksObj.linkedin} target="_blank">
          <FontAwesomeIcon className="h-10" icon={faLinkedin} />
        </a>
      </OrbitingCircles>
    </div>
  );
}



---

File: CourseCard.js

// "use client"
// import React from 'react'
// import Link from 'next/link';

// export default function CourseCard({ data }) {

//   return (
//     <div className="relative flex w-full max-w-[26rem] flex-col rounded-xl bg-transparent backdrop-blur-md shadow-md shadow-black dark:shadow-white bg-clip-border text-gray-700 dark:text-white">
//       <div className="relative m-2 overflow-hidden text-white shadow-lg rounded-xl bg-blue-gray-500 bg-clip-border shadow-blue-gray-500/40">
//         <img src={data.coverPic} alt="coverPic" className=' h-44 object-top w-full' />
//       </div>
//       <div className="p-3">
//         <div className="flex items-center justify-between mb-3">
//           <h5 className="block font-extrabold text-xl antialiased leading-snug tracking-normal text-blue-gray-900">
//             {data.title}
//           </h5>

//         </div>
//         <p className="block font-semibold text-base antialiased leading-relaxed">
//           {data.shortDesc}
//         </p>

//       </div>
//       <div className="p-3">
//         <a target='_blank' href={data.formLink}
//           className="block w-full select-none rounded-lg bg-gray-900 py-3.5 px-7 text-center align-middle font-sans text-sm font-bold uppercase text-white shadow-md shadow-gray-900/10 transition-all hover:shadow-lg hover:shadow-gray-900/20 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
//         >
//           Visit
//         </a>
//       </div>
//     </div>
//   )
// }


"use client";

import Image from "next/image";
import React from "react";
import { CardBody, CardContainer, CardItem } from "../ui/3d-card";
import Link from "next/link";

export default function CourseCard({ data }) {
  return (
    <CardContainer className="inter-var">
      <CardBody className="bg-transparent backdrop-blur-md relative group/card  dark:hover:shadow-2xl dark:hover:shadow-emerald-500/[0.1] dark:border-white/[0.2] border-black/[0.1] w-auto sm:w-[30rem] h-auto rounded-xl p-2 border">
        <CardItem
          translateZ="30"
          className="text-xl font-bold text-neutral-900 dark:text-white"
        >
          {data.title}
        </CardItem>
        <CardItem
          as="p"
          translateZ="30"
          className="text-neutral-900 font-semibold text-sm max-w-sm mt-2 dark:text-neutral-300"
        >
          {data.shortDesc}
        </CardItem>
        <CardItem translateZ="50" className="w-full mt-4">
          <Image
            src={data.coverPic}
            height="1000"
            width="1000"
            className="h-60 w-full object-top rounded-xl group-hover/card:shadow-xl"
            alt="thumbnail"
          />
        </CardItem>

        <div className="flex -space-x-4 p-4">
          <img className="w-10 h-10 border-2 border-white rounded-full dark:border-gray-800" src="/user_default_pic.jpg" alt="" />
          <img className="w-10 h-10 border-2 border-white rounded-full dark:border-gray-800" src="/user_default_pic.jpg" alt="" />
          <img className="w-10 h-10 border-2 border-white rounded-full dark:border-gray-800" src="/user_default_pic.jpg" alt="" />
          <a className="flex items-center justify-center w-10 h-10 text-xs font-medium text-white bg-gray-700 border-2 border-white rounded-full hover:bg-gray-600 dark:border-gray-800" href="#">+{data.studentCount}</a>
        </div>


        <div className="flex justify-between items-center mt-4">
          <CardItem
            translateZ={20}
            as={Link}
            href={data.formLink}
            target="__blank"
            className="block w-full select-none rounded-lg bg-gray-900 py-3.5 px-7 text-center align-middle font-sans text-sm font-bold uppercase text-white shadow-md shadow-gray-900/10 transition-all hover:shadow-lg hover:shadow-gray-900/20 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
          >
            Visit now â†’
          </CardItem>
          {/* <CardItem
            translateZ={20}
            as="button"
            className="px-4 py-2 rounded-xl bg-black dark:bg-white dark:text-black text-white text-xs font-bold"
          >
            Sign up
          </CardItem> */}
        </div>
      </CardBody>
    </CardContainer>
  );
}


---

File: CourseSec.js

"use client"
import React from 'react';
import CourseJson from "../../Data/Course.json";
import CourseCard from '../Courses/CourseCard';
import SectionTitle from '../Common/SectionTitle';

export default function CourseSec() {
  return (
    <>
      <SectionTitle
        title="Our Courses"
        paragraph="Our teachers will ensure you are well-prepared for your semester exams, helping you achieve excellent marks and a high SGPA. Join us and become part of our family to excel in your academic journey"
        center
        mb="10px"
      />

      <div className="flex justify-center items-center h-fit flex-wrap w-full gap-2 px-1">
        {CourseJson.map((data, index) => (
          <div key={index} >
            <CourseCard data={data} />
          </div>
        ))}
      </div>
    </>
  );
}


---

File: AccountSetting.js

"use client"
// =================== Imports ===================
import React from 'react'
import { useAuth } from '../../helper/Auth1';
import EditUserProfile from './EditUserProfile';


// =================== Account Setting Page ===================*
export default function AccountSetting() {
  const { LoggedInUserData } = useAuth();



  // =================== Return ===================
  return (
    <div className="overflow-hidden mt-4 ">
      {/* <div className="pt-4">
        <h1 className="py-2 text-2xl font-semibold text-black dark:text-white">Account settings</h1>
        <p className="font- text-slate-600 text-black dark:text-white">Lorem ipsum dolor, sit amet consectetur adipisicing elit.</p>
      </div>
      <hr className="mt-4 mb-8" /> */}
      {/* <p className="py-2 text-xl font-semibold text-black dark:text-white">Email Address</p> */}

      {/* =================== Head =================== */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <p className="text-gray-600 dark:text-gray-200">Your email address is <strong>{LoggedInUserData.email}</strong></p>
        {/* <button className="inline-flex text-sm font-semibold text-blue-600 underline decoration-2">Change</button> */}
      </div>

      <hr className="mt-4 mb-8" />


      {/* =================== Edit Profile =================== */}
      <EditUserProfile />

      <hr className="mt-4 mb-8 border-black dark:border-white" />

    </div>
  )
}


// =========================================================

---

File: EditUserProfile.js

"use client"
// ==================== Imports ====================
import { useEffect, useState } from 'react'
import { useAuth } from '../../helper/Auth1';
import NotFound from '../Common/NotFound';
import UserImgUpload from './UserImgUpload';
import { useRouter } from "next/navigation";
import DataLoader from '../Common/DataLoader';
import 'react-toastify/dist/ReactToastify.css';
import SocialProfilesEdit from './SocialProfilesEdit';
import UserCoverImgUpload from './UserCoverImgUpload';
import { ToastContainer, toast } from 'react-toastify';
import { EditProfileSave } from '../../helper/User/EditProfileSave';
import { Upload_File_Func } from '../../helper/Others/UploadFile';


// ==================== Edit User Profile ====================*

export default function EditUserProfile() {
	const router = useRouter();
	const { LoggedInUserData, setLoggedInUserData } = useAuth();

	const [UserName, setUserName] = useState('');
	const [UserFullName, setUserFullName] = useState('');

	const [Birthday, setBirthday] = useState('');
	const [Education, setEducation] = useState('');

	const [UserEmail, setUserEmail] = useState('');
	const [UserAddress, setUserAddress] = useState('');

	const [SocialProfiles, setSocialProfiles] = useState(null);

	const [UserAbout, setUserAbout] = useState('');
	const [UserPic, setUserPic] = useState(null);
	const [CoverPic, setCoverPic] = useState(null);


	const [ImageUpload, setImageUpload] = useState(null);
	const [CoverPicUpload, setCoverPicUpload] = useState(null);


	const [ShowMessage, setShowMessage] = useState('');
	const [Loader, setLoader] = useState(false);
	const [ChangeMade, setChangeMade] = useState(false);

	const UserAboutMaxLength = 2000;

	// =================== Fetch Data ===================
	const fetchUserData = async () => {
		setUserName(LoggedInUserData.userName);
		setUserFullName(LoggedInUserData.displayName);

		setBirthday(LoggedInUserData.birthday ?? "");
		setEducation(LoggedInUserData.education ?? "");

		setUserEmail(LoggedInUserData.email);
		setUserAddress(LoggedInUserData.address ?? "");

		setSocialProfiles(LoggedInUserData.socialProfiles);

		setUserAbout(LoggedInUserData.about ?? "");
		setUserPic(LoggedInUserData.userPicUrl);
		setCoverPic(LoggedInUserData.coverPicUrl);
	};

	useEffect(() => {
		if (LoggedInUserData) {
			fetchUserData();
		}
	}, [LoggedInUserData])


	// =================== Save Change ===================
	const SaveUpdate = async () => {
		setLoader(true);
		try {
			let tempuserpicurl = UserPic;
			let tempusercoverpicurl = CoverPic;

			// ============ Profile Pic Upload ============
			const current_timeSec = new Date().getTime();
			if (ImageUpload) {
				const path = `LastMinuteEngineering/${LoggedInUserData._id}/UserDPs/profile_img_${current_timeSec}_${ImageUpload.name}`;
				const data = await Upload_File_Func(path, ImageUpload);
				if (data.success) {
					tempuserpicurl = data.url;
					setImageUpload(null);
				}
			}
			// ============ Cover Pic Upload ============
			if (CoverPicUpload) {
				const path = `LastMinuteEngineering/${LoggedInUserData._id}/CoverPics/cover_img_${current_timeSec}_${CoverPicUpload.name}`;
				const data = await Upload_File_Func(path, CoverPicUpload);
				if (data.success) {
					tempusercoverpicurl = data.url;
					setCoverPicUpload(null);
				}
			}

			// ============= New Data Obj =============
			const dataObj = {
				"userName": UserName,
				"displayName": UserFullName,
				"birthday": Birthday,
				"education": Education,
				"address": UserAddress,
				"socialProfiles": SocialProfiles,
				"about": UserAbout,
				"userPicUrl": tempuserpicurl,
				"coverPicUrl": tempusercoverpicurl
			}

			const data = await EditProfileSave(dataObj);
			setShowMessage(data.message);
			if (data.success) {
				setLoggedInUserData(data.user);
				toast.success(data.message);
			}
			else {
				toast.error(data.message);
			}
		} catch (error) {
			setShowMessage("Error");
			toast.error(error.message);
		}
		setLoader(false);
	}



	// =================== Change Detect ===================
	useEffect(() => {
		if (
			UserName != LoggedInUserData.userName ||
			UserFullName != LoggedInUserData.displayName ||
			Birthday != (LoggedInUserData.birthday ?? "") ||
			Education != (LoggedInUserData.education ?? "") ||
			UserEmail != LoggedInUserData.email ||
			UserAddress != (LoggedInUserData.address ?? "") ||
			UserAbout != (LoggedInUserData.about ?? "") ||
			ImageUpload || CoverPicUpload
		) {
			setChangeMade(true); // Set changeMade to true if any change detected
		} else {
			setChangeMade(false); // Set changeMade to false if no change detected
		}
	}, [UserName,
		UserFullName,
		Birthday,
		Education,
		UserEmail,
		UserAddress,
		UserAbout,
		ImageUpload,
		CoverPicUpload,
		LoggedInUserData
	]);



	// ==================== Return ====================
	return (<>
		<ToastContainer />

		{LoggedInUserData ?
			<div className="conatiner m-2 py-2">

				<h1 className="mb-4 text-xl font-extrabold text-purple-700 dark:text-purple-300 md:text-md lg:text-lg">Edit Basic Details :</h1>
				<div className="grid gap-6 mb-6 md:grid-cols-2">

					{/* ==================== Edit UserName ==================== */}
					<div>
						<label htmlFor="username" className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300 ">Username :</label>
						<input type="text" id="username" className="bg-transparent border border-gray-300 text-gray-900 dark:text-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 " required
							value={UserName}
							onChange={(e) => {
								const inputUsername = e.target.value.toLowerCase().replace(/[^a-zA-Z0-9]/g, "");
								setUserName(inputUsername);
							}} />
					</div>

					{/* ==================== Edit Full Name ==================== */}
					<div>
						<label htmlFor="full_name" className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300 ">Full Name</label>
						<input type="text" id="full_name" className="bg-transparent border border-gray-300 text-gray-900 dark:text-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required
							value={UserFullName}
							onChange={(e) => setUserFullName(e.target.value.replace(/\s+/g, ' '))}
						/>
					</div>
				</div>


				<div className="grid gap-6 mb-6 md:grid-cols-2">
					{/* ==================== Edit Birthday ==================== */}
					<div>
						<label htmlFor="bday" className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300 ">Birthday :</label>
						<input type="text" id="bday" className="bg-transparent border border-gray-300 text-gray-900 dark:text-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required
							value={Birthday}
							onChange={(e) => setBirthday(e.target.value.replace(/\s+/g, ' '))}
						/>
					</div>


					{/* ==================== Edit Education ==================== */}
					<div>
						<label htmlFor="education" className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300 ">Education :</label>
						<input type="text" id="education" className="bg-transparent border border-gray-300 text-gray-900 dark:text-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required
							value={Education}
							onChange={(e) => setEducation(e.target.value.replace(/\s+/g, ' '))}
						/>
					</div>
				</div>



				<div className="grid gap-6 mb-6 md:grid-cols-2">
					{/* ==================== Read only Email ==================== */}
					<div>
						<label htmlFor="email" className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300 ">Email :</label>
						<input type="email" id="email" className="bg-transparent border border-gray-300 text-gray-900 dark:text-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required readOnly
							defaultValue={UserEmail}
						/>
					</div>


					{/* ==================== Edit Address ==================== */}
					<div>
						<label htmlFor="address" className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300 ">Address :</label>
						<input type="text" id="address" className="bg-transparent border border-gray-300 text-gray-900 dark:text-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required value={UserAddress}
							onChange={(e) => setUserAddress(e.target.value.replace(/\s+/g, ' '))}
						/>
					</div>
				</div>


				{/* ==================== Edit About ==================== */}
				<label htmlFor="about" className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300">Your About :</label>
				<textarea id="about" rows="6" className="block p-2.5 w-full text-sm text-gray-900 dark:text-gray-300 bg-transparent rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500" placeholder="Write your thoughts here..."
					value={UserAbout}
					onChange={(e) => setUserAbout(e.target.value)}
				></textarea>
				{!(UserAbout != '' && UserAbout.length >= 1 && UserAbout.length <= UserAboutMaxLength) &&
					<p className="my-2 text-red-800 dark:text-red-400 font-bold p-2">About must be 1-{UserAboutMaxLength} characters.</p>
				}



				{/* ==================== Social Links ==================== */}
				<hr className="mt-4 mb-8 border-black dark:border-white" />
				<SocialProfilesEdit SocialProfiles={SocialProfiles} setSocialProfiles={setSocialProfiles} setChangeMade={setChangeMade} />



				{/* ==================== Profile Pic Section ==================== */}
				<hr className="mt-4 mb-8 border-black dark:border-white" />
				<UserImgUpload UserPic={UserPic} setImageUpload={setImageUpload} ImageUpload={ImageUpload} />



				{/* ==================== Cover Pic Section ==================== */}
				<hr className="mt-4 mb-8 border-black dark:border-white" />
				<UserCoverImgUpload CoverPic={CoverPic} setCoverPicUpload={setCoverPicUpload} CoverPicUpload={CoverPicUpload} />



				<hr className="mt-4 mb-8 border-black dark:border-white" />
				<p className="my-2 text-red-800 dark:text-red-400 font-bold p-2">{ShowMessage}</p>
				{/* ==================== Save Btn ==================== */}
				{Loader ? <DataLoader /> : <>
					{(ChangeMade && UserAbout.length <= UserAboutMaxLength) &&
						<button
							className="text-white w-full bg-gray-800 hover:bg-gray-900 font-medium rounded-full text-sm px-5 py-2.5 me-2 mb-2" onClick={SaveUpdate}>
							Save
						</button>
					}
				</>}
			</div>
			:
			<NotFound />
		}
	</>)
}

// ================================================================================

---

File: SocialProfilesEdit.js

import React from 'react';



export default function SocialProfilesEdit({ SocialProfiles, setSocialProfiles, setChangeMade }) {


	// ============ Add New Link ============
	const addNewProfile = () => {
		const newProfile = { platform: '', link: '' }; // Define a new profile object with empty values
		setSocialProfiles([...SocialProfiles, newProfile]); // Add the new profile to the array
		setChangeMade(true);
	};

	// ============ Delete Link ============
	const deleteProfile = (index) => {
		const updatedProfiles = [...SocialProfiles];
		updatedProfiles.splice(index, 1); // Remove the profile at the specified index
		setSocialProfiles(updatedProfiles);
		setChangeMade(true);
	};

	// =================== Return ===================
	return (
		<div>
			<h1 className="mt-4 text-xl font-extrabold text-purple-700 dark:text-purple-300 md:text-md lg:text-lg">Edit Social Links :</h1>

			{SocialProfiles && SocialProfiles.length != 0 && SocialProfiles.map((data, index) => (
				<div key={index} className="flex justify-center items-center flex-col mb-6">


					{/* ==================== Social Profiles Platform ==================== */}
					<div className='my-2 w-full flex justify-center items-end flex-row'>
						<div className='w-full'>
							<label htmlFor={`platform-${index}`} className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300">Platform {index + 1}</label>
							<input type="text" id={`platform-${index}`} className="bg-transparent border border-gray-300 text-gray-900 dark:text-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required
								value={data.platform}
								onChange={(e) => {
									const updatedProfiles = [...SocialProfiles];
									updatedProfiles[index].platform = e.target.value;
									setSocialProfiles(updatedProfiles);
									setChangeMade(true);
								}}
							/>
						</div>
						<div className='ml-1'>
							{/* Button to delete profile */}
							<button onClick={() => deleteProfile(index)} className="text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm p-2.5">X</button>
						</div>
					</div>

					{/* ==================== Social Profiles Link ==================== */}
					<div className='my-2 w-full'>
						<label htmlFor={`link-${index}`} className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300">Link {index + 1}</label>
						<input type="text" id={`link-${index}`} className="bg-transparent border border-gray-300 text-gray-900 dark:text-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required
							value={data.link}
							onChange={(e) => {
								const updatedProfiles = [...SocialProfiles];
								updatedProfiles[index].link = e.target.value;
								setSocialProfiles(updatedProfiles);
								setChangeMade(true);
							}}
						/>
					</div>
				</div>
			))}


			{/* =================== Add new profile btn =================== */}
			<button onClick={addNewProfile} className="text-white w-full mt-4 bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-full text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700">+ Add New</button>
		</div>
	);
}


---

File: UserCoverImgUpload.js

import DragDrop from '../FileDragDrop/DragDrop';

export default function UserCoverImgUpload({ CoverPic, setCoverPicUpload, CoverPicUpload }) {

    return (<>
        <h1 className="mt-4 text-xl font-extrabold text-purple-700 dark:text-purple-300 md:text-md lg:text-lg">Edit Cover Pic :</h1>

        {/* =================== Current Cover Pic =================== */}
        <div className="col-span-full mt-2">
            <label htmlFor="photo" className="block text-sm font-medium leading-6 text-gray-900 dark:text-gray-300">
                Current Cover Photo :
            </label>
            <div className="mt-2 flex items-center gap-x-3">
                <div className='w-full  '>
                    <img className="h-auto w-full max-h-72 rounded-lg" src={CoverPic ?? "/cover.jpg"} alt="Cover Pic"
                        onError={(e) => {
                            e.target.onerror = null; // Prevent infinite loop
                            e.target.src = '/cover.jpg'; // Set fallback image source
                        }}
                    />
                </div>
            </div>
        </div>

        {/* =================== Upload Section =================== */}
        <div className="col-span-full mt-4">
            <label htmlFor="cover-photo" className="block text-sm font-medium leading-6 text-gray-900 dark:text-gray-300">
                Upload Cover Photo :
            </label>

            {/* =================== DragDrop or Select  Section =================== */}
            <DragDrop setFileUpload={setCoverPicUpload} FileUpload={CoverPicUpload} Single={true} />

            {/* =================== Cancel Btn =================== */}
            {CoverPicUpload &&
                <button
                    className="text-white w-full bg-red-800  hover:bg-red-900 font-medium rounded-full text-sm px-5 py-2.5 me-2 mb-2" onClick={() => setCoverPicUpload(null)}>
                    Cancel
                </button>
            }
        </div>
    </>)
}


---

File: UserImgUpload.js

import DragDrop from '../FileDragDrop/DragDrop';

export default function UserImgUpload({ UserPic, setImageUpload, ImageUpload }) {

    return (<>

        <h1 className="mt-4 text-xl font-extrabold text-purple-700 dark:text-purple-300 md:text-md lg:text-lg">Edit Profile Pic :</h1>

        {/* =================== Current Pic =================== */}
        <div className="col-span-full mt-2">
            <label htmlFor="photo" className="block text-sm font-medium leading-6 text-gray-900 dark:text-gray-300">
                Current Profile Photo :
            </label>
            <div className="mt-2 flex items-center gap-x-3">

                <img className='h-32 w-32 rounded-full cursor-pointer' src={UserPic ?? "/user_default_pic.jpg"} alt="user_pic"
                    onError={(e) => {
                        e.target.onerror = null; // Prevent infinite loop
                        e.target.src = '/user_default_pic.jpg'; // Set fallback image source
                    }}
                />
            </div>
        </div>

        {/* =================== Upload Section =================== */}
        <div className="col-span-full">
            <label htmlFor="cover-photo" className="block text-sm font-medium leading-6 text-gray-900 dark:text-gray-300">
                Upload Profile Photo :
            </label>

            {/* =================== DragDrop or Select  Section =================== */}
            <DragDrop setFileUpload={setImageUpload} FileUpload={ImageUpload} Single={true} />


            {/* =================== Cancel Btn =================== */}
            {ImageUpload &&
                <button
                    className="text-white w-full bg-red-800  hover:bg-red-900 font-medium rounded-full text-sm px-5 py-2.5 me-2 mb-2" onClick={() => setImageUpload(null)}>
                    Cancel
                </button>
            }

        </div >
    </>)
}


---

File: featuresData.js


const featuresData = [
  {
    id: 1,
    icon: (
      <svg width="40" height="41" viewBox="0 0 40 41" className="fill-current">
        <path
          opacity="0.5"
          d="M37.7778 40.2223H24C22.8954 40.2223 22 39.3268 22 38.2223V20.0001C22 18.8955 22.8954 18.0001 24 18.0001H37.7778C38.8823 18.0001 39.7778 18.8955 39.7778 20.0001V38.2223C39.7778 39.3268 38.8823 40.2223 37.7778 40.2223Z"
        />
        <path d="M23.2222 0C22.6699 0 22.2222 0.447715 22.2222 1V12.3333C22.2222 12.8856 22.6699 13.3333 23.2222 13.3333H39C39.5523 13.3333 40 12.8856 40 12.3333V0.999999C40 0.447714 39.5523 0 39 0H23.2222ZM0 39C0 39.5523 0.447715 40 1 40H16.7778C17.3301 40 17.7778 39.5523 17.7778 39V27.6667C17.7778 27.1144 17.3301 26.6667 16.7778 26.6667H1C0.447716 26.6667 0 27.1144 0 27.6667V39ZM0 21.2222C0 21.7745 0.447715 22.2222 1 22.2222H16.7778C17.3301 22.2222 17.7778 21.7745 17.7778 21.2222V0.999999C17.7778 0.447714 17.3301 0 16.7778 0H1C0.447716 0 0 0.447715 0 1V21.2222Z" />
      </svg>
    ),
    title: "Study Suggestions",
    paragraph:
      "Receive expert suggestions and tips tailored to help you prepare strategically for your exams.",
  },
  {
    id: 1,
    icon: (
      <svg width="40" height="40" viewBox="0 0 40 40" className="fill-current">
        <path
          opacity="0.5"
          d="M20.5914 34.2584C20.2394 34.5172 19.7603 34.5175 19.408 34.2593L4.19163 23.1079C3.8395 22.8498 3.36065 22.85 3.00873 23.1084L1.09802 24.5111C0.553731 24.9107 0.553731 25.7237 1.09802 26.1233L19.4082 39.5655C19.7604 39.824 20.2396 39.824 20.5918 39.5655L38.9029 26.1226C39.4469 25.7232 39.4473 24.9107 38.9036 24.5109L36.9701 23.0889C36.6177 22.8298 36.1378 22.8297 35.7854 23.0888L20.5914 34.2584Z"
        />
        <path d="M19.408 28.931C19.7603 29.1896 20.2396 29.1894 20.5918 28.9306L36.3556 17.3466L38.8979 15.4883C39.4437 15.0894 39.4446 14.275 38.8996 13.8749L20.5918 0.43445C20.2396 0.175911 19.7604 0.175913 19.4082 0.434452L1.09706 13.8774C0.553051 14.2767 0.552712 15.0892 1.09638 15.4891L3.62222 17.3466L19.408 28.931Z" />
      </svg>
    ),
    title: "Semester Preparation Courses",
    paragraph:
      " Enroll in our structured courses specifically designed for semester preparation, covering all essential subjects and topics.",
  },
  {
    id: 1,
    icon: (
      <svg width="40" height="40" viewBox="0 0 40 40" className="fill-current">
        <path
          opacity="0.5"
          d="M20 30C22.75 30 25 32.25 25 35C25 37.75 22.75 40 20 40C17.25 40 15 37.75 15 35C15 32.25 17.25 30 20 30ZM35 30C37.75 30 40 32.25 40 35C40 37.75 37.75 40 35 40C32.25 40 30 37.75 30 35C30 32.25 32.25 30 35 30ZM35 15C37.75 15 40 17.25 40 20C40 22.75 37.75 25 35 25C32.25 25 30 22.75 30 20C30 17.25 32.25 15 35 15Z"
        />
        <path d="M20 15C22.75 15 25 17.25 25 20C25 22.75 22.75 25 20 25C17.25 25 15 22.75 15 20C15 17.25 17.25 15 20 15ZM20 0C22.75 0 25 2.25 25 5C25 7.75 22.75 10 20 10C17.25 10 15 7.75 15 5C15 2.25 17.25 0 20 0ZM5 30C7.75 30 10 32.25 10 35C10 37.75 7.75 40 5 40C2.25 40 0 37.75 0 35C0 32.25 2.25 30 5 30ZM5 15C7.75 15 10 17.25 10 20C10 22.75 7.75 25 5 25C2.25 25 0 22.75 0 20C0 17.25 2.25 15 5 15ZM5 0C7.75 0 10 2.25 10 5C10 7.75 7.75 10 5 10C2.25 10 0 7.75 0 5C0 2.25 2.25 0 5 0ZM35 0C37.75 0 40 2.25 40 5C40 7.75 37.75 10 35 10C32.25 10 30 7.75 30 5C30 2.25 32.25 0 35 0Z" />
      </svg>
    ),
    title: "Interactive Live Sessions",
    paragraph:
      "Participate in live interactive sessions with experienced educators, where you can ask questions, engage in discussions, and get real-time feedback.",
  },
  {
    id: 1,
    icon: (
      <svg width="40" height="42" viewBox="0 0 40 42" className="fill-current">
        <path
          opacity="0.5"
          d="M31.8943 25.3303C34.1233 25.3303 36.1497 26.1409 37.5682 27.762L39.1464 26.1839C39.4614 25.8689 39.9999 26.092 39.9999 26.5374V32.936C39.9999 33.2121 39.7761 33.436 39.4999 33.436H33.1014C32.6559 33.436 32.4328 32.8974 32.7478 32.5825L35.5418 29.7885C34.5286 28.9779 33.3128 28.37 31.8943 28.37C29.0573 28.37 26.8282 30.599 26.8282 33.436C26.8282 36.273 29.0573 38.5021 31.8943 38.5021C33.3549 38.5021 34.6511 37.844 35.6345 36.8244C35.8406 36.6107 36.1187 36.4756 36.4155 36.4756H38.6535C39.0072 36.4756 39.2477 36.833 39.0881 37.1487C37.7427 39.8107 35.0781 41.5417 31.8943 41.5417C27.4361 41.5417 23.7886 37.8941 23.7886 33.436C23.7886 28.9779 27.4361 25.3303 31.8943 25.3303Z"
        />
        <path d="M18.7226 33.436C18.7226 31.3572 19.2513 29.4548 19.9799 27.7285C20.0541 27.5529 19.9264 27.3567 19.7358 27.3567C15.8856 27.3567 12.6433 24.1144 12.6433 20.2642C12.6433 16.414 15.8856 13.1717 19.7358 13.1717C23.586 13.1717 26.8283 16.414 26.8283 20.2642C26.8283 20.5105 27.3897 21.0054 27.6246 20.9313C28.9274 20.5206 30.2827 20.2642 31.8943 20.2642C32.775 20.2642 33.6557 20.4173 34.5364 20.5905C34.7422 20.6309 34.9339 20.4739 34.9339 20.2642C34.9339 19.8699 34.9339 19.3904 34.8787 18.9362C34.827 18.5117 34.9599 18.0636 35.3001 17.8045L38.9868 14.9955C39.3921 14.5902 39.3921 14.1849 39.1894 13.7797L35.1857 6.77316C35.153 6.71599 35.1272 6.65499 35.1021 6.59411C34.9143 6.13895 34.5848 6.08618 34.1135 6.08007C33.9863 6.07841 33.86 6.10354 33.7419 6.15079L29.3957 7.88927C29.0613 8.02302 28.6829 7.96367 28.3887 7.75599C27.6155 7.21023 26.7521 6.75466 25.8752 6.31262C25.5838 6.16573 25.3813 5.88702 25.3335 5.56423L24.6729 1.10574C24.6265 0.792572 24.6613 0.389935 24.3993 0.212245C24.2235 0.0930361 23.9828 0 23.7886 0H15.6829C15.3021 0 14.7424 0.35783 14.6762 0.73726C14.6678 0.785579 14.6661 0.834927 14.6589 0.883445L13.9492 5.67408C13.894 6.04692 13.6313 6.35205 13.2873 6.50604C12.4439 6.88359 11.673 7.42345 10.8193 7.89265C10.5647 8.03264 10.26 8.04143 9.99178 7.92966L5.73545 6.15619C5.61358 6.10541 5.48273 6.07832 5.35072 6.08016C4.8506 6.08715 4.49147 6.1485 4.13234 6.68719L0.0794975 13.7797C-0.123145 14.1849 0.0794976 14.5902 0.484782 14.9955L4.34631 17.9376C4.59456 18.1268 4.74261 18.4216 4.7079 18.7317C4.65068 19.243 4.53762 19.8101 4.53762 20.2642C4.53762 20.6648 4.53762 21.1534 4.59561 21.614C4.64767 22.0276 4.52563 22.4644 4.20164 22.7267L0.484782 25.7355C0.0794976 26.1408 0.0794978 26.5461 0.28214 26.9514L4.33498 34.0439C4.5154 34.4047 4.85644 34.4443 5.35811 34.4486C5.48532 34.4497 5.61152 34.4249 5.72964 34.3776L10.0758 32.6392C10.4102 32.5054 10.7887 32.5648 11.0829 32.7724C11.8561 33.3182 12.7195 33.7738 13.5964 34.2158C13.8878 34.3627 14.0903 34.6414 14.1381 34.9642L14.8616 39.8476C14.8688 39.8961 14.871 39.9453 14.8768 39.994C14.9222 40.3734 15.3145 40.7311 15.8856 40.7311H19.13C19.9191 40.7311 20.4065 39.8523 20.0627 39.1421C19.1998 37.3593 18.7226 35.4573 18.7226 33.436Z" />
      </svg>
    ),
    title: "Community Support",
    paragraph:
      "Join a supportive community of fellow students and educators to share insights, ask questions, and collaborate on projects.",
  },
  {
    id: 1,
    icon: (
      <svg width="40" height="42" viewBox="0 0 40 42" className="fill-current">
        <path
          opacity="0.5"
          d="M31.8943 25.3303C34.1233 25.3303 36.1497 26.1409 37.5682 27.762L39.1464 26.1839C39.4614 25.8689 39.9999 26.092 39.9999 26.5374V32.936C39.9999 33.2121 39.7761 33.436 39.4999 33.436H33.1014C32.6559 33.436 32.4328 32.8974 32.7478 32.5825L35.5418 29.7885C34.5286 28.9779 33.3128 28.37 31.8943 28.37C29.0573 28.37 26.8282 30.599 26.8282 33.436C26.8282 36.273 29.0573 38.5021 31.8943 38.5021C33.3549 38.5021 34.6511 37.844 35.6345 36.8244C35.8406 36.6107 36.1187 36.4756 36.4155 36.4756H38.6535C39.0072 36.4756 39.2477 36.833 39.0881 37.1487C37.7427 39.8107 35.0781 41.5417 31.8943 41.5417C27.4361 41.5417 23.7886 37.8941 23.7886 33.436C23.7886 28.9779 27.4361 25.3303 31.8943 25.3303Z"
        />
        <path d="M18.7226 33.436C18.7226 31.3572 19.2513 29.4548 19.9799 27.7285C20.0541 27.5529 19.9264 27.3567 19.7358 27.3567C15.8856 27.3567 12.6433 24.1144 12.6433 20.2642C12.6433 16.414 15.8856 13.1717 19.7358 13.1717C23.586 13.1717 26.8283 16.414 26.8283 20.2642C26.8283 20.5105 27.3897 21.0054 27.6246 20.9313C28.9274 20.5206 30.2827 20.2642 31.8943 20.2642C32.775 20.2642 33.6557 20.4173 34.5364 20.5905C34.7422 20.6309 34.9339 20.4739 34.9339 20.2642C34.9339 19.8699 34.9339 19.3904 34.8787 18.9362C34.827 18.5117 34.9599 18.0636 35.3001 17.8045L38.9868 14.9955C39.3921 14.5902 39.3921 14.1849 39.1894 13.7797L35.1857 6.77316C35.153 6.71599 35.1272 6.65499 35.1021 6.59411C34.9143 6.13895 34.5848 6.08618 34.1135 6.08007C33.9863 6.07841 33.86 6.10354 33.7419 6.15079L29.3957 7.88927C29.0613 8.02302 28.6829 7.96367 28.3887 7.75599C27.6155 7.21023 26.7521 6.75466 25.8752 6.31262C25.5838 6.16573 25.3813 5.88702 25.3335 5.56423L24.6729 1.10574C24.6265 0.792572 24.6613 0.389935 24.3993 0.212245C24.2235 0.0930361 23.9828 0 23.7886 0H15.6829C15.3021 0 14.7424 0.35783 14.6762 0.73726C14.6678 0.785579 14.6661 0.834927 14.6589 0.883445L13.9492 5.67408C13.894 6.04692 13.6313 6.35205 13.2873 6.50604C12.4439 6.88359 11.673 7.42345 10.8193 7.89265C10.5647 8.03264 10.26 8.04143 9.99178 7.92966L5.73545 6.15619C5.61358 6.10541 5.48273 6.07832 5.35072 6.08016C4.8506 6.08715 4.49147 6.1485 4.13234 6.68719L0.0794975 13.7797C-0.123145 14.1849 0.0794976 14.5902 0.484782 14.9955L4.34631 17.9376C4.59456 18.1268 4.74261 18.4216 4.7079 18.7317C4.65068 19.243 4.53762 19.8101 4.53762 20.2642C4.53762 20.6648 4.53762 21.1534 4.59561 21.614C4.64767 22.0276 4.52563 22.4644 4.20164 22.7267L0.484782 25.7355C0.0794976 26.1408 0.0794978 26.5461 0.28214 26.9514L4.33498 34.0439C4.5154 34.4047 4.85644 34.4443 5.35811 34.4486C5.48532 34.4497 5.61152 34.4249 5.72964 34.3776L10.0758 32.6392C10.4102 32.5054 10.7887 32.5648 11.0829 32.7724C11.8561 33.3182 12.7195 33.7738 13.5964 34.2158C13.8878 34.3627 14.0903 34.6414 14.1381 34.9642L14.8616 39.8476C14.8688 39.8961 14.871 39.9453 14.8768 39.994C14.9222 40.3734 15.3145 40.7311 15.8856 40.7311H19.13C19.9191 40.7311 20.4065 39.8523 20.0627 39.1421C19.1998 37.3593 18.7226 35.4573 18.7226 33.436Z" />
      </svg>
    ),
    title: "Resources",
    paragraph:
      "Access a variety of study materials, including lecture notes, tutorials, and reference guides to aid your learning",
  },
  {
    id: 1,
    icon: (
      <svg width="40" height="45" viewBox="0 0 40 45" className="fill-current">
        <path
          opacity="0.5"
          d="M31.579 37.8948C28.6737 37.8948 26.3158 35.5369 26.3158 32.6317C26.3158 31.9159 26.4527 31.2306 26.7135 30.6015C26.7959 30.4027 26.7605 30.1711 26.6083 30.019L24.9997 28.4103C24.7766 28.1872 24.4043 28.2238 24.2487 28.4983C23.5588 29.7145 23.1579 31.125 23.1579 32.6317C23.1579 37.2843 26.9263 41.0527 31.579 41.0527V43.0035C31.579 43.449 32.1175 43.6721 32.4325 43.3571L35.9622 39.8273C36.1575 39.6321 36.1575 39.3155 35.9622 39.1202L32.4325 35.5905C32.1175 35.2755 31.579 35.4986 31.579 35.9441V37.8948ZM31.579 24.2106V22.2598C31.579 21.8144 31.0404 21.5913 30.7254 21.9063L27.1957 25.436C27.0004 25.6313 27.0004 25.9479 27.1957 26.1431L30.7254 29.6729C31.0404 29.9879 31.579 29.7648 31.579 29.3193V27.3685C34.4842 27.3685 36.8421 29.7264 36.8421 32.6317C36.8421 33.3474 36.7052 34.0328 36.4444 34.6618C36.362 34.8606 36.3974 35.0922 36.5496 35.2444L38.1582 36.853C38.3813 37.0762 38.7536 37.0396 38.9092 36.7651C39.5991 35.5488 40 34.1384 40 32.6317C40 27.9791 36.2316 24.2106 31.579 24.2106Z"
        />
        <path d="M18.9474 32.6316C18.9474 35.4705 19.8099 38.0969 21.2941 40.2796C21.7904 41.0094 21.3054 42.1053 20.4229 42.1053H4.21053C1.87368 42.1053 0 40.2316 0 37.8947V4.21053C0 1.89474 1.87368 0 4.21053 0H6.31579H16.8421H29.4737C31.7895 0 33.6842 1.87368 33.6842 4.21053V17.9544C33.6842 18.5032 33.1804 18.9474 32.6316 18.9474C25.0737 18.9474 18.9474 25.0737 18.9474 32.6316Z" />
      </svg>
    ),
    title: "Review and Earn",
    paragraph:
      "Through platforms like College Dunai, College Batch, and Shiksha, you can win cash prizes by giving reviews of your college. Share your experiences and insights to help others while earning rewards",
  },
];
export default featuresData;


---

File: index.js

"use client"
import SectionTitle from "../Common/SectionTitle";
import Link from "next/link";
import Image from "next/image";
import featuresData from "./featuresData";
import SingleFeature from "./SingleFeature";
import socialLinks from '../../Data/socialLinks.json'
import { BackgroundBeamsDemo } from "../Common/BackgroundBeamsDemo";

const socialLinksObj = Object.fromEntries(socialLinks.map(item => [item.id, item.link]));


// =============== Feature ===============*
const Features = () => {
  const btnClass = "rounded-md bg-gray-300 p-3 text-base font-semibold text-black duration-300 ease-in-out hover:bg-black/30 dark:bg-white/20 dark:text-white dark:hover:bg-white/30"

  return (<>
    <section id="features" className="w-full py-10 relative">

      <div className="mb-10 mx-auto w-full flex justify-center flex-col gap-4 items-center overflow-hidden rounded px-2 lg:w-[80vw] h-fit">
        <Link href="/collegereview" className="flex justify-center flex-col gap-3 items-center overflow-hidden rounded px-2 lg:w-[80vw] h-72">
          <img src="/images/collegereview/collegereviewbanner.jpg" alt="image"
            className='object-contain object-center items-center'
          />
        </Link>
        <Link href="/collegereview"
          className="bg-gradient-to-r from-purple-400 to-blue-500 hover:from-pink-500 hover:to-purple-600 text-white font-bold py-4 px-8 rounded-md shadow-lg transform transition-all duration-500 ease-in-out hover:scale-30 hover:brightness-110 hover:animate-pulse"
        >
          Click to Review
        </Link>
      </div>


      <div className="container">
        <SectionTitle
          title="Main Features"
          paragraph="Download and utilize detailed study guides, lecture notes, textbooks, and practice problems to reinforce your learning."
          center
          mb="40px"
        />

        <div className="flex flex-row items-center justify-center gap-2 flex-wrap w-full mb-10">

          <Link
            href="/oneway/syllabus"
            className={btnClass}
          >
            Syllabus
          </Link>
          <Link
            href="/oneway/organizers"
            className={btnClass}
          >
            Organizer
          </Link>
          <Link
            href="/oneway/pyqs"
            className={btnClass}
          >
            PYQs
          </Link>
          <Link
            href="/oneway/books"
            className={btnClass}
          >
            Books
          </Link>
          <Link
            href="/oneway/CA-Questions"
            className={btnClass}
          >
            CA Questions
          </Link>
          <Link
            href="/notice"
            className={btnClass}
          >
            Notice
          </Link>
          <Link
            href="/oneway/suggestions"
            className={btnClass}
          >
            Study Resources
          </Link>
          {/* <Link
            href="/find"
            className={btnClass}
          >
            MARs & MOOCs
          </Link> */}
          <Link
            href="/gpa"
            className={btnClass}
          >
            GPA Calculator
          </Link>
          <Link
            href="/courses"
            className={btnClass}
          >
            Courses
          </Link>
          <Link
            href="/links"
            className={btnClass}
          >
            Links
          </Link>
          <a href={socialLinksObj.becomeacontributor} target="_blank" className={btnClass} >
            Become a Contributor
          </a>

        </div>

        <div className={"mb-10 mx-auto w-full flex justify-center flex-col gap-4 items-center overflow-hidden rounded px-2 lg:w-[80vw] h-fit"}>
          <Link href="/find"
            className={btnClass}
          >
            Click to Find More
          </Link>
        </div>


        <div className="grid grid-cols-1 gap-x-8 gap-y-14 md:grid-cols-2 lg:grid-cols-3">
          {featuresData.map((feature, index) => (
            <SingleFeature key={index} feature={feature} />
          ))}
        </div>

      </div>
      {/* <BackgroundBeamsDemo /> */}
    </section >
  </>);
};

export default Features;


---

File: SingleFeature.js


// =============== Single Feature ===============*
const SingleFeature = ({ feature }) => {
  const { icon, title, paragraph } = feature;
  return (
    <div className="w-full">
      <div className="wow fadeInUp" data-wow-delay=".15s">
        <div className="mb-10 flex h-[70px] w-[70px] items-center justify-center rounded-md bg-blue-500 bg-opacity-10 text-blue-800">
          {icon}
        </div>
        <h3 className="mb-5 text-xl font-bold text-black dark:text-white sm:text-2xl lg:text-xl xl:text-2xl">
          {title}
        </h3>
        <p className="pr-[10px] text-base font-medium leading-relaxed text-black dark:text-white">
          {paragraph}
        </p>
      </div>
    </div>
  );
};

export default SingleFeature;


---

File: DragDrop.js

"use client"
import React, { useCallback } from 'react';
import Swal from 'sweetalert2';
import { useDropzone } from 'react-dropzone';
import { PhotoIcon } from '@heroicons/react/24/solid';
import SelectedImageCarousel from './SelectedImageCarousel';


// =================== Drag and Drop or Select File / Files Section =================== 
export default function DragDrop({ FileUpload, setFileUpload, Single }) {

	const maxSize = 1024 * 1024 * 10; // 10MB
	const maxFiles = 10;


	// =================== Only Images and Videos ===================
	const isImageOrVideo = (file) => {
		return file.type.startsWith('image/') || file.type.startsWith('video/');
	};

	// =================== Handel Accepted Files ===================
	const handleacceptedFiles = (acceptedFiles) => {
		// =================== Single File ===================
		if (Single) {
			if (acceptedFiles.length > 0 && isImageOrVideo(acceptedFiles[0]) && acceptedFiles[0].size <= maxSize) {
				setFileUpload(acceptedFiles[0]);
			}
		}
		// =================== Multiple Files ===================
		else {
			const newFiles = [...FileUpload, ...acceptedFiles.filter(file => isImageOrVideo(file) && file.size <= maxSize)];
			if (newFiles.length > maxFiles) {
				Swal.fire({
					icon: 'error',
					title: 'Oops... :(',
					text: `Cannot upload more than ${maxFiles} images and videos!`,
				});
			} else {
				// Update the file upload list
				setFileUpload(newFiles);
			}
		}
	};


	// ==================== Drag Drop File Handel ====================
	const onDrop = (acceptedFiles) => {
		handleacceptedFiles(acceptedFiles);
	};


	const { getRootProps, getInputProps, isDragActive } = useDropzone({
		onDrop,
		maxSize,
		maxFiles,
	});


	// ==================== Input File Field Handel Change ====================
	const handelChange = (e) => {
		const files = e.target.files;
		if (files.length > 0) {
			handleacceptedFiles(Array.from(files));
		}
	}


	// ======================== Return ========================
	return (
		<div className='rounded-lg mb-2 flex flex-wrap justify-center items-center'>
			{/* =================== Multiple Files =================== */}
			{(!Single && FileUpload.length != 0) &&
				<SelectedImageCarousel setFileUpload={setFileUpload} FileUpload={FileUpload} />
			}

			{/* =================== Drop Area =================== */}
			<div {...getRootProps()} className={`m-2 relative w-full cursor-pointer rounded-md font-semibold text-indigo-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-indigo-600 focus-within:ring-offset-2 hover:text-indigo-500 border-2 border-dashed ${isDragActive ? 'border-indigo-600' : 'dark:border-yellow-600 border-red-600'}`} >
				<div className="flex justify-center rounded-lg border border-dashed border-gray-900/25 px-6 py-10">
					<div className="text-center">

						{/* =================== Single File =================== */}
						{(Single && FileUpload) ?
							<img className='max-w-96 max-h-96 rounded-lg' src={URL.createObjectURL(FileUpload)} alt="Selected" />
							:
							<>
								<PhotoIcon className="mx-auto h-12 w-12 text-gray-300" aria-hidden="true" />
								<div className="mt-4 flex text-sm leading-6 text-gray-600 dark:text-gray-300">
									<input
										{...getInputProps()}
										id="file-upload"
										onChange={handelChange}
										name="file-upload"
										type="file"
										className="sr-only"
									/>
									<span>Click or drag & drop to Upload
										{Single ? ' a file' : ' files'}
									</span>
								</div>
								{/* <p className="pl-1">or drag and drop</p> */}
								<p className="text-xs leading-5 text-gray-600 dark:text-gray-300">Up to 10 MB</p>
							</>
						}
					</div>
				</div>
			</div>
		</div>
	)
}

// ================================================================================

---

File: SelectedImageCarousel.js

"use client"
// ===================== Imports =====================
import React, { useEffect, useState } from 'react'
import DisplayImg from '../Common/DisplayImg';
import { faExpand } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { Carousel, IconButton } from "@material-tailwind/react";


// ========================= Page =========================
export default function SelectedImageCarousel({ setFileUpload, FileUpload }) {
	const [DisplayImgLink, setDisplayImgLink] = useState(null);
	const [DisplayImgBoxVisibility, setDisplayImgBoxVisibility] = useState(false);


	// ===================== Display Image Box =====================
	const DisplayImgBox = (link) => {
		setDisplayImgLink(link);
		setDisplayImgBoxVisibility(true);
	}


	// =================== Remove Image ===================
	const removeImage = (indexToRemove) => {
		setFileUpload(prevFileUpload => prevFileUpload.filter((_, index) => index != indexToRemove));
	};



	// ========================= Return =========================
	return (<>
		{DisplayImgBoxVisibility &&
			<DisplayImg url={DisplayImgLink} setDisplayImgBoxVisibility={setDisplayImgBoxVisibility} />
		}

		<div className='h-60 md:w-96 w-full'>
			{/* ===================== Carousel ===================== */}
			{FileUpload.length != 0 &&
				<Carousel className="h-full w-full object-cover object-center"
					autoplay={false}
					interval={10000}

					// ===================== Prev Arrow =====================
					prevArrow={({ handlePrev }) => (<>
						{FileUpload.length > 1 && <>
							<IconButton
								variant="text"
								color="white"
								size="lg"
								onClick={handlePrev}
								className="!absolute top-2/4 left-1 -translate-y-2/4" >
								<svg
									xmlns="http://www.w3.org/2000/svg"
									fill="#000000"
									viewBox="0 0 32 32"
									strokeWidth={1}
									stroke="currentColor"
									className="h-8 w-8">
									<path d="M16,2C8.3,2,2,8.3,2,16s6.3,14,14,14s14-6.3,14-14S23.7,2,16,2z M18.7,19.5c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.5,0.3-0.7,0.3
	                        s-0.5-0.1-0.7-0.3l-4.2-4.2c-0.4-0.4-0.4-1,0-1.4l4.2-4.2c0.4-0.4,1-0.4,1.4,0s0.4,1,0,1.4L15.2,16L18.7,19.5z"/>
								</svg>
							</IconButton>
						</>}
					</>)}

					// ===================== Next Arrow =====================
					nextArrow={({ handleNext }) => (<>
						{FileUpload.length > 1 && <>
							<IconButton
								variant="text"
								color="white"
								size="lg"
								onClick={handleNext}
								className="!absolute top-2/4 !right-1 -translate-y-2/4">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									fill="#000000"
									viewBox="0 0 32 32"
									strokeWidth={1}
									stroke="currentColor"
									className="h-8 w-8">
									<path d="M16,2C8.3,2,2,8.3,2,16s6.3,14,14,14s14-6.3,14-14S23.7,2,16,2z M18.9,16.7l-4.2,4.2c-0.2,0.2-0.5,0.3-0.7,0.3
	                        s-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4l3.5-3.5l-3.5-3.5c-0.4-0.4-0.4-1,0-1.4s1-0.4,1.4,0l4.2,4.2C19.3,15.7,19.3,16.3,18.9,16.7z
	                        "/>
								</svg>
							</IconButton>
						</>}
					</>)}


					// ===================== Navigation =====================
					navigation={({ setActiveIndex, activeIndex, length }) => (<>
						{FileUpload.length > 1 && <>
							<div className="absolute bottom-4 left-2/4 z-10 flex -translate-x-2/4 gap-2">
								{new Array(length).fill("").map((_, i) => (
									<span
										key={i}
										className={`block h-1 cursor-pointer rounded-2xl transition-all content-[''] ${activeIndex === i ? "w-4 bg-white" : "w-2 bg-white/50"
											}`}
										onClick={() => setActiveIndex(i)}
									/>
								))}
							</div>
						</>}
					</>)}
				>



					{/* ===================== Images / Videos ===================== */}
					{FileUpload.map((file, index) => (
						<div key={index} className='h-full w-full object-cover object-center'	>
							<div className='z-10 relative ml-auto'>
								{file.type.startsWith('image/') &&
									<button className='z-10 absolute top-2 left-2 text-white bg-black px-1 rounded-lg bg-opacity-70 ' title='Full Screen Image' onClick={() => { DisplayImgBox(URL.createObjectURL(file)) }}>
										<FontAwesomeIcon icon={faExpand} size='lg' />
									</button>
								}
								<button
									onClick={() => removeImage(index)}
									className="absolute top-2 right-2 bg-red-500 text-white rounded-full w-6 h-6 flex justify-center items-center"
								>
									X
								</button>
							</div>

							{/* =================== Image =================== */}
							{file.type.startsWith('image/') &&
								<img
									src={URL.createObjectURL(file)}
									alt="image"
									className="object-cover object-center h-full w-full md:rounded-lg"
								/>
							}
							{/* =================== Video =================== */}
							{file.type.startsWith('video/') &&
								<video
									controls
									className="object-fit object-center h-full w-full md:rounded-lg"
								>
									<source src={URL.createObjectURL(file)} type={file.type} />
									Your browser does not support the video tag.
								</video>
							}

						</div>
					))}
				</Carousel>
			}
		</div>
	</>)
}

// ===========================================================================

---

File: index.js

import Image from "next/image";
import Link from "next/link";
import InstallAppCard from "./InstallAppCard";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faInstagram, faLinkedin, faTwitter, faYoutube, faThreads, faWhatsapp, faXTwitter, faWhatsappSquare, faTelegramPlane } from '@fortawesome/free-brands-svg-icons';
import socialLinks from '../../Data/socialLinks.json'


// ============== Footer ==============*
const Footer = () => {
  const socialLinksObj = Object.fromEntries(socialLinks.map(item => [item.id, item.link]));


  return (<>
    <InstallAppCard />
    <footer className="wow fadeInUp relative z-10 bg-blue-900 bg-opacity-5 pt-16 md:pt-20 lg:pt-24"
      data-wow-delay=".1s" >
      <div className="container">
        <div className="-mx-4 flex flex-wrap">
          <div className="w-full px-4 md:w-1/2 lg:w-4/12 xl:w-5/12">
            <div className="mb-12 max-w-[360px] lg:mb-16">
              <Link href="/" className="mb-8 inline-block">
                <Image
                  src="/images/logo/mainlogo.png"
                  alt="logo"
                  width={60}
                  height={60}
                  className="rounded-full"
                />
              </Link>

              <p className="mb-4 text-md font-bold leading-relaxed dark:text-white text-black">
                Version : 1.0.0
              </p>
              <p className="mb-9 text-base font-medium leading-relaxed dark:text-white text-black">
                No matter your engineering discipline, Last Minute Engineering has the courses you need to stay ahead and succeed.
              </p>

              <div className="flex items-center flex-wrap gap-2">
                <a href={socialLinksObj.insta} target="_blank" aria-label="social-link" className="mr-6 dark:text-white text-black hover:text-blue-900 text-lg" >
                  <FontAwesomeIcon className="h-6" icon={faInstagram} />
                </a>

                <a href={socialLinksObj.twitter} target="_blank" aria-label="social-link" className="mr-6 dark:text-white text-black hover:text-blue-900 text-lg" >
                  <FontAwesomeIcon className="h-6" icon={faXTwitter} />
                </a>

                <a href={socialLinksObj.youtube} target="_blank" aria-label="social-link" className="mr-6 dark:text-white text-black hover:text-blue-900 text-lg" >
                  <FontAwesomeIcon className="h-6" icon={faYoutube} />
                </a>

                <a href={socialLinksObj.wpgroup} target="_blank" aria-label="social-link" className="mr-6 dark:text-white text-black hover:text-blue-900 text-lg" >
                  <FontAwesomeIcon className="h-6" icon={faWhatsapp} />
                </a>

                <a href={socialLinksObj.wpchannel} target="_blank" aria-label="social-link" className="mr-6 dark:text-white text-black hover:text-blue-900 text-lg" >
                  <FontAwesomeIcon className="h-6" icon={faWhatsappSquare} />
                </a>

                <a href={socialLinksObj.threads} target="_blank" aria-label="social-link" className="mr-6 dark:text-white text-black hover:text-blue-900 text-lg" >
                  <FontAwesomeIcon className="h-6" icon={faThreads} />
                </a>

                <a href={socialLinksObj.linkedin} target="_blank" aria-label="social-link" className="mr-6 dark:text-white text-black hover:text-blue-900 text-lg" >
                  <FontAwesomeIcon className="h-6" icon={faLinkedin} />
                </a>

                <a href={socialLinksObj.telegram} target="_blank" aria-label="social-link" className="mr-6 dark:text-white text-black hover:text-blue-900 text-lg" >
                  <FontAwesomeIcon className="h-6" icon={faTelegramPlane} />
                </a>

              </div>
            </div>
          </div>

          <div className="w-full px-4 sm:w-1/2 md:w-1/2 lg:w-2/12 xl:w-2/12">
            <div className="mb-12 lg:mb-16">
              <h2 className="mb-10 text-xl font-bold text-black dark:text-white">
                Useful Links
              </h2>
              <ul>
                <li>
                  <Link href="/" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Home{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/find" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Get Started{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/courses" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Courses{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/find" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Study Material{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/oneway/syllabus" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Syllabus{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/oneway/organizers" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Organizers{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/error" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    MARs & MOOCs{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/oneway/pyqs" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    PYQs{" "}
                  </Link>
                </li>

              </ul>
            </div>
          </div>

          <div className="w-full px-4 sm:w-1/2 md:w-1/2 lg:w-2/12 xl:w-2/12">
            <div className="mb-12 lg:mb-16">
              <h2 className="mb-10 text-xl font-bold text-black dark:text-white">
                Useful Links
              </h2>
              <ul>
                <li>
                  <Link href="/gpa" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    GPA Calculator{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/oneway/books" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Books{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/oneway/CA-Questions" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    CA Questions{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/oneway/notes" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Notes{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/notice" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Notice{" "}
                  </Link>
                </li>

                <li>
                  <Link href="/collegereview" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    College Review{" "}
                  </Link>
                </li>
                <li>
                  <a href={socialLinksObj.becomeacontributor} target="_blank" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Become a Contributor{" "}
                  </a>
                </li>
                <li>
                  <Link href="/contact" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Contact Us{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/users" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Users{" "}
                  </Link>
                </li>

              </ul>
            </div>
          </div>



          <div className="w-full px-4 md:w-1/2 lg:w-4/12 xl:w-3/12">
            <div className="mb-12 lg:mb-16">
              <h2 className="mb-10 text-xl font-bold text-black dark:text-white">
                Support & Help
              </h2>
              <ul>
                <li>
                  <Link href="/contact" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Open Support Ticket{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/contact" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Terms of Use{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/about" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    About Us{" "}
                  </Link>
                </li>
                <li>
                  <Link href="/links" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Links{" "}
                  </Link>
                </li>
                <li>
                  <Link href="https://lastminuteengineeringblog.vercel.app/" target="_blank" className="mb-4 inline-block text-base font-medium dark:text-white text-black hover:text-blue-900" >
                    {" "}
                    Blog{" "}
                  </Link>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
      <div className="bg-gray-300 dark:bg-gray-950 backdrop:blur-2xl py-6">
        <div className="container">
          <p className="text-center font-bold text-base dark:text-white text-black">
            Â©Copyright 2024 LastMinuteEngineering
          </p>
        </div>
      </div>
      <div className="absolute right-0 top-14 z-[-1]">
        <svg
          width="55"
          height="99"
          viewBox="0 0 55 99"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <circle opacity="0.8" cx="49.5" cy="49.5" r="49.5" fill="#959CB1" />
          <mask
            id="mask0_94:899"
            style={{ maskType: "alpha" }}
            maskUnits="userSpaceOnUse"
            x="0"
            y="0"
            width="99"
            height="99"
          >
            <circle
              opacity="0.8"
              cx="49.5"
              cy="49.5"
              r="49.5"
              fill="#4A6CF7"
            />
          </mask>
          <g mask="url(#mask0_94:899)">
            <circle
              opacity="0.8"
              cx="49.5"
              cy="49.5"
              r="49.5"
              fill="url(#paint0_radial_94:899)"
            />
            <g opacity="0.8" filter="url(#filter0_f_94:899)">
              <circle cx="53.8676" cy="26.2061" r="20.3824" fill="white" />
            </g>
          </g>
          <defs>
            <filter
              id="filter0_f_94:899"
              x="12.4852"
              y="-15.1763"
              width="82.7646"
              height="82.7646"
              filterUnits="userSpaceOnUse"
              colorInterpolationFilters="sRGB"
            >
              <feFlood floodOpacity="0" result="BackgroundImageFix" />
              <feBlend
                mode="normal"
                in="SourceGraphic"
                in2="BackgroundImageFix"
                result="shape"
              />
              <feGaussianBlur
                stdDeviation="10.5"
                result="effect1_foregroundBlur_94:899"
              />
            </filter>
            <radialGradient
              id="paint0_radial_94:899"
              cx="0"
              cy="0"
              r="1"
              gradientUnits="userSpaceOnUse"
              gradientTransform="translate(49.5 49.5) rotate(90) scale(53.1397)"
            >
              <stop stopOpacity="0.47" />
              <stop offset="1" stopOpacity="0" />
            </radialGradient>
          </defs>
        </svg>
      </div>
      <div className="absolute left-0 bottom-24 z-[-1]">
        <svg
          width="79"
          height="94"
          viewBox="0 0 79 94"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <rect
            opacity="0.3"
            x="-41"
            y="26.9426"
            width="66.6675"
            height="66.6675"
            transform="rotate(-22.9007 -41 26.9426)"
            fill="url(#paint0_linear_94:889)"
          />
          <rect
            x="-41"
            y="26.9426"
            width="66.6675"
            height="66.6675"
            transform="rotate(-22.9007 -41 26.9426)"
            stroke="url(#paint1_linear_94:889)"
            strokeWidth="0.7"
          />
          <path
            opacity="0.3"
            d="M50.5215 7.42229L20.325 1.14771L46.2077 62.3249L77.1885 68.2073L50.5215 7.42229Z"
            fill="url(#paint2_linear_94:889)"
          />
          <path
            d="M50.5215 7.42229L20.325 1.14771L46.2077 62.3249L76.7963 68.2073L50.5215 7.42229Z"
            stroke="url(#paint3_linear_94:889)"
            strokeWidth="0.7"
          />
          <path
            opacity="0.3"
            d="M17.9721 93.3057L-14.9695 88.2076L46.2077 62.325L77.1885 68.2074L17.9721 93.3057Z"
            fill="url(#paint4_linear_94:889)"
          />
          <path
            d="M17.972 93.3057L-14.1852 88.2076L46.2077 62.325L77.1884 68.2074L17.972 93.3057Z"
            stroke="url(#paint5_linear_94:889)"
            strokeWidth="0.7"
          />
          <defs>
            <linearGradient
              id="paint0_linear_94:889"
              x1="-41"
              y1="21.8445"
              x2="36.9671"
              y2="59.8878"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0.62" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint1_linear_94:889"
              x1="25.6675"
              y1="95.9631"
              x2="-42.9608"
              y2="20.668"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0.51" />
            </linearGradient>
            <linearGradient
              id="paint2_linear_94:889"
              x1="20.325"
              y1="-3.98039"
              x2="90.6248"
              y2="25.1062"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0.62" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint3_linear_94:889"
              x1="18.3642"
              y1="-1.59742"
              x2="113.9"
              y2="80.6826"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0.51" />
            </linearGradient>
            <linearGradient
              id="paint4_linear_94:889"
              x1="61.1098"
              y1="62.3249"
              x2="-8.82468"
              y2="58.2156"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0.62" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint5_linear_94:889"
              x1="65.4236"
              y1="65.0701"
              x2="24.0178"
              y2="41.6598"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0.51" />
            </linearGradient>
          </defs>
        </svg>
      </div>
    </footer>
  </>);
};

export default Footer;


---

File: InstallAppCard.js

"use client"
import React, { useState, useEffect } from 'react';
import { useAuth } from '../../helper/Auth1';


// =========== Install App Card ===========*
export default function InstallAppCard() {
  const { InstallDeferredPrompt, setInstallDeferredPrompt } = useAuth();

  const handleInstallClick = () => {
    if (InstallDeferredPrompt) {
      InstallDeferredPrompt.prompt();
      InstallDeferredPrompt.userChoice.then((choiceResult) => {
        if (choiceResult.outcome === 'accepted') {
          console.log('User accepted the install prompt');
        } else {
          console.log('User dismissed the install prompt');
        }
        // setInstallDeferredPrompt(null);
      });
    }
  };



  return (<>
    {InstallDeferredPrompt &&
      <div className="w-full md:w-[80vw] mx-auto p-4 text-center sm:p-8">
        <h5 className="mb-2 text-3xl font-bold text-gray-900 dark:text-white">Work fast from anywhere</h5>
        <p className="mb-5 text-base text-gray-500 sm:text-lg dark:text-gray-400">Stay up to date and move work forward with LastMinuteEngineering on iOS, Android, MAC, and Windows. Download the app today with one-click to install.</p>
        <div className="items-center justify-center space-y-4 sm:flex sm:space-y-0 sm:space-x-4 rtl:space-x-reverse">


          <button onClick={handleInstallClick} className="w-full sm:w-auto bg-gray-700 hover:bg-gray-700  text-white rounded-lg inline-flex items-center justify-center px-4 py-2.5 dark:bg-gray-800 dark:hover:bg-gray-600 ">
            <svg className="me-3 w-7 h-7" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="google-play" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M325.3 234.3L104.6 13l280.8 161.2-60.1 60.1zM47 0C34 6.8 25.3 19.2 25.3 35.3v441.3c0 16.1 8.7 28.5 21.7 35.3l256.6-256L47 0zm425.2 225.6l-58.9-34.1-65.7 64.5 65.7 64.5 60.1-34.1c18-14.3 18-46.5-1.2-60.8zM104.6 499l280.8-161.2-60.1-60.1L104.6 499z"></path></svg>
            <div className="text-left rtl:text-right">
              <div className="mb-1 text-xs text-center">LME App</div>
              <div className="-mt-1 font-sans text-sm font-semibold">Click to Download</div>
            </div>
          </button>
        </div>
      </div>
    }

  </>)
}


---

File: CGPATable.js

"use client"
import React, { useEffect, useState } from 'react';

const SemArr = [
  {
    "name": "1st Semester",
    "CreditPoint": 0,
    "Credit": 0
  },
  {
    "name": "2nd Semester",
    "CreditPoint": 0,
    "Credit": 0
  },
  {
    "name": "3rd Semester",
    "CreditPoint": 0,
    "Credit": 0
  },
  {
    "name": "4th Semester",
    "CreditPoint": 0,
    "Credit": 0
  },
  {
    "name": "5th Semester",
    "CreditPoint": 0,
    "Credit": 0
  },
  {
    "name": "6th Semester",
    "CreditPoint": 0,
    "Credit": 0
  },
  {
    "name": "7th Semester",
    "CreditPoint": 0,
    "Credit": 0
  },
  {
    "name": "8th Semester",
    "CreditPoint": 0,
    "Credit": 0
  }
]


export default function CGPATable() {
  const [ShowGPA, setShowGPA] = useState(0);
  const [DataSet, setDataSet] = useState(SemArr);


  const DisplayGPA = () => {
    let totalCreditPoint = 0;
    let totalCredit = 0;

    DataSet.forEach((data, index) => {
      totalCreditPoint += data.CreditPoint;
      totalCredit += data.Credit;
    })
    const gpa = (totalCreditPoint / totalCredit).toFixed(2);
    setShowGPA(gpa);
  }


  return (
    <div className="relative overflow-x-auto shadow-md sm:rounded-lg text-center">
      <table className="w-full sm:w-[90vw] mx-auto text-md text-left text-gray-500 dark:text-gray-400">

        <thead className="font-bold text-gray-700 uppercase bg-gray-50 dark:bg-gray-800 dark:text-gray-200">
          <tr>
            <th scope="col" className="px-6 py-3">
              Semester
            </th>
            <th scope="col" className="px-6 py-3">
              SGPA
            </th>

          </tr>
        </thead>

        <tbody>
          {SemArr.map((data, index) => (<>
            <tr key={index} className="bg-transparent border-b font-medium text-black whitespace-nowrap dark:text-white dark:border-gray-700">
              <td className="px-6 py-4">
                {data.name} Credit Point/Index
              </td>
              <td className="px-6 py-4">
                <input type="number" className="bg-gray-50 border-2 border-blue-700 text-gray-900 text-sm rounded-lg  block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" value={data.CreditPoint}
                  onChange={(e) => {
                    const temp = [...DataSet];
                    temp[index].CreditPoint = parseFloat(e.target.value);
                    setDataSet(temp);
                  }}
                />
              </td>
            </tr>
            <tr key={index} className="bg-transparent border-b font-medium text-black whitespace-nowrap dark:text-white dark:border-gray-700">
              <td className="px-6 py-4">
                {data.name} Credit
              </td>
              <td className="px-6 py-4">
                <input type="number" className="bg-gray-50 border-2 border-blue-700 text-gray-900 text-sm rounded-lg  block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" value={data.Credit}
                  onChange={(e) => {
                    const temp = [...DataSet];
                    temp[index].Credit = parseFloat(e.target.value);
                    setDataSet(temp)
                  }}
                />
              </td>
            </tr>
          </>))}

        </tbody>
      </table>


      {/* <hr className="mt-4 mb-8 border-black dark:border-white" /> */}

      {ShowGPA != 0 && <>
        <p className="my-2 text-black text-md dark:text-white font-bold p-2">
          Your CGPA is : {ShowGPA}
        </p>
        <p className="my-2 text-black text-md dark:text-white font-bold p-2">
          Your Percentage is : {((ShowGPA - 0.75) * 10).toFixed(2)} %</p>
      </>}


      <div className='flex w-full justify-center items-center flex-wrap'>
        <button onClick={DisplayGPA} className="text-white w-fit mt-4 bg-gray-800 hover:bg-gray-900  font-medium rounded-full text-md px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:border-gray-700">Calculate</button>

        {/* <button onClick={fetchSub} className="text-white w-fit mt-4 bg-gray-800 hover:bg-gray-900  font-medium rounded-full text-md px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:border-gray-700">Reset</button> */}
      </div>

    </div>

  )
}


---

File: GPAOptions.js

"use client"
import React from 'react'


const GPAOptionsArr = [
  {
    "name": "SGPA"
  },
  {
    "name": "YGPA"
  },
  {
    "name": "CGPA"
  }
]

export default function GPAOptions({ setGPAtype, GPAtype }) {
  return (
    <div className="flex justify-center items-center flex-row flex-wrap w-full p-4 gap-2">

      {GPAOptionsArr.map((data, index) => (
        <div className="inline-flex items-center" key={index}>
          <label className="relative flex items-center p-3 rounded-full cursor-pointer uppercase" htmlFor={index}>

            <input name="type" type="radio" value={data.name}
              className="before:content[''] peer relative h-8 w-8 cursor-pointer appearance-none rounded-full border border-gray-900/10 bg-gray-900/5 p-0 text-gray-900 dark:invert transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:before:bg-gray-900"
              id={index} onChange={(e) => setGPAtype(e.target.value)} />
            <span
              className="absolute text-gray-900 dark:text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                className="w-full h-full scale-105">
                <path fillRule="evenodd"
                  d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm13.36-1.814a.75.75 0 10-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 00-1.06 1.06l2.25 2.25a.75.75 0 001.14-.094l3.75-5.25z"
                  clipRule="evenodd"></path>
              </svg>
            </span>
          </label>
          <label className="mt-px font-bold text-black dark:text-white cursor-pointer select-none" htmlFor={index}>
            <p className="block font-sans text-xl antialiased font-bold leading-relaxed text-blue-gray-400">
              {data.name}
            </p>
          </label>
        </div>
      ))}
    </div>
  )
}


---

File: SGPASec.js

"use client"
import React, { useEffect, useState } from 'react'
import SelectOption from '../Common/SelectOption';
import SGPATable from './SGPATable';
import depDetailsJson from "../../Data/depDetails.json";

export default function SGPASec({ SelectedDep }) {
  const [SemOptions, setSemOptions] = useState([]);
  const [SelectedSem, setSelectedSem] = useState("");

  useEffect(() => {
    const sems = Object.keys(depDetailsJson[SelectedDep])
    const data = [];
    sems.forEach(dep => {
      data.push({
        "name": dep,
        "key": dep
      });
    });
    setSemOptions(data);
  }, [SelectedDep])



  const handleSemSelect = (key) => {
    setSelectedSem(key);
  }

  return (
    <>
      <SelectOption text={"Sem"} options={SemOptions} onSelect={handleSemSelect} />

      {SelectedSem != "" &&
        <SGPATable SelectedDep={SelectedDep} SelectedSem={SelectedSem} />
      }
    </>
  )
}


---

File: SGPATable.js

"use client"
import React, { useEffect, useState } from 'react';
import depDetailsJson from "../../Data/depDetails.json"
import SelectOption from '../Common/SelectOption';

export default function SGPATable({ SelectedDep, SelectedSem }) {
  const [DataSet, setDataSet] = useState([]);
  const [ShowGPA, setShowGPA] = useState(0);

  const fetchSub = () => {
    setDataSet([]);

    const result = [];
    const electivesMap = {};

    const subjects = depDetailsJson[SelectedDep][SelectedSem].filter(data => data.subName)

    subjects.forEach(subject => {
      if (subject.isElective) {
        if (!electivesMap[subject.set]) {
          electivesMap[subject.set] = {
            needOptions: true,
            subCredits: subject.subCredits,
            Optionsdata: [],
            getMarks: 0
          };
        }
        electivesMap[subject.set].Optionsdata.push({
          "name": subject.subName,
          "key": subject.subName
        });
      } else {
        result.push({
          ...subject,
          getMarks: 0
        });
      }
    });
    Object.keys(electivesMap).forEach(set => {
      result.push(electivesMap[set]);
    });
    // console.log(result);
    setDataSet(result);
  }


  useEffect(() => {
    fetchSub();
  }, [SelectedDep, SelectedSem])


  const DisplayGPA = () => {
    let creditIndex = 0;
    let credits = 0;

    DataSet.forEach((data, index) => {
      creditIndex += data.getMarks * data.subCredits;
      credits += data.subCredits;
    })
    const gpa = (creditIndex / credits).toFixed(2);
    setShowGPA(gpa);
  }


  return (
    <div className="relative overflow-x-auto shadow-md sm:rounded-lg text-center">
      <table className="w-full sm:w-[90vw] mx-auto text-md text-left text-gray-500 dark:text-gray-400">

        <thead className="font-bold text-gray-700 uppercase bg-gray-50 dark:bg-gray-800 dark:text-gray-200">
          <tr>
            <th scope="col" className="px-6 py-3">
              Subject
            </th>
            <th scope="col" className="px-6 py-3">
              Credit
            </th>
            <th scope="col" className="px-6 py-3">
              Marks Obtained Out of 10
            </th>

          </tr>
        </thead>

        <tbody>

          {DataSet.length != 0 && DataSet.map((data, index) => (
            <tr key={index} className="bg-transparent border-b font-medium text-black  dark:text-white dark:border-gray-700">
              <td className="px-6 py-4">
                {data.needOptions ?
                  <SelectOption text={"Sub"} options={data.Optionsdata} onSelect={() => { }} />
                  :
                  data.subName
                }

              </td>
              <td className="px-6 py-4">
                {data.subCredits}
              </td>
              <td className="px-6 py-4">
                <input type="number" className="bg-gray-50 border-2 border-blue-700 text-gray-900 text-sm rounded-lg  block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" value={DataSet[index].getMarks ?? 0}
                  onChange={(e) => {
                    const temp = [...DataSet];
                    temp[index].getMarks = parseFloat(e.target.value);
                    setDataSet(temp);
                  }}
                />
              </td>
            </tr>
          ))}

        </tbody>
      </table>


      {/* <hr className="mt-4 mb-8 border-black dark:border-white" /> */}
      {ShowGPA != 0 && <>
        <p className="my-2 text-black text-md dark:text-white font-bold p-2">
          Your SGPA is : {ShowGPA}
        </p>
        <p className="my-2 text-black text-md dark:text-white font-bold p-2">
          Your Percentage is : {((ShowGPA - 0.75) * 10).toFixed(2)} %</p>
      </>}


      <div className='flex w-full justify-center items-center flex-wrap'>
        <button onClick={DisplayGPA} className="text-white w-fit mt-4 bg-gray-800 hover:bg-gray-900  font-medium rounded-full text-md px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:border-gray-700">Calculate</button>

        {/* <button onClick={fetchSub} className="text-white w-fit mt-4 bg-gray-800 hover:bg-gray-900  font-medium rounded-full text-md px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:border-gray-700">Reset</button> */}
      </div>

    </div>

  )
}


---

File: YGPATable.js

"use client"
import React, { useEffect, useState } from 'react';

export default function YGPATable() {
  const [ShowGPA, setShowGPA] = useState(0);

  const [OddSemCreditIndex, setOddSemCreditIndex] = useState(0);
  const [OddSemCredit, setOddSemCredit] = useState(0);

  const [EvenSemCreditIndex, setEvenSemCreditIndex] = useState(0);
  const [EvenSemCredit, setEvenSemCredit] = useState(0);


  const DisplayGPA = () => {
    const gpa = ((OddSemCreditIndex + EvenSemCreditIndex) / (OddSemCredit + EvenSemCredit)).toFixed(2);
    setShowGPA(gpa);
  }


  return (
    <div className="relative overflow-x-auto shadow-md sm:rounded-lg text-center">
      <table className="w-full sm:w-[90vw] mx-auto text-md text-left text-gray-500 dark:text-gray-400">

        <thead className="font-bold text-gray-700 uppercase bg-gray-50 dark:bg-gray-800 dark:text-gray-200">
          <tr>
            <th scope="col" className="px-6 py-3">
              Semester
            </th>
            <th scope="col" className="px-6 py-3">
              SGPA
            </th>

          </tr>
        </thead>

        <tbody>

          <tr className="bg-transparent border-b font-medium text-black whitespace-nowrap dark:text-white dark:border-gray-700">
            <td className="px-6 py-4">
              Odd Sem Credit Point/Index
            </td>
            <td className="px-6 py-4">
              <input type="number" className="bg-gray-50 border-2 border-blue-700 text-gray-900 text-sm rounded-lg  block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" value={OddSemCreditIndex}
                onChange={(e) => setOddSemCreditIndex(parseFloat(e.target.value))}
              />
            </td>
          </tr>
          <tr className="bg-transparent border-b font-medium text-black whitespace-nowrap dark:text-white dark:border-gray-700">
            <td className="px-6 py-4">
              Odd Sem Credit
            </td>
            <td className="px-6 py-4">
              <input type="number" className="bg-gray-50 border-2 border-blue-700 text-gray-900 text-sm rounded-lg  block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" value={OddSemCredit}
                onChange={(e) => setOddSemCredit(parseFloat(e.target.value))}
              />
            </td>
          </tr>


          <tr className="bg-transparent border-b font-medium text-black whitespace-nowrap dark:text-white dark:border-gray-700">
            <td className="px-6 py-4">
              Even Sem Credit Point/Index
            </td>
            <td className="px-6 py-4">
              <input type="number" className="bg-gray-50 border-2 border-blue-700 text-gray-900 text-sm rounded-lg  block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" value={EvenSemCreditIndex}
                onChange={(e) => setEvenSemCreditIndex(parseFloat(e.target.value))}
              />
            </td>
          </tr>
          <tr className="bg-transparent border-b font-medium text-black whitespace-nowrap dark:text-white dark:border-gray-700">
            <td className="px-6 py-4">
              Even Sem Credit
            </td>
            <td className="px-6 py-4">
              <input type="number" className="bg-gray-50 border-2 border-blue-700 text-gray-900 text-sm rounded-lg  block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" value={EvenSemCredit}
                onChange={(e) => setEvenSemCredit(parseFloat(e.target.value))}
              />
            </td>
          </tr>


        </tbody>
      </table>


      {/* <hr className="mt-4 mb-8 border-black dark:border-white" /> */}

      {ShowGPA != 0 && <>
        <p className="my-2 text-black text-md dark:text-white font-bold p-2">
          Your YGPA is : {ShowGPA}
        </p>
        <p className="my-2 text-black text-md dark:text-white font-bold p-2">
          Your Percentage is : {((ShowGPA - 0.75) * 10).toFixed(2)} %</p>
      </>}


      <div className='flex w-full justify-center items-center flex-wrap'>
        <button onClick={DisplayGPA} className="text-white w-fit mt-4 bg-gray-800 hover:bg-gray-900  font-medium rounded-full text-md px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:border-gray-700">Calculate</button>

        {/* <button onClick={fetchSub} className="text-white w-fit mt-4 bg-gray-800 hover:bg-gray-900  font-medium rounded-full text-md px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:border-gray-700">Reset</button> */}
      </div>

    </div>

  )
}


---

File: index.js

"use client";
import { useEffect, useState } from "react";
import Image from "next/image";
import Link from "next/link";
import menuData from "./menuData";
import ThemeToggler from "./ThemeToggler";
import { useAuth } from "../../helper/Auth1";



const Header = () => {
  // Navbar toggle
  const { LoggedInUserData, setLoggedInUserData } = useAuth();
  const [navbarOpen, setNavbarOpen] = useState(false);

  // submenu handler
  const [openIndex, setOpenIndex] = useState(-1);
  const handleSubmenu = (index) => {
    if (openIndex === index) {
      setOpenIndex(-1);
    } else {
      setOpenIndex(index);
    }
  };

  return (<>
    <header className="sticky top-0 left-0 z-50 flex w-full h-20 items-center bg-transparent backdrop-blur-lg bg-opacity-60" >
      <div className="px-2 w-full relative flex items-center justify-evenly">

        {/* ================ logo and name ================ */}
        <div className="w-fit px-2 ">
          <Link href="/" className="header-logo w-full py-2 font-bold text-sm sm:text-lg dark:text-white text-black flex justify-center items-center flex-row gap-2" >
            <Image src="/images/logo/mainlogo.png"
              alt="logo"
              width={60}
              height={60}
              className="rounded-full"
            />
            LastMinuteEngineering
          </Link>
        </div>

        {/* ================ Links ================ */}
        <div className="flex w-fit items-center justify-evenly px-4 ">
          <button
            onClick={() => setNavbarOpen(prev => !prev)} id="navbarToggler" aria-label="Mobile Menu"
            className="absolute right-2 top-1/2 block translate-y-[-50%] rounded-lg px-3 py-[6px] lg:hidden"
          >
            <span
              className={`relative my-1.5 block h-0.5 w-[30px] bg-black transition-all duration-300 dark:bg-white ${navbarOpen ? " top-[7px] rotate-45" : " "}`}
            />
            <span
              className={`relative my-1.5 block h-0.5 w-[30px] bg-black transition-all duration-300 dark:bg-white ${navbarOpen ? "opacity-0 " : " "}`}
            />
            <span
              className={`relative my-1.5 block h-0.5 w-[30px] bg-black transition-all duration-300 dark:bg-white ${navbarOpen ? " top-[-8px] -rotate-45" : " "}`}
            />
          </button>
          <nav id="navbarCollapse" className={`navbar absolute right-0 z-30 w-[250px] rounded border-[.5px] dark:bg-gray-900 bg-white py-4 px-6 duration-300 lg:visible lg:static lg:w-auto lg:border-none lg:!bg-transparent lg:p-0 lg:opacity-100 ${navbarOpen
            ? "visibility top-full opacity-100 max-h-[60vh] overflow-auto" : "invisible top-[120%] opacity-0"}`} >

            <ul className="block lg:flex lg:space-x-12 px-2 font-bold">
              <li className="py-2">
                <ThemeToggler />
              </li>
              {menuData.map((menuItem, index) => (
                <li key={index} className="group relative">
                  {menuItem.path ?
                    <Link
                      href={menuItem.path}
                      className={`flex py-2 text-base text-black group-hover:opacity-70 dark:text-white lg:mr-0 lg:inline-flex lg:py-6 lg:px-0`} >
                      {menuItem.title}
                    </Link>
                    : <>
                      <a onClick={() => handleSubmenu(index)}
                        className="flex cursor-pointer items-center justify-between py-2 text-base text-black group-hover:opacity-70 dark:text-white lg:mr-0 lg:inline-flex lg:py-6 lg:px-0"
                      >
                        {menuItem.title}
                        <span className="pl-3">
                          <svg width="15" height="14" viewBox="0 0 15 14">
                            <path
                              d="M7.81602 9.97495C7.68477 9.97495 7.57539 9.9312 7.46602 9.8437L2.43477 4.89995C2.23789 4.70308 2.23789 4.39683 2.43477 4.19995C2.63164 4.00308 2.93789 4.00308 3.13477 4.19995L7.81602 8.77183L12.4973 4.1562C12.6941 3.95933 13.0004 3.95933 13.1973 4.1562C13.3941 4.35308 13.3941 4.65933 13.1973 4.8562L8.16601 9.79995C8.05664 9.90933 7.94727 9.97495 7.81602 9.97495Z"
                              fill="currentColor"
                            />
                          </svg>
                        </span>
                      </a>
                      <div
                        className={`max-h-full  lg:max-h-[60vh] overflow-auto submenu relative top-full left-0 rounded-md bg-white transition-[top] duration-300 group-hover:opacity-100 dark:bg-gray-900 lg:invisible lg:absolute lg:top-[110%] lg:block lg:w-[250px] lg:p-4 lg:opacity-0 lg:shadow-lg lg:group-hover:visible lg:group-hover:top-full ${openIndex === index ? "block" : "hidden"
                          }`}
                      >
                        {menuItem.submenu.map((submenuItem, index) => (
                          <Link href={submenuItem.path} key={index}
                            className="block rounded py-2.5 text-sm text-black hover:opacity-70 dark:text-white lg:px-3"
                          >
                            {submenuItem.title}
                          </Link>
                        ))}

                      </div>
                    </>}
                </li>
              ))}
              <li className="group relative">
                {LoggedInUserData ?
                  <Link href={`/user/${LoggedInUserData.userName}`} className="flex py-2 text-base text-black group-hover:opacity-70 dark:text-white lg:mr-0 lg:inline-flex lg:py-6 lg:px-0">
                    My Profile
                  </Link>
                  :
                  <Link href="/signin" className="flex py-2 text-base text-black group-hover:opacity-70 dark:text-white lg:mr-0 lg:inline-flex lg:py-6 lg:px-0">
                    Sign In
                  </Link>
                }
              </li>

            </ul>
          </nav>
        </div>

        {/* ================ Sign In btn ================ */}
        {/* <div className="flex items-center justify-end">

          {LoggedInUserData ?
            <Link href={`/user/${LoggedInUserData.userName}`} className="hidden py-3 px-7 text-base font-bold text-black hover:opacity-70 dark:text-white md:block">
              My Profile
            </Link>
            :
            <Link href="/signin" className="hidden py-3 px-7 text-base font-bold text-black hover:opacity-70 dark:text-white md:block">
              Sign In
            </Link>
          }

        </div> */}
      </div>
    </header >
  </>);
};

export default Header;


---

File: menuData.js


const menuData = [
  {
    title: "Home",
    path: "/",
    newTab: false,
  },
  {
    title: "Get Started",
    path: "/find",
    newTab: false,
  },
  {
    title: "College Review",
    path: "/collegereview",
    newTab: false,
  },
  {
    title: "More",
    newTab: false,
    submenu: [
      {
        title: "Blog",
        path: "https://lastminuteengineeringblog.vercel.app/",
        newTab: false,
      },
      {
        title: "About Us",
        path: "/about",
        newTab: false,
      },
      {
        title: "Courses",
        path: "/courses",
        newTab: false,
      },
      {
        title: "Get Started",
        path: "/find",
        newTab: false,
      },
      {
        title: "Install App",
        path: "/installapp",
        newTab: false,
      },
      {
        title: "Notice",
        path: "/notice",
        newTab: false,
      },
      {
        title: "Contact Page",
        path: "/contact",
        newTab: false,
      },
      {
        title: "Syllabus",
        path: "/oneway/syllabus",
        newTab: false,
      },
      {
        title: "Organizers",
        path: "/oneway/organizers",
        newTab: false,
      },
      {
        title: "MARs & MOOCs",
        path: "/find",
        newTab: false,
      },
      {
        title: "PYQs",
        path: "/oneway/pyqs",
        newTab: false,
      },
      {
        title: "CA Questions",
        path: "/oneway/CA-Questions",
        newTab: false,
      },
      {
        title: "GPA Calculator",
        path: "/gpa",
        newTab: false,
      },
      {
        title: "Books",
        path: "/oneway/books",
        newTab: false,
      },
      {
        title: "Notes",
        path: "/oneway/suggestions",
        newTab: false,
      },
      {
        title: "Users",
        path: "/users",
        newTab: false,
      },
      {
        title: "Links",
        path: "/links",
        newTab: false,
      }
    ],
  },
];
export default menuData;


---

File: ThemeToggler.js

import { useTheme } from "next-themes";

const ThemeToggler = () => {
  const { theme, setTheme } = useTheme();
  return (
    <button
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
      className="bg-gray-2 flex h-9 w-9 cursor-pointer items-center justify-center rounded-full text-black dark:text-white md:h-14 md:w-14"
    >
      <svg
        viewBox="0 0 23 23"
        className="h-5 w-5 stroke-current dark:hidden md:h-6 md:w-6"
        fill="none"
      >
        <path
          d="M9.55078 1.5C5.80078 1.5 1.30078 5.25 1.30078 11.25C1.30078 17.25 5.80078 21.75 11.8008 21.75C17.8008 21.75 21.5508 17.25 21.5508 13.5C13.3008 18.75 4.30078 9.75 9.55078 1.5Z"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      </svg>
      <svg
        viewBox="0 0 25 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        className="hidden h-5 w-5 dark:block md:h-6 md:w-6"
      >
        <mask id="path-1-inside-1_977:1934" fill="white">
          <path d="M12.0508 16.5C10.8573 16.5 9.71271 16.0259 8.8688 15.182C8.02489 14.3381 7.55078 13.1935 7.55078 12C7.55078 10.8065 8.02489 9.66193 8.8688 8.81802C9.71271 7.97411 10.8573 7.5 12.0508 7.5C13.2443 7.5 14.3888 7.97411 15.2328 8.81802C16.0767 9.66193 16.5508 10.8065 16.5508 12C16.5508 13.1935 16.0767 14.3381 15.2328 15.182C14.3888 16.0259 13.2443 16.5 12.0508 16.5ZM12.0508 18C13.6421 18 15.1682 17.3679 16.2934 16.2426C17.4186 15.1174 18.0508 13.5913 18.0508 12C18.0508 10.4087 17.4186 8.88258 16.2934 7.75736C15.1682 6.63214 13.6421 6 12.0508 6C10.4595 6 8.93336 6.63214 7.80814 7.75736C6.68292 8.88258 6.05078 10.4087 6.05078 12C6.05078 13.5913 6.68292 15.1174 7.80814 16.2426C8.93336 17.3679 10.4595 18 12.0508 18ZM12.0508 0C12.2497 0 12.4405 0.0790176 12.5811 0.21967C12.7218 0.360322 12.8008 0.551088 12.8008 0.75V3.75C12.8008 3.94891 12.7218 4.13968 12.5811 4.28033C12.4405 4.42098 12.2497 4.5 12.0508 4.5C11.8519 4.5 11.6611 4.42098 11.5205 4.28033C11.3798 4.13968 11.3008 3.94891 11.3008 3.75V0.75C11.3008 0.551088 11.3798 0.360322 11.5205 0.21967C11.6611 0.0790176 11.8519 0 12.0508 0V0ZM12.0508 19.5C12.2497 19.5 12.4405 19.579 12.5811 19.7197C12.7218 19.8603 12.8008 20.0511 12.8008 20.25V23.25C12.8008 23.4489 12.7218 23.6397 12.5811 23.7803C12.4405 23.921 12.2497 24 12.0508 24C11.8519 24 11.6611 23.921 11.5205 23.7803C11.3798 23.6397 11.3008 23.4489 11.3008 23.25V20.25C11.3008 20.0511 11.3798 19.8603 11.5205 19.7197C11.6611 19.579 11.8519 19.5 12.0508 19.5ZM24.0508 12C24.0508 12.1989 23.9718 12.3897 23.8311 12.5303C23.6905 12.671 23.4997 12.75 23.3008 12.75H20.3008C20.1019 12.75 19.9111 12.671 19.7705 12.5303C19.6298 12.3897 19.5508 12.1989 19.5508 12C19.5508 11.8011 19.6298 11.6103 19.7705 11.4697C19.9111 11.329 20.1019 11.25 20.3008 11.25H23.3008C23.4997 11.25 23.6905 11.329 23.8311 11.4697C23.9718 11.6103 24.0508 11.8011 24.0508 12ZM4.55078 12C4.55078 12.1989 4.47176 12.3897 4.33111 12.5303C4.19046 12.671 3.99969 12.75 3.80078 12.75H0.800781C0.601869 12.75 0.411103 12.671 0.270451 12.5303C0.129799 12.3897 0.0507813 12.1989 0.0507812 12C0.0507813 11.8011 0.129799 11.6103 0.270451 11.4697C0.411103 11.329 0.601869 11.25 0.800781 11.25H3.80078C3.99969 11.25 4.19046 11.329 4.33111 11.4697C4.47176 11.6103 4.55078 11.8011 4.55078 12ZM20.5363 3.5145C20.6769 3.65515 20.7559 3.84588 20.7559 4.04475C20.7559 4.24362 20.6769 4.43435 20.5363 4.575L18.4153 6.6975C18.3455 6.76713 18.2628 6.82235 18.1717 6.86C18.0806 6.89765 17.983 6.91699 17.8845 6.91692C17.6855 6.91678 17.4947 6.83758 17.354 6.69675C17.2844 6.62702 17.2292 6.54425 17.1915 6.45318C17.1539 6.36211 17.1345 6.26452 17.1346 6.16597C17.1348 5.96695 17.214 5.77613 17.3548 5.6355L19.4758 3.5145C19.6164 3.3739 19.8072 3.29491 20.006 3.29491C20.2049 3.29491 20.3956 3.3739 20.5363 3.5145ZM6.74678 17.304C6.88738 17.4446 6.96637 17.6354 6.96637 17.8342C6.96637 18.0331 6.88738 18.2239 6.74678 18.3645L4.62578 20.4855C4.48433 20.6221 4.29488 20.6977 4.09823 20.696C3.90158 20.6943 3.71347 20.6154 3.57442 20.4764C3.43536 20.3373 3.35648 20.1492 3.35478 19.9526C3.35307 19.7559 3.42866 19.5665 3.56528 19.425L5.68628 17.304C5.82693 17.1634 6.01766 17.0844 6.21653 17.0844C6.4154 17.0844 6.60614 17.1634 6.74678 17.304ZM20.5363 20.4855C20.3956 20.6261 20.2049 20.7051 20.006 20.7051C19.8072 20.7051 19.6164 20.6261 19.4758 20.4855L17.3548 18.3645C17.2182 18.223 17.1426 18.0336 17.1443 17.8369C17.146 17.6403 17.2249 17.4522 17.3639 17.3131C17.503 17.1741 17.6911 17.0952 17.8877 17.0935C18.0844 17.0918 18.2738 17.1674 18.4153 17.304L20.5363 19.425C20.6769 19.5656 20.7559 19.7564 20.7559 19.9552C20.7559 20.1541 20.6769 20.3449 20.5363 20.4855ZM6.74678 6.6975C6.60614 6.8381 6.4154 6.91709 6.21653 6.91709C6.01766 6.91709 5.82693 6.8381 5.68628 6.6975L3.56528 4.575C3.49365 4.50582 3.43651 4.42306 3.39721 4.33155C3.3579 4.24005 3.33721 4.14164 3.33634 4.04205C3.33548 3.94247 3.35445 3.84371 3.39216 3.75153C3.42988 3.65936 3.48557 3.57562 3.55598 3.5052C3.6264 3.43478 3.71014 3.37909 3.80232 3.34138C3.89449 3.30367 3.99325 3.2847 4.09283 3.28556C4.19242 3.28643 4.29083 3.30712 4.38233 3.34642C4.47384 3.38573 4.5566 3.44287 4.62578 3.5145L6.74678 5.6355C6.81663 5.70517 6.87204 5.78793 6.90985 5.87905C6.94766 5.97017 6.96712 6.06785 6.96712 6.1665C6.96712 6.26515 6.94766 6.36283 6.90985 6.45395C6.87204 6.54507 6.81663 6.62783 6.74678 6.6975Z" />
        </mask>
        <path
          d="M12.0508 16.5C10.8573 16.5 9.71271 16.0259 8.8688 15.182C8.02489 14.3381 7.55078 13.1935 7.55078 12C7.55078 10.8065 8.02489 9.66193 8.8688 8.81802C9.71271 7.97411 10.8573 7.5 12.0508 7.5C13.2443 7.5 14.3888 7.97411 15.2328 8.81802C16.0767 9.66193 16.5508 10.8065 16.5508 12C16.5508 13.1935 16.0767 14.3381 15.2328 15.182C14.3888 16.0259 13.2443 16.5 12.0508 16.5ZM12.0508 18C13.6421 18 15.1682 17.3679 16.2934 16.2426C17.4186 15.1174 18.0508 13.5913 18.0508 12C18.0508 10.4087 17.4186 8.88258 16.2934 7.75736C15.1682 6.63214 13.6421 6 12.0508 6C10.4595 6 8.93336 6.63214 7.80814 7.75736C6.68292 8.88258 6.05078 10.4087 6.05078 12C6.05078 13.5913 6.68292 15.1174 7.80814 16.2426C8.93336 17.3679 10.4595 18 12.0508 18ZM12.0508 0C12.2497 0 12.4405 0.0790176 12.5811 0.21967C12.7218 0.360322 12.8008 0.551088 12.8008 0.75V3.75C12.8008 3.94891 12.7218 4.13968 12.5811 4.28033C12.4405 4.42098 12.2497 4.5 12.0508 4.5C11.8519 4.5 11.6611 4.42098 11.5205 4.28033C11.3798 4.13968 11.3008 3.94891 11.3008 3.75V0.75C11.3008 0.551088 11.3798 0.360322 11.5205 0.21967C11.6611 0.0790176 11.8519 0 12.0508 0V0ZM12.0508 19.5C12.2497 19.5 12.4405 19.579 12.5811 19.7197C12.7218 19.8603 12.8008 20.0511 12.8008 20.25V23.25C12.8008 23.4489 12.7218 23.6397 12.5811 23.7803C12.4405 23.921 12.2497 24 12.0508 24C11.8519 24 11.6611 23.921 11.5205 23.7803C11.3798 23.6397 11.3008 23.4489 11.3008 23.25V20.25C11.3008 20.0511 11.3798 19.8603 11.5205 19.7197C11.6611 19.579 11.8519 19.5 12.0508 19.5ZM24.0508 12C24.0508 12.1989 23.9718 12.3897 23.8311 12.5303C23.6905 12.671 23.4997 12.75 23.3008 12.75H20.3008C20.1019 12.75 19.9111 12.671 19.7705 12.5303C19.6298 12.3897 19.5508 12.1989 19.5508 12C19.5508 11.8011 19.6298 11.6103 19.7705 11.4697C19.9111 11.329 20.1019 11.25 20.3008 11.25H23.3008C23.4997 11.25 23.6905 11.329 23.8311 11.4697C23.9718 11.6103 24.0508 11.8011 24.0508 12ZM4.55078 12C4.55078 12.1989 4.47176 12.3897 4.33111 12.5303C4.19046 12.671 3.99969 12.75 3.80078 12.75H0.800781C0.601869 12.75 0.411103 12.671 0.270451 12.5303C0.129799 12.3897 0.0507813 12.1989 0.0507812 12C0.0507813 11.8011 0.129799 11.6103 0.270451 11.4697C0.411103 11.329 0.601869 11.25 0.800781 11.25H3.80078C3.99969 11.25 4.19046 11.329 4.33111 11.4697C4.47176 11.6103 4.55078 11.8011 4.55078 12ZM20.5363 3.5145C20.6769 3.65515 20.7559 3.84588 20.7559 4.04475C20.7559 4.24362 20.6769 4.43435 20.5363 4.575L18.4153 6.6975C18.3455 6.76713 18.2628 6.82235 18.1717 6.86C18.0806 6.89765 17.983 6.91699 17.8845 6.91692C17.6855 6.91678 17.4947 6.83758 17.354 6.69675C17.2844 6.62702 17.2292 6.54425 17.1915 6.45318C17.1539 6.36211 17.1345 6.26452 17.1346 6.16597C17.1348 5.96695 17.214 5.77613 17.3548 5.6355L19.4758 3.5145C19.6164 3.3739 19.8072 3.29491 20.006 3.29491C20.2049 3.29491 20.3956 3.3739 20.5363 3.5145ZM6.74678 17.304C6.88738 17.4446 6.96637 17.6354 6.96637 17.8342C6.96637 18.0331 6.88738 18.2239 6.74678 18.3645L4.62578 20.4855C4.48433 20.6221 4.29488 20.6977 4.09823 20.696C3.90158 20.6943 3.71347 20.6154 3.57442 20.4764C3.43536 20.3373 3.35648 20.1492 3.35478 19.9526C3.35307 19.7559 3.42866 19.5665 3.56528 19.425L5.68628 17.304C5.82693 17.1634 6.01766 17.0844 6.21653 17.0844C6.4154 17.0844 6.60614 17.1634 6.74678 17.304ZM20.5363 20.4855C20.3956 20.6261 20.2049 20.7051 20.006 20.7051C19.8072 20.7051 19.6164 20.6261 19.4758 20.4855L17.3548 18.3645C17.2182 18.223 17.1426 18.0336 17.1443 17.8369C17.146 17.6403 17.2249 17.4522 17.3639 17.3131C17.503 17.1741 17.6911 17.0952 17.8877 17.0935C18.0844 17.0918 18.2738 17.1674 18.4153 17.304L20.5363 19.425C20.6769 19.5656 20.7559 19.7564 20.7559 19.9552C20.7559 20.1541 20.6769 20.3449 20.5363 20.4855ZM6.74678 6.6975C6.60614 6.8381 6.4154 6.91709 6.21653 6.91709C6.01766 6.91709 5.82693 6.8381 5.68628 6.6975L3.56528 4.575C3.49365 4.50582 3.43651 4.42306 3.39721 4.33155C3.3579 4.24005 3.33721 4.14164 3.33634 4.04205C3.33548 3.94247 3.35445 3.84371 3.39216 3.75153C3.42988 3.65936 3.48557 3.57562 3.55598 3.5052C3.6264 3.43478 3.71014 3.37909 3.80232 3.34138C3.89449 3.30367 3.99325 3.2847 4.09283 3.28556C4.19242 3.28643 4.29083 3.30712 4.38233 3.34642C4.47384 3.38573 4.5566 3.44287 4.62578 3.5145L6.74678 5.6355C6.81663 5.70517 6.87204 5.78793 6.90985 5.87905C6.94766 5.97017 6.96712 6.06785 6.96712 6.1665C6.96712 6.26515 6.94766 6.36283 6.90985 6.45395C6.87204 6.54507 6.81663 6.62783 6.74678 6.6975Z"
          fill="black"
          stroke="white"
          strokeWidth="2"
          mask="url(#path-1-inside-1_977:1934)"
        />
      </svg>
    </button>
  );
};

export default ThemeToggler;


---

File: GlobeDemo.js

import Globe from "../magicui/globe";

export function GlobeDemo() {
  return (
    <div className="relative flex h-full w-full max-w-[32rem] items-center justify-center overflow-hidden  px-40 pb-40 pt-8 md:pb-60 md:shadow-xl mx-auto">
      <Globe className="top-0" />

      <div className="pointer-events-none absolute inset-0 h-full bg-[radial-gradient(circle_at_50%_200%,rgba(0,0,0,0.2),rgba(255,255,255,0))]" />
    </div>
  );
}


---

File: index.js

"use client"
import Link from "next/link";

import { useAuth } from "../../helper/Auth1";
import TypingAnimation from "../magicui/typing-animation";
import RetroGrid from "../magicui/retro-grid";

import socialLinks from '../../Data/socialLinks.json'

const socialLinksObj = Object.fromEntries(socialLinks.map(item => [item.id, item.link]));

// =============== Hero ===============*
const Hero = () => {
  const { LoggedInUserData, setLoggedInUserData, isInstalled } = useAuth();

  const btnClass = "select-none w-full sm:w-fit rounded-lg bg-gradient-to-tr from-gray-900 to-gray-800 py-3 px-6 text-center align-middle font-sans text-sm font-bold uppercase text-white shadow-md shadow-gray-900/10 transition-all hover:shadow-lg hover:shadow-gray-900/20 active:opacity-[0.85] disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"

  return (<>
    <section id="home" className="relative z-10 overflow-hidden py-16 min-h-fit" >
      <div className="w-full px-2">
        <div
          className="wow fadeInUp mx-auto md:max-w-[90vw] max-w-full text-center"
          data-wow-delay=".2s"
        >
          {/* <h1 className="mb-5 text-xl font-bold leading-tight text-black dark:text-white sm:text-2xl sm:leading-tight md:text-4xl md:leading-tight">
            LastMinuteEngineering: Your Ultimate Exam Preparation Hub
          </h1> */}


          <div className="h-48 flex justify-center items-center">
            <TypingAnimation
              className="mb-5 text-[1.5rem] font-bold leading-tight text-black dark:text-white sm:text-5xl sm:leading-tight md:text-6xl md:leading-tight px-2 "
              text="LastMinuteEngineering: Your Ultimate Exam Preparation Hub"
            />
          </div>

          {/* <GradualSpacing
          className="mb-5 text-4xl font-bold leading-tight text-black dark:text-white sm:text-5xl sm:leading-tight md:text-6xl  md:leading-tight"
            text="LastMinuteEngineering: Your Ultimate Exam Preparation Hub"
          /> */}


          <p className="mb-12 font-medium text-black font-serif dark:text-white text-sm md:text-lg text-justify">
            LastMinuteEngineering is a dedicated platform designed to assist engineering students in excelling in their exams. We offer a comprehensive range of free resources, including continuous assessment (CA) questions, past year questions (PYQ), and valuable suggestions to enhance your study process. Our aim is to make your exam preparation as efficient and effective as possible, right up to the last minute.
          </p>

          <div className="flex flex-row items-center justify-center flex-wrap gap-2 w-full">

            <div className="flex flex-row gap-2 w-full sm:w-fit">
              <Link href="/material" className={btnClass} >
                Get Started
              </Link>
              <Link href={"/courses"} className={btnClass}
              >
                Courses
              </Link>
            </div>

            <div className="flex flex-row gap-2 w-full sm:w-fit">
              {LoggedInUserData ?
                <Link href={`/user/${LoggedInUserData.userName}`} className={btnClass}
                >
                  My Profile
                </Link>
                :
                <Link href="/study" className="bg-blue-500 text-white font-bold py-2 px-4 rounded-lg shadow-lg transition transform hover:bg-blue-600 hover:scale-110 hover:shadow-xl focus:outline-none focus:ring-4 focus:ring-blue-300 animate-pulse"
                >
                 Study Jam
                </Link>
              }
              <a href={socialLinksObj.becomeacontributor} target="_blank" className={btnClass} >
                Become a Contributor
              </a>
            </div>

            <Link href="/links"  className={btnClass}>
              Links
            </Link>

            {/* {!isInstalled &&
              <Link
                href="/installapp"
                className="rounded-md bg-black/20 py-4 px-8 text-base font-semibold text-black duration-300 ease-in-out hover:bg-black/30 dark:bg-white/20 dark:text-white dark:hover:bg-white/30"
              >
                Install App
              </Link>
            } */}
          </div>
        </div>
        {/* <NoticeLine /> */}

      </div>

      <div className="absolute top-0 right-0 z-[-1] opacity-30 lg:opacity-100">
        <svg
          width="450"
          height="556"
          viewBox="0 0 450 556"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <circle
            cx="277"
            cy="63"
            r="225"
            fill="url(#paint0_linear_25:217)"
          />
          <circle
            cx="17.9997"
            cy="182"
            r="18"
            fill="url(#paint1_radial_25:217)"
          />
          <circle
            cx="76.9997"
            cy="288"
            r="34"
            fill="url(#paint2_radial_25:217)"
          />
          <circle
            cx="325.486"
            cy="302.87"
            r="180"
            transform="rotate(-37.6852 325.486 302.87)"
            fill="url(#paint3_linear_25:217)"
          />
          <circle
            opacity="0.8"
            cx="184.521"
            cy="315.521"
            r="132.862"
            transform="rotate(114.874 184.521 315.521)"
            stroke="url(#paint4_linear_25:217)"
          />
          <circle
            opacity="0.8"
            cx="356"
            cy="290"
            r="179.5"
            transform="rotate(-30 356 290)"
            stroke="url(#paint5_linear_25:217)"
          />
          <circle
            opacity="0.8"
            cx="191.659"
            cy="302.659"
            r="133.362"
            transform="rotate(133.319 191.659 302.659)"
            fill="url(#paint6_linear_25:217)"
          />
          <defs>
            <linearGradient
              id="paint0_linear_25:217"
              x1="-54.5003"
              y1="-178"
              x2="222"
              y2="288"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <radialGradient
              id="paint1_radial_25:217"
              cx="0"
              cy="0"
              r="1"
              gradientUnits="userSpaceOnUse"
              gradientTransform="translate(17.9997 182) rotate(90) scale(18)"
            >
              <stop offset="0.145833" stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0.08" />
            </radialGradient>
            <radialGradient
              id="paint2_radial_25:217"
              cx="0"
              cy="0"
              r="1"
              gradientUnits="userSpaceOnUse"
              gradientTransform="translate(76.9997 288) rotate(90) scale(34)"
            >
              <stop offset="0.145833" stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0.08" />
            </radialGradient>
            <linearGradient
              id="paint3_linear_25:217"
              x1="226.775"
              y1="-66.1548"
              x2="292.157"
              y2="351.421"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint4_linear_25:217"
              x1="184.521"
              y1="182.159"
              x2="184.521"
              y2="448.882"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="white" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint5_linear_25:217"
              x1="356"
              y1="110"
              x2="356"
              y2="470"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="white" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint6_linear_25:217"
              x1="118.524"
              y1="29.2497"
              x2="166.965"
              y2="338.63"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
          </defs>
        </svg>
      </div>
      <div className="absolute bottom-0 left-0 z-[-1] opacity-30 lg:opacity-100">
        <svg
          width="364"
          height="201"
          viewBox="0 0 364 201"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M5.88928 72.3303C33.6599 66.4798 101.397 64.9086 150.178 105.427C211.155 156.076 229.59 162.093 264.333 166.607C299.076 171.12 337.718 183.657 362.889 212.24"
            stroke="url(#paint0_linear_25:218)"
          />
          <path
            d="M-22.1107 72.3303C5.65989 66.4798 73.3965 64.9086 122.178 105.427C183.155 156.076 201.59 162.093 236.333 166.607C271.076 171.12 309.718 183.657 334.889 212.24"
            stroke="url(#paint1_linear_25:218)"
          />
          <path
            d="M-53.1107 72.3303C-25.3401 66.4798 42.3965 64.9086 91.1783 105.427C152.155 156.076 170.59 162.093 205.333 166.607C240.076 171.12 278.718 183.657 303.889 212.24"
            stroke="url(#paint2_linear_25:218)"
          />
          <path
            d="M-98.1618 65.0889C-68.1416 60.0601 4.73364 60.4882 56.0734 102.431C120.248 154.86 139.905 161.419 177.137 166.956C214.37 172.493 255.575 186.165 281.856 215.481"
            stroke="url(#paint3_linear_25:218)"
          />
          <circle
            opacity="0.8"
            cx="214.505"
            cy="60.5054"
            r="49.7205"
            transform="rotate(-13.421 214.505 60.5054)"
            stroke="url(#paint4_linear_25:218)"
          />
          <circle cx="220" cy="63" r="43" fill="url(#paint5_radial_25:218)" />
          <defs>
            <linearGradient
              id="paint0_linear_25:218"
              x1="184.389"
              y1="69.2405"
              x2="184.389"
              y2="212.24"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint1_linear_25:218"
              x1="156.389"
              y1="69.2405"
              x2="156.389"
              y2="212.24"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint2_linear_25:218"
              x1="125.389"
              y1="69.2405"
              x2="125.389"
              y2="212.24"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint3_linear_25:218"
              x1="93.8507"
              y1="67.2674"
              x2="89.9278"
              y2="210.214"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint4_linear_25:218"
              x1="214.505"
              y1="10.2849"
              x2="212.684"
              y2="99.5816"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <radialGradient
              id="paint5_radial_25:218"
              cx="0"
              cy="0"
              r="1"
              gradientUnits="userSpaceOnUse"
              gradientTransform="translate(220 63) rotate(90) scale(43)"
            >
              <stop offset="0.145833" stopColor="white" stopOpacity="0" />
              <stop offset="1" stopColor="white" stopOpacity="0.08" />
            </radialGradient>
          </defs>
        </svg>
      </div>


      <div className="absolute top-0 right-0 z-[-3] flex h-full w-full flex-col items-center justify-center overflow-hidden">
        <RetroGrid />
      </div>

      {/* <GlobeDemo /> */}

    </section>

  </>);
};

export default Hero;


---

File: NoticeLine.js

"use client"
import React, { useEffect, useState } from 'react'

export default function NoticeLine() {


  return (
    <div className="w-full p-2 text-black dark:text-white drop-shadow-3xl backdrop-blur-2xl bg-opacity-50 font-bold my-10">

      <div className="w-full py-1">
        <marquee>
          Welcome to LastMinuteEngineering: Your Ultimate Exam Preparation Hub | LastMinuteEngineering is a dedicated platform designed to assist engineering students in excelling in their exams. We offer a comprehensive range of free resources, including continuous assessment (CA) questions, past year questions (PYQ), and valuable suggestions to enhance your study process. Our aim is to make your exam preparation as efficient and effective as possible, right up to the last minute.
        </marquee>
      </div>

    </div>
  )
}

---

File: animated-beam.jsx

"use client";;
import { useEffect, useId, useState } from "react";
import { motion } from "framer-motion";

import { cn } from "../../lib/utils";

export const AnimatedBeam = ({
  className,
  containerRef,
  fromRef,
  toRef,
  curvature = 0,
  reverse = false, // Include the reverse prop
  duration = Math.random() * 3 + 4,
  delay = 0,
  pathColor = "gray",
  pathWidth = 2,
  pathOpacity = 0.2,
  gradientStartColor = "#ffaa40",
  gradientStopColor = "#9c40ff",
  startXOffset = 0,
  startYOffset = 0,
  endXOffset = 0,
  endYOffset = 0,
}) => {
  const id = useId();
  const [pathD, setPathD] = useState("");
  const [svgDimensions, setSvgDimensions] = useState({ width: 0, height: 0 });

  // Calculate the gradient coordinates based on the reverse prop
  const gradientCoordinates = reverse
    ? {
        x1: ["90%", "-10%"],
        x2: ["100%", "0%"],
        y1: ["0%", "0%"],
        y2: ["0%", "0%"],
      }
    : {
        x1: ["10%", "110%"],
        x2: ["0%", "100%"],
        y1: ["0%", "0%"],
        y2: ["0%", "0%"],
      };

  useEffect(() => {
    const updatePath = () => {
      if (containerRef.current && fromRef.current && toRef.current) {
        const containerRect = containerRef.current.getBoundingClientRect();
        const rectA = fromRef.current.getBoundingClientRect();
        const rectB = toRef.current.getBoundingClientRect();

        const svgWidth = containerRect.width;
        const svgHeight = containerRect.height;
        setSvgDimensions({ width: svgWidth, height: svgHeight });

        const startX =
          rectA.left - containerRect.left + rectA.width / 2 + startXOffset;
        const startY =
          rectA.top - containerRect.top + rectA.height / 2 + startYOffset;
        const endX =
          rectB.left - containerRect.left + rectB.width / 2 + endXOffset;
        const endY =
          rectB.top - containerRect.top + rectB.height / 2 + endYOffset;

        const controlY = startY - curvature;
        const d = `M ${startX},${startY} Q ${
          (startX + endX) / 2
        },${controlY} ${endX},${endY}`;
        setPathD(d);
      }
    };

    // Initialize ResizeObserver
    const resizeObserver = new ResizeObserver((entries) => {
      // For all entries, recalculate the path
      for (let entry of entries) {
        updatePath();
      }
    });

    // Observe the container element
    if (containerRef.current) {
      resizeObserver.observe(containerRef.current);
    }

    // Call the updatePath initially to set the initial path
    updatePath();

    // Clean up the observer on component unmount
    return () => {
      resizeObserver.disconnect();
    };
  }, [
    containerRef,
    fromRef,
    toRef,
    curvature,
    startXOffset,
    startYOffset,
    endXOffset,
    endYOffset,
  ]);

  return (
    (<svg
      fill="none"
      width={svgDimensions.width}
      height={svgDimensions.height}
      xmlns="http://www.w3.org/2000/svg"
      className={cn(
        "pointer-events-none absolute left-0 top-0 transform-gpu stroke-2",
        className
      )}
      viewBox={`0 0 ${svgDimensions.width} ${svgDimensions.height}`}>
      <path
        d={pathD}
        stroke={pathColor}
        strokeWidth={pathWidth}
        strokeOpacity={pathOpacity}
        strokeLinecap="round" />
      <path
        d={pathD}
        strokeWidth={pathWidth}
        stroke={`url(#${id})`}
        strokeOpacity="1"
        strokeLinecap="round" />
      <defs>
        <motion.linearGradient
          className="transform-gpu"
          id={id}
          gradientUnits={"userSpaceOnUse"}
          initial={{
            x1: "0%",
            x2: "0%",
            y1: "0%",
            y2: "0%",
          }}
          animate={{
            x1: gradientCoordinates.x1,
            x2: gradientCoordinates.x2,
            y1: gradientCoordinates.y1,
            y2: gradientCoordinates.y2,
          }}
          transition={{
            delay,
            duration,
            ease: [0.16, 1, 0.3, 1], // https://easings.net/#easeOutExpo
            repeat: Infinity,
            repeatDelay: 0,
          }}>
          <stop stopColor={gradientStartColor} stopOpacity="0"></stop>
          <stop stopColor={gradientStartColor}></stop>
          <stop offset="32.5%" stopColor={gradientStopColor}></stop>
          <stop offset="100%" stopColor={gradientStopColor} stopOpacity="0"></stop>
        </motion.linearGradient>
      </defs>
    </svg>)
  );
};


---

File: animated-gradient-text.jsx

import { cn } from "../../lib/utils";

export default function AnimatedGradientText({ children, className }) {
  return (
    (<div className={cn("group relative mx-auto flex max-w-fit flex-row items-center justify-center px-4 py-1.5 transition-shadow duration-500 ease-out [--bg-size:300%]", className)}>
      {/* <div className={`absolute inset-0 block h-full w-full animate-gradient bg-gradient-to-r from-[#ffaa40]/50 via-[#9c40ff]/50 to-[#ffaa40]/50 bg-[length:var(--bg-size)_100%] p-[1px] ![mask-composite:subtract] [border-radius:inherit] [mask:linear-gradient(#fff_0_0)_content-box,linear-gradient(#fff_0_0)]`} /> */}

      {children}
    </div>)
  );
}


---

File: globe.jsx

"use client";

import { useCallback, useEffect, useRef } from "react";
import createGlobe from "cobe";
import { useSpring } from "react-spring";

import { cn } from "../../lib/utils";

const GLOBE_CONFIG = {
  width: 800,
  height: 800,
  onRender: () => { },
  devicePixelRatio: 2,
  phi: 0,
  theta: 0.3,
  dark: 0,
  diffuse: 0.4,
  mapSamples: 16000,
  mapBrightness: 1.2,
  baseColor: [1, 1, 1],
  markerColor: [251 / 255, 100 / 255, 21 / 255],
  glowColor: [1, 1, 1],
  markers: [
    { location: [14.5995, 120.9842], size: 0.03 },
    { location: [19.076, 72.8777], size: 0.1 },
    { location: [23.8103, 90.4125], size: 0.05 },
    { location: [30.0444, 31.2357], size: 0.07 },
    { location: [39.9042, 116.4074], size: 0.08 },
    { location: [-23.5505, -46.6333], size: 0.1 },
    { location: [19.4326, -99.1332], size: 0.1 },
    { location: [40.7128, -74.006], size: 0.1 },
    { location: [34.6937, 135.5022], size: 0.05 },
    { location: [41.0082, 28.9784], size: 0.06 },
  ],
};

export default function Globe({
  className,
  config = GLOBE_CONFIG
}) {
  let phi = 0;
  let width = 0;
  const canvasRef = useRef(null);
  const pointerInteracting = useRef(null);
  const pointerInteractionMovement = useRef(0);
  const [{ r }, api] = useSpring(() => ({
    r: 0,
    config: {
      mass: 1,
      tension: 280,
      friction: 40,
      precision: 0.001,
    },
  }));

  const updatePointerInteraction = (value) => {
    pointerInteracting.current = value;
    canvasRef.current.style.cursor = value ? "grabbing" : "grab";
  };

  const updateMovement = (clientX) => {
    if (pointerInteracting.current !== null) {
      const delta = clientX - pointerInteracting.current;
      pointerInteractionMovement.current = delta;
      api.start({ r: delta / 200 });
    }
  };

  const onRender = useCallback((state) => {
    if (!pointerInteracting.current) phi += 0.005;
    state.phi = phi + r.get();
    state.width = width * 2;
    state.height = width * 2;
  }, [pointerInteracting, phi, r]);

  const onResize = () => {
    if (canvasRef.current) {
      width = canvasRef.current.offsetWidth;
    }
  };

  useEffect(() => {
    window.addEventListener("resize", onResize);
    onResize();

    const globe = createGlobe(canvasRef.current, {
      ...config,
      width: width * 2,
      height: width * 2,
      onRender,
    });

    setTimeout(() => (canvasRef.current.style.opacity = "1"));
    return () => globe.destroy();
  }, []);

  return (
    (<div className={cn("absolute inset-0 mx-auto aspect-[1/1] w-full max-w-[600px]", className)}>
      <canvas className={cn("h-full w-full opacity-0 transition-opacity duration-500 [contain:layout_paint_size]")}
        ref={canvasRef}
        onPointerDown={(e) => updatePointerInteraction(e.clientX - pointerInteractionMovement.current)}
        onPointerUp={() => updatePointerInteraction(null)}
        onPointerOut={() => updatePointerInteraction(null)}
        onMouseMove={(e) => updateMovement(e.clientX)}
        onTouchMove={(e) => e.touches[0] && updateMovement(e.touches[0].clientX)} />
    </div>)
  );
}


---

File: gradual-spacing.jsx

"use client";;
import { AnimatePresence, motion } from "framer-motion";

import { cn } from "../../lib/utils";

export default function GradualSpacing({
  text,
  duration = 0.5,
  delayMultiple = 0.04,

  framerProps = {
    hidden: { opacity: 0, x: -20 },
    visible: { opacity: 1, x: 0 },
  },

  className
}) {
  return (
    (<div className="flex justify-center space-x-1 max-w-full break-words border-2 border-red-900">
      <AnimatePresence>
        {text.split("").map((char, i) => (
          <motion.h1
            key={i}
            // initial="hidden"
            animate="visible"
            exit="hidden"
            variants={framerProps}
            transition={{ duration, delay: i * delayMultiple }}
            className={cn("drop-shadow-sm ", className)}>
            {char === " " ? <span>&nbsp;</span> : char}
          </motion.h1>
        ))}
      </AnimatePresence>
    </div>)
  );
}


---

File: orbiting-circles.jsx

import { cn } from "../../lib/utils";

export default function OrbitingCircles({
  className,
  children,
  reverse,
  duration = 20,
  delay = 10,
  radius = 50,
  path = true
}) {
  return (<>
    {path && (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        version="1.1"
        className="pointer-events-none absolute inset-0 size-full">
        <circle
          className="stroke-black/10 stroke-1 dark:stroke-white/10"
          cx="50%"
          cy="50%"
          r={radius}
          fill="none" />
      </svg>
    )}
    <div
      style={
        {
          "--duration": duration,
          "--radius": radius,
          "--delay": -delay
        }
      }
      className={cn(
        "absolute flex size-full transform-gpu animate-orbit items-center justify-center rounded-full border bg-black/10 [animation-delay:calc(var(--delay)*1000ms)] dark:bg-white/10",
        { "[animation-direction:reverse]": reverse },
        className
      )}>
      {children}
    </div>
  </>);
}


---

File: retro-grid.jsx

import { cn } from "../../lib/utils";

export default function RetroGrid({ className }) {

  return (
    <div className={cn("pointer-events-none absolute h-full w-full overflow-hidden opacity-40 [perspective:250px]", className)}>
      {/* Grid */}
      <div className="absolute inset-0 [transform:rotateX(35deg)]">
        <div
          className={cn(
            "animate-grid",
            "[background-repeat:repeat] [background-size:60px_60px] [height:300vh] [inset:0%_0px] [margin-left:-50%] [transform-origin:100%_0_0] [width:600vw]",
            // Light Styles
            "[background-image:linear-gradient(to_right,rgba(0,0,0,0.3)_3px,transparent_0),linear-gradient(to_bottom,rgba(0,0,0,0.3)_3px,transparent_0)]",
            // Dark styles
            "dark:[background-image:linear-gradient(to_right,rgba(255,255,255,0.2)_3px,transparent_0),linear-gradient(to_bottom,rgba(255,255,255,0.2)_3px,transparent_0)]"
          )} />
      </div>
      {/* Background Gradient */}
      <div className="absolute inset-0 bg-gradient-to-t from-white to-transparent to-90% dark:from-black" />
    </div>
  );
}


---

File: text-reveal.jsx

"use client";;
import { useRef } from "react";
import { motion, useScroll, useTransform } from "framer-motion";
import { cn } from "../../lib/utils";

export const TextRevealByWord = ({ text, className, }) => {
  const targetRef = useRef(null);

  const { scrollYProgress } = useScroll({ target: targetRef, });
  const words = text.split(" ");

  return (
    (<div ref={targetRef} className={cn("relative z-0 h-[200vh]", className)}>
      <div
        className={
          "sticky top-0 mx-auto flex h-[50%] max-w-4xl items-center bg-transparent px-[1rem] py-[5rem]"
        }>
        <p
          ref={targetRef}
          className={
            "flex flex-wrap p-5 text-3xl font-bold text-black/20 dark:text-white/20 md:p-8 md:text-4xl lg:p-10 lg:text-5xl xl:text-6xl"
          }>
          {words.map((word, i) => {
            const start = i / words.length;
            const end = start + 1 / words.length;
            return (
              (<Word key={i} progress={scrollYProgress} range={[start, end]}>
                {word}
              </Word>)
            );
          })}
        </p>
      </div>
    </div>)
  );
};

const Word = ({ children, progress, range }) => {
  const opacity = useTransform(progress, range, [0, 1]);
  return (
    (<span className="xl:lg-3 relative mx-1 lg:mx-2.5">
      <span className={"absolute opacity-30"}>{children}</span>
      <motion.span style={{ opacity: opacity }} className={"text-black dark:text-white"}>
        {children}
      </motion.span>
    </span>)
  );
};

export default TextRevealByWord;


---

File: typing-animation.jsx

"use client";;
import { useEffect, useState } from "react";
import { cn } from "../../lib/utils";
import { ChevronRight } from "lucide-react";
import AnimatedGradientText from "../magicui/animated-gradient-text";



export default function TypingAnimation({ text, duration = 80, className }) {
  const [displayedText, setDisplayedText] = useState("");
  const [i, setI] = useState(0);

  useEffect(() => {
    const typingEffect = setInterval(() => {
      if (i < text.length) {
        setDisplayedText(text.substring(0, i + 1));
        setI(i + 1);
      } else {
        clearInterval(typingEffect);
      }
    }, duration);

    return () => {
      clearInterval(typingEffect);
    };
  }, [duration, i]);

  return (
    (<h1
      className={cn("font-display text-center font-bold leading-[5rem] tracking-[-0.02em] drop-shadow-sm", className)}>
      {/* {displayedText ? displayedText : text} */}

      <AnimatedGradientText>
        <span className={cn(`inline animate-gradient bg-gradient-to-r from-[#1b39c2] via-[#ff9b05] to-[#1b39c2] dark:from-[#ffaa40] dark:via-[#9c40ff] dark:to-[#ffaa40] bg-[length:var(--bg-size)_100%] bg-clip-text text-transparent`,)} >
          {displayedText ? displayedText : text}
        </span>
      </AnimatedGradientText>
    </h1>)

  );
}


---

File: index.js

"use client";
import { useState } from "react";
import SectionTitle from "../Common/SectionTitle";
import OfferList from "./OfferList";
import PricingBox from "./PricingBox";

const Pricing = () => {
  const [isMonthly, setIsMonthly] = useState(true);

  return (
    <section id="pricing" className="relative z-10 py-16 md:py-20 lg:py-28">
      <div className="container">
        <SectionTitle
          title="Simple and Affordable Pricing"
          paragraph="There are many variations of passages of Lorem Ipsum available but the majority have suffered alteration in some form."
          center
          width="665px"
        />

        <div className="w-full">
          <div
            className="wow fadeInUp mb-8 flex justify-center md:mb-12 lg:mb-16"
            data-wow-delay=".1s"
          >
            <span
              onClick={() => setIsMonthly(true)}
              className={`${
                isMonthly
                  ? "pointer-events-none text-blue-900"
                  : "text-black dark:text-white"
              } mr-4 cursor-pointer text-base font-semibold`}
            >
              Monthly
            </span>
            <div
              onClick={() => setIsMonthly(!isMonthly)}
              className="flex cursor-pointer items-center"
            >
              <div className="relative">
                <div className="h-5 w-14 rounded-full bg-[#1D2144] shadow-inner"></div>
                <div
                  className={`${
                    isMonthly ? "" : "translate-x-full"
                  } shadow-switch-1 absolute left-0 top-[-4px] flex h-7 w-7 items-center justify-center rounded-full bg-blue-900 transition`}
                >
                  <span className="active h-4 w-4 rounded-full bg-white"></span>
                </div>
              </div>
            </div>
            <span
              onClick={() => setIsMonthly(false)}
              className={`${
                isMonthly
                  ? "text-black dark:text-white"
                  : "pointer-events-none text-blue-900"
              } ml-4 cursor-pointer text-base font-semibold`}
            >
              Yearly
            </span>
          </div>
        </div>

        <div className="grid grid-cols-1 gap-x-8 gap-y-10 md:grid-cols-2 lg:grid-cols-3">
          <PricingBox
            packageName="Lite"
            price={isMonthly ? "40" : "120"}
            duration={isMonthly ? "mo" : "yr"}
            subtitle="Lorem ipsum dolor sit amet adiscing elit Mauris egestas enim."
          >
            <OfferList text="All UI Components" status="active" />
            <OfferList text="Use with Unlimited Projects" status="active" />
            <OfferList text="Commercial Use" status="active" />
            <OfferList text="Email Support" status="active" />
            <OfferList text="Lifetime Access" status="inactive" />
            <OfferList text="Free Lifetime Updates" status="inactive" />
          </PricingBox>
          <PricingBox
            packageName="Basic"
            price={isMonthly ? "399" : "789"}
            duration={isMonthly ? "mo" : "yr"}
            subtitle="Lorem ipsum dolor sit amet adiscing elit Mauris egestas enim."
          >
            <OfferList text="All UI Components" status="active" />
            <OfferList text="Use with Unlimited Projects" status="active" />
            <OfferList text="Commercial Use" status="active" />
            <OfferList text="Email Support" status="active" />
            <OfferList text="Lifetime Access" status="active" />
            <OfferList text="Free Lifetime Updates" status="inactive" />
          </PricingBox>
          <PricingBox
            packageName="Plus"
            price={isMonthly ? "589" : "999"}
            duration={isMonthly ? "mo" : "yr"}
            subtitle="Lorem ipsum dolor sit amet adiscing elit Mauris egestas enim."
          >
            <OfferList text="All UI Components" status="active" />
            <OfferList text="Use with Unlimited Projects" status="active" />
            <OfferList text="Commercial Use" status="active" />
            <OfferList text="Email Support" status="active" />
            <OfferList text="Lifetime Access" status="active" />
            <OfferList text="Free Lifetime Updates" status="active" />
          </PricingBox>
        </div>
      </div>

      <div className="absolute left-0 bottom-0 z-[-1]">
        <svg
          width="239"
          height="601"
          viewBox="0 0 239 601"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <rect
            opacity="0.3"
            x="-184.451"
            y="600.973"
            width="196"
            height="541.607"
            rx="2"
            transform="rotate(-128.7 -184.451 600.973)"
            fill="url(#paint0_linear_93:235)"
          />
          <rect
            opacity="0.3"
            x="-188.201"
            y="385.272"
            width="59.7544"
            height="541.607"
            rx="2"
            transform="rotate(-128.7 -188.201 385.272)"
            fill="url(#paint1_linear_93:235)"
          />
          <defs>
            <linearGradient
              id="paint0_linear_93:235"
              x1="-90.1184"
              y1="420.414"
              x2="-90.1184"
              y2="1131.65"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint1_linear_93:235"
              x1="-159.441"
              y1="204.714"
              x2="-159.441"
              y2="915.952"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
          </defs>
        </svg>
      </div>
    </section>
  );
};

export default Pricing;


---

File: OfferList.js

const checkIcon = (
  <svg width="8" height="6" viewBox="0 0 8 6" className="fill-current">
    <path d="M2.90567 6.00024C2.68031 6.00024 2.48715 5.92812 2.294 5.74764L0.169254 3.43784C-0.0560926 3.18523 -0.0560926 2.78827 0.169254 2.53566C0.39461 2.28298 0.74873 2.28298 0.974086 2.53566L2.90567 4.66497L7.02642 0.189715C7.25175 -0.062913 7.60585 -0.062913 7.83118 0.189715C8.0566 0.442354 8.0566 0.839355 7.83118 1.09198L3.54957 5.78375C3.32415 5.92812 3.09882 6.00024 2.90567 6.00024Z" />
  </svg>
);

const crossIcon = (
  <svg width="7" height="7" viewBox="0 0 8 8" className="fill-current">
    <path d="M7.4499 0.512524C7.1124 0.175024 6.5874 0.175024 6.2499 0.512524L3.9999 2.80002L1.7124 0.512524C1.3749 0.175024 0.849902 0.175024 0.512402 0.512524C0.174902 0.850024 0.174902 1.37502 0.512402 1.71252L2.7999 4.00002L0.512402 6.28752C0.174902 6.62502 0.174902 7.15002 0.512402 7.48752C0.662402 7.63752 0.887402 7.75002 1.1124 7.75002C1.3374 7.75002 1.5624 7.67502 1.7124 7.48752L3.9999 5.20002L6.2874 7.48752C6.4374 7.63752 6.6624 7.75002 6.8874 7.75002C7.1124 7.75002 7.3374 7.67502 7.4874 7.48752C7.8249 7.15002 7.8249 6.62502 7.4874 6.28752L5.1999 4.00002L7.4874 1.71252C7.7874 1.37502 7.7874 0.850024 7.4499 0.512524Z" />
  </svg>
);

const OfferList = ({
  text,
  status,
}) => {
  return (
    <div className="mb-3 flex items-center">
      <span className="mr-3 flex h-[18px] w-full max-w-[18px] items-center justify-center rounded-full bg-blue-900 bg-opacity-10 text-blue-900">
        {status === "active" ? checkIcon : crossIcon}
      </span>
      <p className="m-0 text-base font-medium text-gray-700">{text}</p>
    </div>
  );
};

export default OfferList;


---

File: PricingBox.js

const PricingBox = (props) => {
  const { price, duration, packageName, subtitle, children } = props;

  return (
    <div className="w-full">
      <div
        className="wow fadeInUp relative z-10 rounded-md bg-white px-8 py-10 shadow-signUp dark:bg-[#1D2144]"
        data-wow-delay=".1s"
      >
        <div className="flex items-center justify-between">
          <h3 className="price mb-2 text-3xl font-bold text-black dark:text-white">
            $<span className="amount">{price}</span>
            <span className="time text-gray-700">/{duration}</span>
          </h3>
          <h4 className="mb-2 text-xl font-bold text-black dark:text-white">
            {packageName}
          </h4>
        </div>
        <p className="mb-7 text-base text-gray-700">{subtitle}</p>
        <div className="mb-8 border-b border-gray-700 border-opacity-10 pb-8 dark:border-white dark:border-opacity-10">
          <button className="flex w-full items-center justify-center rounded-md bg-blue-900 p-3 text-base font-semibold text-white transition duration-300 ease-in-out hover:bg-opacity-80 hover:shadow-signUp">
            Start Free Trial
          </button>
        </div>
        <div>{children}</div>
        <div className="absolute bottom-0 right-0 z-[-1]">
          <svg
            width="179"
            height="158"
            viewBox="0 0 179 158"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              opacity="0.5"
              d="M75.0002 63.256C115.229 82.3657 136.011 137.496 141.374 162.673C150.063 203.47 207.217 197.755 202.419 167.738C195.393 123.781 137.273 90.3579 75.0002 63.256Z"
              fill="url(#paint0_linear_70:153)"
            />
            <path
              opacity="0.3"
              d="M178.255 0.150879C129.388 56.5969 134.648 155.224 143.387 197.482C157.547 265.958 65.9705 295.709 53.1024 246.401C34.2588 174.197 100.939 83.7223 178.255 0.150879Z"
              fill="url(#paint1_linear_70:153)"
            />
            <defs>
              <linearGradient
                id="paint0_linear_70:153"
                x1="69.6694"
                y1="29.9033"
                x2="196.108"
                y2="83.2919"
                gradientUnits="userSpaceOnUse"
              >
                <stop stopColor="#4A6CF7" stopOpacity="0.62" />
                <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
              </linearGradient>
              <linearGradient
                id="paint1_linear_70:153"
                x1="165.348"
                y1="-75.4466"
                x2="-3.75136"
                y2="103.645"
                gradientUnits="userSpaceOnUse"
              >
                <stop stopColor="#4A6CF7" stopOpacity="0.62" />
                <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
              </linearGradient>
            </defs>
          </svg>
        </div>
      </div>
    </div>
  );
};

export default PricingBox;


---

File: index.js

"use client"
import { useEffect, useState } from "react";

export default function ScrollToTop() {
  const [isVisible, setIsVisible] = useState(false);

  // Top: 0 takes us all the way back to the top of the page
  // Behavior: smooth keeps it smooth!
  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  useEffect(() => {
    // Button is displayed after scrolling for 500 pixels
    const toggleVisibility = () => {
      if (window.pageYOffset > 300) {
        setIsVisible(true);
      } else {
        setIsVisible(false);
      }
    };

    window.addEventListener("scroll", toggleVisibility);

    return () => window.removeEventListener("scroll", toggleVisibility);
  }, []);

  return (
    <div className="fixed bottom-10 right-4 z-[99]">
      {isVisible && (
        <div
          onClick={scrollToTop}
          aria-label="scroll to top"
          className="flex h-10 w-10 cursor-pointer items-center justify-center rounded-md bg-blue-900 text-white shadow-md transition duration-300 ease-in-out hover:bg-opacity-80 hover:shadow-signUp"
        >
          <span className="mt-[6px] h-3 w-3 rotate-45 border-t border-l border-white"></span>
        </div>
      )}
    </div>
  );
}


---

File: CardSkeleton.js

import React from 'react'


// ====================== User Card Skeleton ======================
export default function CardSkeleton() {
  return (
    <div className="sm:mx-4 p-2 md:w-96 w-screen sm:p-4 h-full rounded-2xl shadow-lg flex flex-col gap-5 select-none">
      <div className="h-full sm:h-full w-full rounded-xl bg-gray-400 animate-pulse" ></div>
      <div className="flex flex-col flex-1 gap-5 sm:p-2">
        <div className="flex flex-1 flex-col gap-3">
          <div className="bg-gray-400 w-full animate-pulse h-14 rounded-2xl" ></div>
          <div className="bg-gray-400 w-full animate-pulse h-3 rounded-2xl" ></div>
          <div className="bg-gray-400 w-full animate-pulse h-3 rounded-2xl" ></div>
          <div className="bg-gray-400 w-full animate-pulse h-3 rounded-2xl" ></div>
          <div className="bg-gray-400 w-full animate-pulse h-3 rounded-2xl" ></div>
        </div>
        <div className="mt-auto flex gap-3">
          <div className="bg-gray-400 w-20 h-8 animate-pulse rounded-full" ></div>
          <div className="bg-gray-400 w-20 h-8 animate-pulse rounded-full" ></div>
          <div className="bg-gray-400 w-20 h-8 animate-pulse rounded-full ml-auto" ></div>
        </div>
      </div>
    </div>
  )
}


// ====================================================

---

File: CommentCardSkeleton.js

import React from 'react'


// ====================== User Card Skeleton ======================
export default function CommentCardSkeleton() {
  return (
    <div className="sm:mx-4 p-2 md:w-96 w-screen sm:p-4 h-full rounded-2xl shadow-lg flex flex-col gap-5 select-none">
      <div className="flex flex-col flex-1 gap-5 sm:p-2">
        <div className="flex flex-1 flex-col gap-3">
          <div className="bg-gray-400 w-full animate-pulse h-3 rounded-2xl" ></div>
          <div className="bg-gray-400 w-full animate-pulse h-3 rounded-2xl" ></div>
          <div className="bg-gray-400 w-full animate-pulse h-3 rounded-2xl" ></div>
        </div>

      </div>
    </div>
  )
}


// ====================================================

---

File: FeedSkeleton.js

import React from 'react';
import PostCardSkeleton from './PostCardSkeleton';


// ====================== Feed Skeleton ======================
export default function FeedSkeleton() {

  return (
    <div className='flex flex-wrap justify-center items-center mt-8'>
      <PostCardSkeleton />
      <PostCardSkeleton />
      <PostCardSkeleton />
      <PostCardSkeleton />
    </div>
  )
}


---

File: ParagraphSkeletonLoader.js

import React from 'react'


// ====================== Paragraph / Blog Style Skeleton ======================
export default function ParagraphSkeletonLoader() {

  return (
    <div className="min-h-screen mt-8">

      <div className="w-full mx-auto px-4 py-8">
        <div role="status" className="flex items-center justify-center h-56 w-full bg-gray-400 rounded-lg animate-pulse dark:bg-gray-700">
          <svg className="w-10 h-10 text-gray-400 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
            <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.98 2.98 0 0 0 .13 5H5Z" />
            <path d="M14.066 0H7v5a2 2 0 0 1-2 2H0v11a1.97 1.97 0 0 0 1.934 2h12.132A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.934-2ZM9 13a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-2a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2Zm4 .382a1 1 0 0 1-1.447.894L10 13v-2l1.553-1.276a1 1 0 0 1 1.447.894v2.764Z" />
          </svg>
          <span className="sr-only">Loading...</span>
        </div>
      </div>

      <header className="py-4">
        <div className="max-w-4xl mx-auto px-4">
          <div className="animate-pulse flex items-center space-x-4">
            <div className="h-12 w-12 bg-gray-400 rounded-full"></div>
            <div>
              <div className="h-4 w-20 bg-gray-400 rounded"></div>
              <div className="h-4 w-16 bg-gray-400 rounded mt-2"></div>
            </div>
          </div>
        </div>
      </header>
      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="animate-pulse space-y-4">
          <div className="h-4 bg-gray-400 rounded w-2/3"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded w-1/2"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded w-3/4"></div>
        </div>

        <div className="animate-pulse space-y-4 mt-12">
          <div className="h-4 bg-gray-400 rounded w-2/3"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded w-1/2"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="animate-pulse space-y-4">
          <div className="h-4 bg-gray-400 rounded w-2/3"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded w-1/2"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded w-3/4"></div>
        </div>

        <div className="animate-pulse space-y-4 mt-12">
          <div className="h-4 bg-gray-400 rounded w-2/3"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded w-1/2"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="animate-pulse space-y-4">
          <div className="h-4 bg-gray-400 rounded w-2/3"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded w-1/2"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded w-3/4"></div>
        </div>

        <div className="animate-pulse space-y-4 mt-12">
          <div className="h-4 bg-gray-400 rounded w-2/3"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded w-1/2"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
          <div className="h-4 bg-gray-400 rounded"></div>
        </div>
      </div>
    </div>
  )
}

// ==================================================================

---

File: PostCardSkeleton.js

import React from 'react'
// import SkeletonLoader from './Skeleton'

// ====================== Post Card Skeleton ======================
export default function PostCardSkeleton() {
  return (
    <div className='md:w-96 my-4 md:mx-2 w-screen mx-auto'>

      <div className="w-full p-4 border border-gray-400 rounded shadow animate-pulse md:p-6 dark:border-gray-700">
        <div className="flex items-center mb-4">
          <svg className="w-10 h-10 me-3 text-gray-400 dark:text-gray-700" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 0a10 10 0 1 0 10 10A10.011 10.011 0 0 0 10 0Zm0 5a3 3 0 1 1 0 6 3 3 0 0 1 0-6Zm0 13a8.949 8.949 0 0 1-4.951-1.488A3.987 3.987 0 0 1 9 13h2a3.987 3.987 0 0 1 3.951 3.512A8.949 8.949 0 0 1 10 18Z" />
          </svg>
          <div>
            <div className="h-2.5 bg-gray-400 rounded-full dark:bg-gray-700 w-32 mb-2"></div>
            <div className="w-48 h-2 bg-gray-400 rounded-full dark:bg-gray-700"></div>
          </div>
        </div>

        <div className="flex items-center justify-center h-48 mb-4 bg-gray-300 rounded dark:bg-gray-700">
          <svg className="w-10 h-10 text-gray-400 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
            <path d="M14.066 0H7v5a2 2 0 0 1-2 2H0v11a1.97 1.97 0 0 0 1.934 2h12.132A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.934-2ZM10.5 6a1.5 1.5 0 1 1 0 2.999A1.5 1.5 0 0 1 10.5 6Zm2.221 10.515a1 1 0 0 1-.858.485h-8a1 1 0 0 1-.9-1.43L5.6 10.039a.978.978 0 0 1 .936-.57 1 1 0 0 1 .9.632l1.181 2.981.541-1a.945.945 0 0 1 .883-.522 1 1 0 0 1 .879.529l1.832 3.438a1 1 0 0 1-.031.988Z" />
            <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.98 2.98 0 0 0 .13 5H5Z" />
          </svg>
        </div>
        <div className="h-2.5 bg-gray-400 rounded-full dark:bg-gray-700 w-48 mb-4"></div>
        <div className="h-2 bg-gray-400 rounded-full dark:bg-gray-700 mb-2.5"></div>
        <div className="h-2 bg-gray-400 rounded-full dark:bg-gray-700 mb-2.5"></div>
        <div className="h-2 bg-gray-400 rounded-full dark:bg-gray-700"></div>

      </div>
    </div>
  )
}

// ==================================================================

---

File: SkeletonLoader.css

.skeleton-loader {
  position: absolute;
  background-color: #d4d3d300;
  border-radius: 5px;
  overflow: hidden;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.skeleton-loader::before {
  content: '';
  position: absolute;
  top: 0;
  /* left: -100%; */
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(145, 145, 145, 0.829), transparent);
  /* Adjust angle as needed */
  /* animation: shine 1.5s infinite linear; */
  animation: shine 1.5s infinite;
}

@keyframes shine {

  /* 0% {
    left: -100%;
  }

  100% {
    left: 100%;
  } */
  100% {
    transform: translateX(100%);
  }
}

---

File: SkeletonLoader.js

import React from 'react';
import './SkeletonLoader.css'; // Import CSS file

const SkeletonLoader = () => {
  return (
    <div className="skeleton-loader"></div>
  );
}

export default SkeletonLoader;




---

File: UserHCardSkeleton.js

import React from 'react'

export default function UserHCardSkeleton() {
    return (
        <div className="sm:mx-4 p-2 md:w-96 w-screen sm:p-4 h-full rounded-2xl shadow-lg flex flex-col gap-5 select-none">
            <div className="max-w-4xl mx-auto px-4">
                <div className="animate-pulse flex items-center space-x-4">
                    <div className="h-12 w-12 bg-gray-400 rounded-full"></div>
                    <div>
                        <div className="h-4 w-24 bg-gray-400 rounded"></div>
                        <div className="h-4 w-24 bg-gray-400 rounded mt-2"></div>
                    </div>
                </div>
            </div>
        </div>
    )
}


---

File: UserProfileSkeleton.js

import React from 'react'
import CardSkeleton from './CardSkeleton'
import FeedSkeleton from './FeedSkeleton'
import ParagraphSkeletonLoader from './ParagraphSkeletonLoader'


// ===================== User Profile Skeleton =====================
export default function UserProfileSkeleton() {
  return (
    <div className='mt-8'>
      {/* <CardSkeleton /> */}
      <ParagraphSkeletonLoader />
      {/* <FeedSkeleton /> */}

    </div>
  )
}

// ===============================================================

---

File: UsersPageSkeleton.js

"use client"
import React from 'react'
import CardSkeleton from './CardSkeleton'


// ====================== Users /Friends Page Skeleton ======================
export default function UsersPageSkeleton() {


  return (
    <div className='flex flex-wrap justify-center items-center mt-8'>
      <CardSkeleton />
      <CardSkeleton />
      <CardSkeleton />
      <CardSkeleton />
    </div>
  )
}


---

File: Background.jsx

import React from 'react'

// ===================== Futuristic Background =====================

export default function Background1() {
    return (
        <div className="fixed inset-x-0 -top-10 -z-10 transform-gpu overflow-hidden blur-3xl sm:-top-80"
            aria-hidden="true" >

            {/* First Gradient Layer with Pulsing */}
            <div
                className="relative left-[calc(50%-11rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 rotate-[30deg] bg-gradient-to-r from-[#ff80b5] via-[#9089fc] to-[#80ffea] opacity-70 sm:left-[calc(50%-30rem)] sm:w-[72.1875rem] animate-pulse"
                style={{
                    clipPath:
                        'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
                }}
            />

            {/* Second Gradient Layer with Slow Spin */}
            <div
                className="aspect-[1155/678] w-[72.1875rem] bg-gradient-to-r from-[#80ffea] via-[#fcff80] to-[#ff80b5] opacity-50 animate-spin-slow"
                style={{
                    clipPath:
                        'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
                }}
            />

            {/* SVG Geometric Shapes with Animations */}
            <div className="absolute inset-0 flex justify-center items-center opacity-80">
                {/* Spinning Circle */}
                <svg
                    className="animate-spin-slow text-blue-400 w-64 h-64"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
               
                >
                    <circle cx="12" cy="12" r="10" />
                </svg>

                {/* Bouncing Hexagon */}
                <svg
                    className="absolute left-20 bottom-20 animate-bounce text-teal-400 w-32 h-32"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  
                >
                    <polygon points="12 2 19 6.5 19 17.5 12 22 5 17.5 5 6.5 12 2" />
                </svg>

                {/* Pulsing Square */}
                <svg
                    className="absolute right-20 top-20 w-40 h-40 animate-pulse text-pink-400"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  
                >
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                </svg>
            </div>

            {/* Additional Layer with Diagonal Gradient Movement */}
            <div
                className="absolute w-[50rem] h-[30rem] -top-32 left-32 bg-gradient-to-bl from-purple-500 via-pink-500 to-yellow-500 opacity-40 transform-gpu rotate-[45deg] animate-diagonal-move"
                style={{
                    clipPath: 'polygon(0 0, 100% 0, 100% 100%, 0% 100%)',
                }}
            />

        </div>
    )
}


---

File: Botbutton.jsx

'use client'

import { useState, useRef, useEffect } from "react"
import { Button } from "../ui/button"
import { useRouter } from 'next/navigation'
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "../ui/sheet"
import { ChatbotUI } from "./Chatbot"
import { BrainCircuitIcon } from "lucide-react"

export function AIChatbotSheet({ selectedQuestion, onAIChatbotClick }) {
  const [isOpen, setIsOpen] = useState(false)
  const triggerRef = useRef(null)
  const contentRef = useRef(null)
  const router = useRouter()

  const handleNavigation = () => {
    router.push('/study/dashboard/chatbot')
  }

  useEffect(() => {
    if (selectedQuestion && isOpen) {
      contentRef.current?.querySelector('form')?.dispatchEvent(
        new Event('submit', { cancelable: true, bubbles: true })
      )
    }
  }, [selectedQuestion, isOpen])

  const handleOpenChange = (open) => {
    setIsOpen(open)
    if (open) {
      onAIChatbotClick()
    }
  }

  return (
    <Sheet open={isOpen} onOpenChange={handleOpenChange}>
      <SheetTrigger asChild>
        <Button ref={triggerRef} variant="outline" onClick={() => setIsOpen(true)}>
          <BrainCircuitIcon className="h-5 w-5 mr-2" />
          AI Chatbot
        </Button>
      </SheetTrigger>
      <SheetContent side="right" className="w-full sm:max-w-md md:max-w-lg lg:max-w-xl xl:max-w-2xl p-0">
        <div className="flex flex-col h-full">
          <SheetHeader className="p-4 sm:p-6">
            <SheetTitle>AI Chatbot</SheetTitle>
            <Button onClick={handleNavigation} variant="outline" className="mt-2">
              Open Full Chatbot
            </Button>
            <SheetDescription className="mt-2">
              Chat with our AI assistant for help and information.
            </SheetDescription>
          </SheetHeader>
          <div className="flex-grow overflow-hidden">
            <ChatbotUI 
              initialMessage="Welcome! How can I assist you today?" 
              selectedQuestion={selectedQuestion}
            />
          </div>
        </div>
      </SheetContent>
    </Sheet>
  )
}

---

File: Chatbot.jsx

'use client'

import { useRef, useEffect, useState } from "react"
import { useChat } from 'ai/react'
import { Button } from "../ui/button"
import { Input } from "../ui/input"
import { ScrollArea } from "../ui/scroll-area"
import { Avatar, AvatarFallback, AvatarImage } from "../ui/avatar"
import { Card, CardHeader, CardContent, CardFooter } from "../ui/card"
import { SendIcon, UserIcon, BotIcon, Loader2Icon } from "lucide-react"

const STORAGE_KEY = 'chatbot_data'

export function ChatbotUI({ initialMessage = "Hello! How can I assist you today?", selectedQuestion }) {
  const [isClient, setIsClient] = useState(false)
  const [questionSubmitted, setQuestionSubmitted] = useState(false)

  const { messages, input, handleInputChange, handleSubmit, isLoading, setInput, setMessages } = useChat({
    initialMessages: [{ role: 'assistant', content: initialMessage }],
    api: '/api/chat',
    onFinish: (message) => {
      const updatedMessages = [...messages, message];
      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedMessages));
    },
  })

  const scrollAreaRef = useRef(null)
  const inputRef = useRef(null)
  const formRef = useRef(null)

  useEffect(() => {
    setIsClient(true)
    const storedMessages = localStorage.getItem(STORAGE_KEY)
    if (storedMessages) {
      setMessages(JSON.parse(storedMessages))
    }
  }, [setMessages])

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTo({
        top: scrollAreaRef.current.scrollHeight,
        behavior: 'smooth'
      })
    }
  }, [messages])

  useEffect(() => {
    if (selectedQuestion && isClient && !questionSubmitted) {
      const questionText = `Question: ${selectedQuestion.question}\nAnswer: ${selectedQuestion.answer}\n\nCan you explain this further or provide more context?`
      setInput(questionText)
      setQuestionSubmitted(true)
      formRef.current?.dispatchEvent(
        new Event('submit', { cancelable: true, bubbles: true })
      )
    }
  }, [selectedQuestion, setInput, isClient, questionSubmitted])

  useEffect(() => {
    if (!selectedQuestion) {
      setQuestionSubmitted(false)
    }
  }, [selectedQuestion])

  const handleFormSubmit = async (e) => {
    e.preventDefault()
    const currentInput = input.trim()
    if (!currentInput) return

    const userMessage = { role: 'user', content: currentInput }
    const updatedMessages = [...messages, userMessage]
    localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedMessages))
    
    setInput('')
    await handleSubmit(e)
  }

  const handleClearChat = () => {
    const initialMessages = [{ role: 'assistant', content: initialMessage }]
    setMessages(initialMessages)
    setInput("")
    setQuestionSubmitted(false)
    localStorage.setItem(STORAGE_KEY, JSON.stringify(initialMessages))
  }

  if (!isClient) {
    return null
  }

  return (
    <Card className="w-full h-full flex flex-col">
      <CardHeader className="px-4 py-3 sm:px-6 sm:py-4 border-b flex justify-between items-center">
        <h2 className="text-xl sm:text-2xl font-bold">AI Chatbot</h2>
        <Button onClick={handleClearChat} variant="outline" size="sm" className="text-xs sm:text-sm">
          Clear Chat
        </Button>
      </CardHeader>
      <CardContent className="flex-grow p-2 sm:p-4 overflow-hidden">
        <ScrollArea ref={scrollAreaRef} className="h-full pr-2 sm:pr-4">
          {Array.isArray(messages) && messages.map((message, index) => (
            <div
              key={index}
              className={`flex items-start space-x-2 mb-4 ${
                message.role === "user" ? "justify-end" : "justify-start"
              }`}
            >
              {message.role === "assistant" && (
                <Avatar className="h-6 w-6 sm:h-8 sm:w-8">
                  <AvatarFallback><BotIcon className="h-3 w-3 sm:h-4 sm:w-4" /></AvatarFallback>
                  <AvatarImage src="/placeholder.svg?height=32&width=32" alt="AI Avatar" />
                </Avatar>
              )}
              <div
                className={`p-2 sm:p-3 rounded-lg max-w-[75%] ${
                  message.role === "user"
                    ? "bg-primary text-primary-foreground"
                    : "bg-muted"
                }`}
              >
                <p className="text-xs sm:text-sm md:text-base break-words">{message.content}</p>
              </div>
              {message.role === "user" && (
                <Avatar className="h-6 w-6 sm:h-8 sm:w-8">
                  <AvatarFallback><UserIcon className="h-3 w-3 sm:h-4 sm:w-4" /></AvatarFallback>
                  <AvatarImage src="/placeholder.svg?height=32&width=32" alt="User Avatar" />
                </Avatar>
              )}
            </div>
          ))}
          {isLoading && (
            <div className="flex justify-center items-center py-2 sm:py-4">
              <Loader2Icon className="h-4 w-4 sm:h-6 sm:w-6 animate-spin text-primary" />
            </div>
          )}
        </ScrollArea>
      </CardContent>
      <CardFooter className="p-2 sm:p-4 border-t">
        <form ref={formRef} onSubmit={handleFormSubmit} className="flex space-x-2 w-full">
          <Input
            ref={inputRef}
            value={input}
            onChange={handleInputChange}
            placeholder="Type your message here..."
            className="flex-grow text-xs sm:text-sm md:text-base"
            disabled={isLoading}
            aria-label="Chat input"
          />
          <Button type="submit" size="icon" className="shrink-0" disabled={isLoading}>
            <SendIcon className="h-3 w-3 sm:h-4 sm:w-4 md:h-5 md:w-5" />
            <span className="sr-only">Send message</span>
          </Button>
        </form>
      </CardFooter>
    </Card>
  )
}

export default ChatbotUI

---

File: Dashboard.jsx

"use client"

import React, { useState } from 'react'
import { Bar, Line } from 'react-chartjs-2'
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, LineElement, Title, Tooltip, Legend, PointElement } from 'chart.js'
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../ui/tabs"
import { Card, CardContent, CardHeader, CardTitle } from "../ui/card"
import { Progress } from "../ui/progress"
import { Badge } from "../ui/badge"
import { Button } from "../ui/button"
import { ScrollArea } from "../ui/scroll-area"
import { BookOpen, Clock, Search, Coins, Trophy, Target, GraduationCap, Sun, Moon, Edit, PlayCircle, Award, ChevronRight, Plus, X } from "lucide-react"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "../ui/dialog"
import { Input } from "../ui/input"
import { Label } from "../ui/label"

ChartJS.register(CategoryScale, LinearScale, BarElement, LineElement, Title, Tooltip, Legend, PointElement)

const dummyData = {
  stats: {
    questionsAttended: 150,
    hoursStudied: 45,
    topicsSearched: 30,
    tokensLeft: 500,
    coursesCompleted: 3,
    overallProgress: 68
  },
  questionsAttempted: {
    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
    data: [20, 35, 45, 30, 55, 40],
  },
  topicsSearched: {
    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
    data: [10, 15, 20, 25, 18, 30],
  },
  learningStreak: {
    currentStreak: 7,
    longestStreak: 15,
    totalDays: 45
  }
}

const activityData = {
  recentNotes: [
    { id: 1, title: "Introduction to React Hooks", date: "2023-06-15", type: "note" },
    { id: 2, title: "Advanced CSS Techniques", date: "2023-06-14", type: "note" },
    { id: 3, title: "JavaScript Promises Explained", date: "2023-06-13", type: "note" },
    { id: 4, title: "RESTful API Design Principles", date: "2023-06-12", type: "note" },
    { id: 5, "title": "Introduction to GraphQL", date: "2023-06-11", type: "note" },
  ],
  bookmarkedQuestions: [
    { id: 1, title: "How does useEffect work?", date: "2023-06-10", type: "question" },
    { id: 2, title: "What's the difference between let and const?", date: "2023-06-09", type: "question" },
    { id: 3, title: "Explain CSS Grid vs Flexbox", date: "2023-06-08", type: "question" },
    { id: 4, title: "How to implement JWT authentication?", date: "2023-06-07", type: "question" },
    { id: 5, title: "Best practices for React performance optimization", date: "2023-06-06", type: "question" },
  ],
  recentActivities: [
    { id: 1, title: "Completed React Basics Quiz", date: "2023-06-15", type: "quiz" },
    { id: 2, title: "Watched 'Advanced JavaScript Concepts' video", date: "2023-06-14", type: "video" },
    { id: 3, title: "Submitted 'Build a REST API' project", date: "2023-06-13", type: "project" },
    { id: 4, title: "Earned 'JavaScript Expert' badge", date: "2023-06-12", type: "achievement" },
    { id: 5, title: "Started 'Machine Learning Fundamentals' course", date: "2023-06-11", type: "course" },
  ]
}

export default function StudentDashboard() {
  const [tasks, setTasks] = useState([])
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [newTask, setNewTask] = useState({ name: '', dueDate: '' })

  const addTask = (e) => {
    e.preventDefault()
    if (newTask.name && newTask.dueDate) {
      setTasks([...tasks, { ...newTask, completed: false }])
      setNewTask({ name: '', dueDate: '' })
      setIsDialogOpen(false)
    }
  }

  const toggleTask = (index) => {
    const updatedTasks = [...tasks]
    updatedTasks[index].completed = !updatedTasks[index].completed
    setTasks(updatedTasks)
  }

  return (
    <div className="min-h-screen p-4 transition-colors duration-200 backdrop-blur-sm text-foreground">
      <div className="container mx-auto">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-4xl font-bold text-primary">Student Dashboard</h1>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          <StatCard title="Questions Attended" value={dummyData.stats.questionsAttended} icon={<BookOpen className="h-6 w-6 text-blue-500" />} />
          <StatCard title="Hours Studied" value={dummyData.stats.hoursStudied} icon={<Clock className="h-6 w-6 text-green-500" />} />
          <StatCard title="Topics Searched" value={dummyData.stats.topicsSearched} icon={<Search className="h-6 w-6 text-purple-500" />} />
          <StatCard title="Tokens Left" value={dummyData.stats.tokensLeft} icon={<Coins className="h-6 w-6 text-yellow-500" />} />
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
          <Card className="col-span-2 bg-card">
            <CardHeader>
              <CardTitle className="text-xl font-semibold">Overall Progress</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center space-x-4">
                <Progress value={dummyData.stats.overallProgress} className="w-full" />
                <span className="text-2xl font-bold">{dummyData.stats.overallProgress}%</span>
              </div>
              <div className="mt-4 flex justify-between items-center">
                <div className="flex items-center">
                  <Trophy className="h-5 w-5 text-yellow-500 mr-2" />
                  <span>Courses Completed: {dummyData.stats.coursesCompleted}</span>
                </div>
                <div className="flex items-center">
                  <Target className="h-5 w-5 text-red-500 mr-2" />
                  <span>Next Milestone: 75%</span>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card className="bg-card">
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle className="text-xl font-semibold">Todo List</CardTitle>
              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
                <DialogTrigger asChild>
                  <Button variant="outline" size="icon">
                    <Plus className="h-4 w-4" />
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Add New Task</DialogTitle>
                  </DialogHeader>
                  <form onSubmit={addTask} className="space-y-4">
                    <div>
                      <Label htmlFor="taskName">Task Name</Label>
                      <Input
                        id="taskName"
                        value={newTask.name}
                        onChange={(e) => setNewTask({ ...newTask, name: e.target.value })}
                        required
                      />
                    </div>
                    <div>
                      <Label htmlFor="dueDate">Due Date</Label>
                      <Input
                        id="dueDate"
                        type="date"
                        value={newTask.dueDate}
                        onChange={(e) => setNewTask({ ...newTask, dueDate: e.target.value })}
                        required
                      />
                    </div>
                    <Button type="submit">Add Task</Button>
                  </form>
                </DialogContent>
              </Dialog>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-[200px]">
                <ul className="space-y-2">
                  {tasks.map((task, index) => (
                    <li
                      key={index}
                      className={`flex items-center justify-between p-2 rounded cursor-pointer ${
                        task.completed ? 'bg-muted' : 'hover:bg-muted/50'
                      }`}
                      onClick={() => toggleTask(index)}
                    >
                      <span className={task.completed ? 'line-through text-red-500' : ''}>{task.name}</span>
                      <span className="text-sm text-muted-foreground">{task.dueDate}</span>
                    </li>
                  ))}
                </ul>
              </ScrollArea>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
          <Card className="lg:col-span-2 bg-card">
            <Tabs defaultValue="all">
              <CardHeader>
                <div className="flex justify-between items-center">
                  <CardTitle className="text-xl font-semibold">Recent Activity</CardTitle>
                  <TabsList>
                    <TabsTrigger value="all">All</TabsTrigger>
                    <TabsTrigger value="notes">Notes</TabsTrigger>
                    <TabsTrigger value="bookmarks">Bookmarks</TabsTrigger>
                  </TabsList>
                </div>
              </CardHeader>
              <CardContent>
                <ScrollArea className="h-[400px] pr-4">
                  <TabsContent value="all">
                    <ActivityList activities={[...activityData.recentActivities, ...activityData.recentNotes, ...activityData.bookmarkedQuestions]} />
                  </TabsContent>
                  <TabsContent value="notes">
                    <ActivityList activities={activityData.recentNotes} />
                  </TabsContent>
                  <TabsContent value="bookmarks">
                    <ActivityList activities={activityData.bookmarkedQuestions} />
                  </TabsContent>
                </ScrollArea>
                <div className="mt-4 text-center">
                  <Button variant="outline" className="w-full">
                    View All Activities
                    <ChevronRight className="ml-2 h-4 w-4" />
                  </Button>
                </div>
              </CardContent>
            </Tabs>
          </Card>
          <Card className="bg-card">
            <CardHeader>
              <CardTitle className="text-xl font-semibold flex items-center">
                <Trophy className="h-5 w-5 mr-2 text-yellow-500" />
                Learning Streak
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <p className="text-2xl font-bold">{dummyData.learningStreak.currentStreak} days</p>
                  <p className="text-sm text-muted-foreground">Current Streak</p>
                </div>
                <div>
                  <p className="text-xl font-semibold">{dummyData.learningStreak.longestStreak} days</p>
                  <p className="text-sm text-muted-foreground">Longest Streak</p>
                </div>
                <div>
                  <p className="text-xl font-semibold">{dummyData.learningStreak.totalDays} days</p>
                  <p className="text-sm text-muted-foreground">Total Learning Days</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card className="bg-card">
            <CardHeader>
              <CardTitle className="text-xl font-semibold">Questions Attempted</CardTitle>
            </CardHeader>
            <CardContent>
              <Bar
                data={{
                  labels: dummyData.questionsAttempted.labels,
                  datasets: [
                    {
                      label: 'Questions Attempted',
                      data: dummyData.questionsAttempted.data,
                      backgroundColor: 'rgba(75, 192, 192, 0.6)',
                    },
                  ],
                }}
                options={{
                  scales: {
                    y: {
                      beginAtZero: true,
                    },
                  },
                }}
              />
            </CardContent>
          </Card>
          <Card className="bg-card">
            <CardHeader>
              <CardTitle className="text-xl font-semibold">Topics Searched</CardTitle>
            </CardHeader>
            <CardContent>
              <Line
                data={{
                  labels: dummyData.topicsSearched.labels,
                  datasets: [
                    {
                      label: 'Topics Searched',
                      data: dummyData.topicsSearched.data,
                      borderColor: 'rgb(255, 99, 132)',
                      backgroundColor: 'rgba(255, 99, 132, 0.5)',
                    },
                  ],
                }}
                options={{
                  scales: {
                    y: {
                      beginAtZero: true,
                    },
                  },
                }}
              />
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}

function ActivityList({ activities }) {
  return (
    <ul className="space-y-4">
      {activities.map(activity => (
        <li key={activity.id} className="flex items-center space-x-4 p-3 rounded-lg transition-colors duration-200 hover:bg-muted">
          <ActivityIcon type={activity.type} />
          <div className="flex-grow">
            <p className="font-medium text-sm">{activity.title}</p>
            <p className="text-xs text-muted-foreground">{activity.date}</p>
          </div>
          <Badge variant={getBadgeVariant(activity.type)}>{activity.type}</Badge>
        </li>
      ))}
    </ul>
  )
}

function ActivityIcon({ type }) {
  switch (type) {
    case 'note':
      return <Edit className="h-5 w-5 text-blue-500" />
    case 'question':
      return <BookOpen className="h-5 w-5 text-green-500" />
    case 'quiz':
      return <GraduationCap className="h-5 w-5 text-purple-500" />
    case 'video':
      return <PlayCircle className="h-5 w-5 text-red-500" />
    case 'project':
    case 'course':
      return <BookOpen className="h-5 w-5 text-yellow-500" />
    case 'achievement':
      return <Award className="h-5 w-5 text-pink-500" />
    default:
      return <BookOpen className="h-5 w-5 text-gray-500" />
  }
}

function getBadgeVariant(type) {
  switch (type) {
    case 'note':
      return 'default'
    case 'question':
      return 'secondary'
    case 'quiz':
      return 'destructive'
    case 'video':
      return 'outline'
    case 'project':
    case 'course':
      return 'default'
    case 'achievement':
      return 'secondary'
    default:
      return 'default'
  }
}

function StatCard({ title, value, icon }) {
  return (
    <Card className="bg-card">
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        {icon}
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
      </CardContent>
    </Card>
  )
}

---

File: dashsidebar.jsx

"use client";

import { useState } from "react";
import Link from "next/link";
import { Button } from "../ui/button";
import Image from "next/image";
export default function DashSidebar() {
  const [isCollapsed, setIsCollapsed] = useState(true);
  const [isHovered, setIsHovered] = useState(false);

  const handleMouseEnter = () => {
    if (isCollapsed) setIsHovered(true);
  };

  const handleMouseLeave = () => {
    if (isCollapsed) setIsHovered(false);
  };

  return (
    <aside
      className={`bg-background backdrop-blur-2xl border-r border-muted transition-all duration-300 ${
        isCollapsed && !isHovered
          ? "w-14 overflow-hidden"
          : "w-64 overflow-y-auto scrollbar-thin scrollbar-thumb-muted scrollbar-track-muted/40"
      }`}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <div className="flex h-14 items-center justify-between px-4">
        <Link href="/" className="flex items-center gap-2" prefetch={false}>
        <Image src="/images/logo/mainlogo.png"
              alt="logo"
              width={35}
              height={35}
              className="rounded-full"
            />
          <span
            className={`font-semibold transition-opacity duration-300 ${
              (isCollapsed && !isHovered) ? "opacity-0" : "opacity-100"
            }`}
          >
           LME
          </span>
        </Link>
        <Button
          variant="ghost"
          size="icon"
          onClick={() => setIsCollapsed(!isCollapsed)}
          className={`rounded-full transition-transform duration-300 ${
            isCollapsed ? "rotate-180" : "rotate-0"
          }`}
        >
          <ChevronLeftIcon className="h-5 w-5" />
          <span className="sr-only">Toggle Sidebar</span>
        </Button>
      </div>
      <nav className="mt-4  font-bold  space-y-7">
        <SidebarLink
          href="/study/dashboard"
          label="Dashboard"
          icon={<HomeIcon className="h-5 w-5" />}
          isCollapsed={isCollapsed && !isHovered}
        />
        <SidebarLink
          href="/study/dashboard/notes"
          label="Notes"
          icon={<NotebookIcon className="h-5 w-5" />}
          isCollapsed={isCollapsed && !isHovered}
        />
        <SidebarLink
          href="/study/dashboard/video"
          label="Video"
          icon={<VideoIcon className="h-5 w-5" />}
          isCollapsed={isCollapsed && !isHovered}
        />
        <SidebarLink
          href="/study/dashboard/question"
          label="Questions"
          icon={<QuestionIcon className="h-5 w-5" />}
          isCollapsed={isCollapsed && !isHovered}
        />
        <SidebarLink
          href="/study/dashboard/chatbot"
          label="Chatbot"
          icon={<ChatbotIcon className="h-5 w-5" />}
          isCollapsed={isCollapsed && !isHovered}
        />
        <SidebarLink
          href="#"
          label="Profile"
          icon={<ProfileIcon className="h-5 w-5" />}
          isCollapsed={isCollapsed && !isHovered}
        />
         <SidebarLink
          href="/study"
          label="New Topic"
          icon={<NewTopicIcon className="h-5 w-5" />}
          isCollapsed={isCollapsed && !isHovered}
        />
      </nav>
    </aside>
  );
}

// ... (rest of the code remains unchanged)
function NotebookIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect x="4" y="2" width="16" height="20" rx="2" ry="2" />
      <line x1="8" y1="2" x2="8" y2="22" />
      <line x1="16" y1="2" x2="16" y2="22" />
      <line x1="4" y1="10" x2="20" y2="10" />
    </svg>
  );
}

function QuestionIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <path d="M9 9a3 3 0 0 1 6 0c0 1.5-1 2.25-1.5 2.5S12 12 12 14" />
      <line x1="12" y1="17" x2="12" y2="17" />
    </svg>
  );
}

function ChatbotIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect x="2" y="3" width="20" height="14" rx="2" ry="2" />
      <path d="M12 17v4l-2-2h-4" />
      <circle cx="8" cy="10" r="1" />
      <circle cx="16" cy="10" r="1" />
    </svg>
  );
}

function ProfileIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="7" r="4" />
      <path d="M5.5 21a10 10 0 0 1 13 0" />
    </svg>
  );
}


function NewTopicIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <line x1="12" y1="8" x2="12" y2="16" />
      <line x1="8" y1="12" x2="16" y2="12" />
    </svg>
  );
}


function VideoIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect x="2" y="6" width="18" height="12" rx="2" ry="2" />
      <polygon points="16 12 10 9 10 15 16 12" />
    </svg>
  );
}


function ChevronLeftIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m15 18-6-6 6-6" />
    </svg>
  );
}

function HomeIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
      <polyline points="9 22 9 12 15 12 15 22" />
    </svg>
  );
}

function LineChartIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 3v18h18" />
      <path d="m19 9-5 5-4-4-3 3" />
    </svg>
  );
}

function MountainIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m8 3 4 8 5-5 5 15H2L8 3z" />
    </svg>
  );
}

function SettingsIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path
        d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"
      />
      <circle cx="12" cy="12" r="3" />
    </svg>
  );
}

function SidebarLink({ href, label, icon, isCollapsed }) {
  return (
    <Link
      href={href}
      className={`flex items-center gap-3 rounded-md px-4 py-2 text-muted-foreground transition-colors hover:bg-accent hover:text-accent-foreground ${
        isCollapsed ? "justify-center" : ""
      }`}
    >
      {icon}
      {!isCollapsed && <span>{label}</span>}
    </Link>
  );
}


---

File: EditorComponent.jsx

'use client'

import React, { useEffect, useRef, useState } from 'react'
import EditorJS from '@editorjs/editorjs'
import Header from '@editorjs/header'
import List from '@editorjs/list'
import Checklist from '@editorjs/checklist'
import Quote from '@editorjs/quote'
import LinkTool from '@editorjs/link'
import Table from '@editorjs/table'
import Marker from '@editorjs/marker'
import InlineCode from '@editorjs/inline-code'
import Title from "title-editorjs"
import { generateContent } from '../../app/action'
import { useInput } from '../../helper/Others/InputContext'
import AceCodeEditorJS, { AceCodeConfig } from "ace-code-editorjs"
import ace from "ace-builds"
import "ace-builds/esm-resolver"
import modeHTMLWorker from "ace-builds/src-noconflict/worker-html?url"
import Load1 from '../studyjam/Loader' // Assuming Load1 is in the same directory

ace.config.setModuleUrl("ace/mode/html_worker", modeHTMLWorker)
const LOCAL_STORAGE_KEY = 'editorData'
const Paragraph = require('editorjs-paragraph-with-alignment')

const aceConfig = {
  languages: {
    plain: {
      label: "Plain Text",
      mode: "ace/mode/plain_text",
    },
    html: {
      label: "HTML",
      mode: "ace/mode/html",
    },
  },
  options: {
    fontSize: 16,
    minLines: 4,
    theme: "ace/theme/monokai",
  },
}

export default function EditorComponent() {
  const { inputValue } = useInput()
  const editorRef = useRef(null)
  const [editorInstance, setEditorInstance] = useState(null)
  const [editorData, setEditorData] = useState(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)

  const fetchAndStoreData = async () => {
    setIsLoading(true)
    setError(null)
    try {
      if (!inputValue) {
        throw new Error('Please enter a topic to generate content.')
      }
      const data = await generateContent(inputValue)
      setEditorData(data)
      console.log(data)
      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data))
    } catch (error) {
      console.error('Error generating content:', error)
      setError(error instanceof Error ? error.message : 'An unknown error occurred')
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    const storedData = localStorage.getItem(LOCAL_STORAGE_KEY)
    if (storedData) {
      try {
        setEditorData(JSON.parse(storedData))
      } catch (error) {
        console.error('Error parsing stored data:', error)
        localStorage.removeItem(LOCAL_STORAGE_KEY)
      }
    }
  }, [])

  useEffect(() => {
    if (!editorRef.current || !editorData) {
      return
    }

    const initEditor = async () => {
      if (editorInstance) {
        await editorInstance.isReady
        editorInstance.render(editorData)
      } else {
        const editor = new EditorJS({
          holder: editorRef.current,
          tools: {
            title: Title,
            code: {
              class: AceCodeEditorJS,
              config: aceConfig,
            },
            header: Header,
            paragraph: {
              class: Paragraph,
              inlineToolbar: true,
            },
            list: List,
            checklist: Checklist,
            quote: Quote,
            linkTool: LinkTool,
            table: Table,
            marker: Marker,
            inlineCode: InlineCode,
          },
          data: editorData,
        })
        setEditorInstance(editor)
      }
    }

    initEditor()
  }, [editorData, editorInstance])

  useEffect(() => {
    return () => {
      if (editorInstance) {
        if (typeof editorInstance.destroy === 'function') {
          try {
            editorInstance.destroy()
            console.log('Editor destroyed successfully')
          } catch (e) {
            console.error('Error destroying editor:', e)
          }
        } else {
          console.warn('Destroy method is not available on editorInstance')
        }
      }
    }
  }, [editorInstance])

  const handleGenerateClick = () => {
    fetchAndStoreData()
  }

  const handleSaveClick = async () => {
    if (!editorInstance) return

    try {
      const savedData = await editorInstance.save()
      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(savedData))
      console.log('Editor data saved:', savedData)
    } catch (error) {
      console.error('Error saving editor content:', error)
      setError('Failed to save editor content')
    }
  }

  return (
    <div className="space-y-4 relative">
      <div className='flex justify-between'>  
        <h1 className="text-2xl font-bold mb-4">Digital Note</h1>
        <button
          onClick={handleGenerateClick}
          disabled={isLoading}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-blue-300"
        >
          {isLoading ? 'Generating...' : 'Generate New Content'}
        </button>
      </div>
      
      {error && (
        <div className="text-red-500 font-semibold">{error}</div>
      )}
      <div className={`relative ${isLoading ? '' : ''}`}>
        <div ref={editorRef} className="border p-4 rounded-md min-h-[400px]" />
        {isLoading && (<>
          
          <div className="absolute inset-0 flex justify-center items-center  bg-opacity-75 z-50">
          <Load1 />
          </div>
          </>
        )}
      </div>
      <button
        onClick={handleSaveClick}
        className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
      >
        Save Content
      </button>
    </div>
  )
}

---

File: Loader.jsx

import React from 'react';

function Load1() {
  return (
    <div className="fixed inset-0 flex justify-center items-center ">
      <div className="relative flex justify-center items-center">
        {/* Outer animated ring */}
        <div className="absolute animate-spin-slow rounded-full h-40 w-40 border-t-8 border-b-8 border-purple-400"></div>
        
        {/* Inner glowing pulse effect */}
        <div className="absolute rounded-full h-28 w-28 bg-purple-300 opacity-30 animate-pulse"></div>

        {/* Avatar image */}
        <img
          src="https://www.svgrepo.com/show/509001/avatar-thinking-9.svg"
          alt="Loader Avatar"
          className="rounded-full h-24 w-24 z-10"
        />
      </div>
    </div>
  );
}

export default Load1;


---

File: Question.jsx

'use client';

import { useState, useRef, useEffect } from 'react';
import { BookmarkIcon, SaveIcon, PlusCircle } from 'lucide-react';
import { Button } from '../ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';
import { AIChatbotSheet } from '../studyjam/Botbutton'
import { useInput } from '../../helper/Others/InputContext';
import Load1 from '../studyjam/Loader'
export default function QuestionAnswerPage() {
  const [filter, setFilter] = useState('mcq');
  const [showAnswers, setShowAnswers] = useState({});
  const [bookmarked, setBookmarked] = useState([]);
  const [savedToNotes, setSavedToNotes] = useState([]);
  const [isMounted, setIsMounted] = useState(false);
  const [selectedQuestion, setSelectedQuestion] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const [error, setError] = useState(null);
  const questionRefs = useRef([]);
  const { inputValue } = useInput();

  useEffect(() => {
    setIsMounted(true);
    fetchQuestions(filter);
  }, []);

  useEffect(() => {
    questionRefs.current = questionRefs.current.slice(0, questions.length);
  }, [questions]);

  const fetchQuestions = async (questionType, isMore = false) => {
    if (isMore) {
      setIsLoadingMore(true);
    } else {
      setIsLoading(true);
    }
    setError(null);

    // Check if questions are already in local storage
    const cachedQuestions = localStorage.getItem(`questions_${inputValue}_${questionType}`);
    if (cachedQuestions && !isMore) {
      setQuestions(JSON.parse(cachedQuestions));
      setIsLoading(false);
      return;
    }

    try {
      const response = await fetch('/api/question', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ topic: inputValue, type: questionType }),
      });
      if (!response.ok) {
        throw new Error('Failed to fetch questions');
      }
      const data = await response.json();
      const fetchedQuestions = data.questions || [];
      
      if (isMore) {
        setQuestions(prevQuestions => [...prevQuestions, ...fetchedQuestions]);
      } else {
        setQuestions(fetchedQuestions);
        // Store fetched questions in local storage only for initial fetch
        localStorage.setItem(`questions_${inputValue}_${questionType}`, JSON.stringify(fetchedQuestions));
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setIsLoading(false);
      setIsLoadingMore(false);
    }
  };

  const handleFilterChange = (value) => {
    setFilter(value);
    fetchQuestions(value);
  };

  const toggleAnswer = (id) => {
    setShowAnswers(prev => ({ ...prev, [id]: !prev[id] }));
  };

  const toggleBookmark = (id) => {
    setBookmarked(prev => 
      prev.includes(id) ? prev.filter(bookmarkId => bookmarkId !== id) : [...prev, id]
    );
  };

  const toggleSaveToNotes = (id) => {
    setSavedToNotes(prev => 
      prev.includes(id) ? prev.filter(noteId => noteId !== id) : [...prev, id]
    );
  };

  const handleAIChatbotClick = (question) => {
    setSelectedQuestion(question);
  };

  const handleGetMoreQuestions = () => {
    fetchQuestions(filter, true);
  };

  if (!isMounted) {
    return null;
  }

  if (isLoading) {
    return (<Load1 /> )




  }

  if (error) {
    return <div className="container mx-auto p-4 text-center text-red-500">Error: {error}</div>;
  }

  return (
    <div className="container mx-auto p-4 max-w-4xl">
      <h1 className="text-3xl font-bold mb-6 text-center">
        {`Questions on "${inputValue}"`}
      </h1>

      <div className="mb-6">
        <Select value={filter} onValueChange={handleFilterChange}>
          <SelectTrigger className="w-full">
            <SelectValue placeholder="Select question type" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="mcq">Multiple Choice</SelectItem>
            <SelectItem value="saq">Short Answer</SelectItem>
            <SelectItem value="numerical">Numerical</SelectItem>
            <SelectItem value="long">Long Question</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="space-y-6 max-h-[70vh] overflow-y-auto pr-4">
        {questions.map((question, index) => (
          <div 
            key={question.id} 
            ref={el => questionRefs.current[index] = el}
            className="backdrop-blur-xl shadow-lg rounded-xl p-6 transition-all duration-300 hover:shadow-xl"
          >
            <h2 className="text-xl md:text-2xl font-semibold mb-4">{question.question}</h2>
            
            {question.type === 'mcq' && question.options && (
              <ul className="list-disc pl-6 mb-4 space-y-2">
                {question.options.map((option, optionIndex) => (
                  <li key={optionIndex} className="text-lg">{option}</li>
                ))}
              </ul>
            )}

            <div className="flex flex-wrap gap-3 mb-4">
              <Button onClick={() => toggleAnswer(question.id)} className="flex-grow sm:flex-grow-0">
                {showAnswers[question.id] ? 'Hide Answer' : 'Show Answer'}
              </Button>
              <Button variant="outline" onClick={() => toggleBookmark(question.id)} className="flex-grow sm:flex-grow-0">
                <BookmarkIcon className={`h-5 w-5 ${bookmarked.includes(question.id) ? 'text-yellow-500' : ''}`} />
                <span className="ml-2">Bookmark</span>
              </Button>
              <Button variant="outline" onClick={() => toggleSaveToNotes(question.id)} className="flex-grow sm:flex-grow-0">
                <SaveIcon className={`h-5 w-5 ${savedToNotes.includes(question.id) ? 'text-green-500' : ''}`} />
                <span className="ml-2">Save to Notes</span>
              </Button>

              <AIChatbotSheet selectedQuestion={selectedQuestion} onAIChatbotClick={() => handleAIChatbotClick(question)} />
            </div>

            {showAnswers[question.id] && (
              <div className="bg-slate-900 backdrop-blur-md p-4 rounded-lg">
                <strong className="text-lg text-white">Answer:</strong> <span className="text-lg">{question.answer}</span>
              </div>
            )}
          </div>
        ))}
      </div>

      <div className="mt-8 text-center">
        <Button 
          onClick={handleGetMoreQuestions} 
          disabled={isLoadingMore}
          className="flex items-center justify-center"
        >
          {isLoadingMore ? (
            'Loading...'
          ) : (
            <>
              <PlusCircle className="mr-2 h-5 w-5" />
              Get More Questions
            </>
          )}
        </Button>
      </div>
    </div>
  );
}

---

File: Videocard.jsx

import React, { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "../ui/card"
import { Button } from "../ui/button"
import { Badge } from "../ui/badge"
import { Play, Pause, FileText } from 'lucide-react'



export default function VideoCard({ video, onSummarize }) {
  const [isPlaying, setIsPlaying] = useState(false);
  const [showSummary, setShowSummary] = useState(false);

  const getVideoId = (url) => {
    const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
    const match = url.match(regExp);
    return (match && match[2].length === 11) ? match[2] : '';
  };

  const videoId = getVideoId(video.url);

  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };


  const handleSummarize = () => {
   console.log("gf")
  };

  return (
    <Card className="overflow-hidden transition-shadow duration-300 hover:shadow-lg">
      <CardHeader className="p-4">
        <CardTitle className="text-lg font-bold line-clamp-2">{video.title}</CardTitle>
      </CardHeader>
      <CardContent className="p-4">
        <div className="relative aspect-w-16 aspect-h-9 mb-4">
          <iframe
            src={`https://www.youtube.com/embed/${videoId}${isPlaying ? '?autoplay=1' : ''}`}
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            className="w-full h-full rounded-md"
          ></iframe>
          <div className="absolute bottom-2 right-2">
            <Button
              size="sm"
              variant="secondary"
              className="opacity-80 hover:opacity-100"
              onClick={handlePlayPause}
            >
              {isPlaying ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
            </Button>
          </div>
        </div>
        <div className="flex justify-between items-center mb-2">
          <Badge variant="secondary" className="text-xs">
            {video.uploaded}
          </Badge>
          <Button
            size="sm"
            variant="outline"
            className="text-xs"
            onClick={handleSummarize}
          >
            <FileText className="h-4 w-4 mr-1" /> Summarize
          </Button>
        </div>
        {showSummary && video.summary ? (
          <div className="mt-2 p-2 bg-gray-100 rounded-md">
            <h4 className="font-semibold mb-1">Summary:</h4>
            <p className="text-sm">{video.summary}</p>
          </div>
        ) : (
          <p className="text-sm text-gray-600 line-clamp-3">{video.snippet}</p>
        )}
      </CardContent>
    
    </Card>
  )
}

---

File: Youtube.jsx

'use client'

import React, { useState, useEffect } from 'react'
import { Input } from "../ui/input"
import { Button } from "../ui/button"
import { useInput } from '../../helper/Others/InputContext'
import VideoCard from '../studyjam/Videocard'

export default function YouTubePage() {
  const { inputValue } = useInput()
  const [query, setQuery] = useState(inputValue)
  const [videos, setVideos] = useState([])
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)
  const [pagination, setPagination] = useState(null)

  useEffect(() => {
    const savedVideos = typeof window !== 'undefined' ? localStorage.getItem('videos') : null
    const savedPagination = typeof window !== 'undefined' ? localStorage.getItem('pagination') : null

    if (savedVideos) {
      setVideos(JSON.parse(savedVideos))
    }
    if (savedPagination) {
      setPagination(JSON.parse(savedPagination))
    }

    if (inputValue) {
      handleSearch(new Event('submit'))
    }
  }, [inputValue])

  const handleSearch = async (e, page = 1) => {
    e.preventDefault()
    setIsLoading(true)
    setError(null)

    try {
      const response = await fetch(`/api/video?query=${encodeURIComponent(query)}&page=${page}`)
      const data = await response.json()

      if (data.video_results) {
        setVideos(data.video_results)
        setPagination(data.pagination)
        if (typeof window !== 'undefined') {
          localStorage.setItem('videos', JSON.stringify(data.video_results))
          localStorage.setItem('pagination', JSON.stringify(data.pagination))
        }
      } else {
        throw new Error('No video results found')
      }
    } catch (err) {
      setError('Failed to fetch videos. Please try again.')
      console.error('Error fetching videos:', err)
    } finally {
      setIsLoading(false)
    }
  }

  const handleNextPage = (e) => {
    if (pagination && pagination.next_page) {
      handleSearch(e, pagination.next_page)
    }
  }

  const handleSummarize = async (videoId) => {
    setIsLoading(true)
    setError(null)

    try {
      // Create an event source for streaming
      const eventSource = new EventSource(`/api/summarize/stream?videoId=${videoId}`);

      eventSource.onmessage = (event) => {
        const data = JSON.parse(event.data);
        if (data.summary && data.keyPoints && data.jsxSummary) {
          // Update the video with the new summary
          setVideos((prevVideos) => {
            const updatedVideos = prevVideos.map((video) =>
              video.id === videoId  // Assuming `video.id` uniquely identifies the video
                ? { ...video, summary: data.summary, keyPoints: data.keyPoints, jsxSummary: data.jsxSummary }
                : video
            )
            // Save updated videos to localStorage
            if (typeof window !== 'undefined') {
              localStorage.setItem('videos', JSON.stringify(updatedVideos))
            }
            return updatedVideos
          })

          // Log the JSX summary to the console
          console.log('JSX Summary:', data.jsxSummary)
        }
      };

      eventSource.onerror = (err) => {
        setError('Failed to stream data. Please try again.')
        console.error('Error streaming data:', err);
        eventSource.close();
      };

      eventSource.onopen = () => {
        console.log('Streaming started.');
      };
    } catch (err) {
      setError(`Failed to summarize video: ${err.message}`)
      console.error('Error summarizing video:', err)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-6 text-center">YouTube Search</h1>
      <form onSubmit={handleSearch} className="mb-8">
        <div className="flex gap-2">
          <Input
            type="text"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            placeholder="Search for videos..."
            className="flex-grow"
          />
          <Button type="submit" disabled={isLoading}>
            {isLoading ? 'Searching...' : 'Search'}
          </Button>
        </div>
      </form>

      {error && <p className="text-red-500 mb-4 text-center">{error}</p>}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {videos.map((video) => (
          <VideoCard key={video.id} video={video} onSummarize={handleSummarize} />
        ))}
      </div>

      {pagination && pagination.next_page && (
        <div className="mt-8 text-center">
          <Button onClick={handleNextPage} variant="outline">Load More</Button>
        </div>
      )}
    </div>
  )
}


---

File: index.js

import SectionTitle from "../Common/SectionTitle";
import SingleTestimonial from "./SingleTestimonial";

const testimonialData = [
  {
    id: 1,
    name: "Musharof Chy",
    designation: "Founder @TailGrids",
    content:
      "Our members are so impressed. It's intuitive. It's clean. It's distraction free. If you're building a community.",
    image: "/images/testimonials/auth-01.png",
    star: 5,
  },
  {
    id: 2,
    name: "Devid Weilium",
    designation: "Founder @UIdeck",
    content:
      "Our members are so impressed. It's intuitive. It's clean. It's distraction free. If you're building a community.",
    image: "/images/testimonials/auth-02.png",
    star: 5,
  },
  {
    id: 3,
    name: "Lethium Frenci",
    designation: "Founder @Lineicons",
    content:
      "Our members are so impressed. It's intuitive. It's clean. It's distraction free. If you're building a community.",
    image: "/images/testimonials/auth-03.png",
    star: 5,
  },
];

const Testimonials = () => {
  return (
    <section className="relative z-10 bg-blue-900 py-16 md:py-20 lg:py-28">
      <div className="container">
        <SectionTitle
          title="What Our Users Says"
          paragraph="There are many variations of passages of Lorem Ipsum available but the majority have suffered alteration in some form."
          center
        />

        <div className="grid grid-cols-1 gap-x-8 gap-y-10 md:grid-cols-2 lg:grid-cols-3">
          {testimonialData.map((testimonial) => (
            <SingleTestimonial key={testimonial.id} testimonial={testimonial} />
          ))}
        </div>
      </div>
      <div className="absolute top-5 right-0 z-[-1]">
        <svg
          width="238"
          height="531"
          viewBox="0 0 238 531"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <rect
            opacity="0.3"
            x="422.819"
            y="-70.8145"
            width="196"
            height="541.607"
            rx="2"
            transform="rotate(51.2997 422.819 -70.8145)"
            fill="url(#paint0_linear_83:2)"
          />
          <rect
            opacity="0.3"
            x="426.568"
            y="144.886"
            width="59.7544"
            height="541.607"
            rx="2"
            transform="rotate(51.2997 426.568 144.886)"
            fill="url(#paint1_linear_83:2)"
          />
          <defs>
            <linearGradient
              id="paint0_linear_83:2"
              x1="517.152"
              y1="-251.373"
              x2="517.152"
              y2="459.865"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
            <linearGradient
              id="paint1_linear_83:2"
              x1="455.327"
              y1="-35.673"
              x2="455.327"
              y2="675.565"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" />
              <stop offset="1" stopColor="#4A6CF7" stopOpacity="0" />
            </linearGradient>
          </defs>
        </svg>
      </div>
      <div className="absolute left-0 bottom-5 z-[-1]">
        <svg
          width="279"
          height="106"
          viewBox="0 0 279 106"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g opacity="0.5">
            <path
              d="M-57 12L50.0728 74.8548C55.5501 79.0219 70.8513 85.7589 88.2373 79.3692C109.97 71.3821 116.861 60.9642 156.615 63.7423C178.778 65.291 195.31 69.2985 205.911 62.3533C216.513 55.408 224.994 47.7682 243.016 49.1572C255.835 50.1453 265.278 50.8936 278 45.3373"
              stroke="url(#paint0_linear_72:302)"
            />
            <path
              d="M-57 1L50.0728 63.8548C55.5501 68.0219 70.8513 74.7589 88.2373 68.3692C109.97 60.3821 116.861 49.9642 156.615 52.7423C178.778 54.291 195.31 58.2985 205.911 51.3533C216.513 44.408 224.994 36.7682 243.016 38.1572C255.835 39.1453 265.278 39.8936 278 34.3373"
              stroke="url(#paint1_linear_72:302)"
            />
            <path
              d="M-57 23L50.0728 85.8548C55.5501 90.0219 70.8513 96.7589 88.2373 90.3692C109.97 82.3821 116.861 71.9642 156.615 74.7423C178.778 76.291 195.31 80.2985 205.911 73.3533C216.513 66.408 224.994 58.7682 243.016 60.1572C255.835 61.1453 265.278 61.8936 278 56.3373"
              stroke="url(#paint2_linear_72:302)"
            />
            <path
              d="M-57 35L50.0728 97.8548C55.5501 102.022 70.8513 108.759 88.2373 102.369C109.97 94.3821 116.861 83.9642 156.615 86.7423C178.778 88.291 195.31 92.2985 205.911 85.3533C216.513 78.408 224.994 70.7682 243.016 72.1572C255.835 73.1453 265.278 73.8936 278 68.3373"
              stroke="url(#paint3_linear_72:302)"
            />
          </g>
          <defs>
            <linearGradient
              id="paint0_linear_72:302"
              x1="256.267"
              y1="53.6717"
              x2="-40.8688"
              y2="8.15715"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint1_linear_72:302"
              x1="256.267"
              y1="42.6717"
              x2="-40.8688"
              y2="-2.84285"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint2_linear_72:302"
              x1="256.267"
              y1="64.6717"
              x2="-40.8688"
              y2="19.1572"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
            <linearGradient
              id="paint3_linear_72:302"
              x1="256.267"
              y1="76.6717"
              x2="-40.8688"
              y2="31.1572"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="#4A6CF7" stopOpacity="0" />
              <stop offset="1" stopColor="#4A6CF7" />
            </linearGradient>
          </defs>
        </svg>
      </div>
    </section>
  );
};

export default Testimonials;


---

File: SingleTestimonial.js

import Image from "next/image";
const starIcon = (
  <svg width="18" height="16" viewBox="0 0 18 16" className="fill-current">
    <path d="M9.09815 0.361679L11.1054 6.06601H17.601L12.3459 9.59149L14.3532 15.2958L9.09815 11.7703L3.84309 15.2958L5.85035 9.59149L0.595291 6.06601H7.0909L9.09815 0.361679Z" />
  </svg>
);

const SingleTestimonial = ({ testimonial }) => {
  const { star, name, image, content, designation } = testimonial;

  let ratingIcons = [];
  for (let index = 0; index < star; index++) {
    ratingIcons.push(
      <span key={index} className="text-yellow">
        {starIcon}
      </span>
    );
  }

  return (
    <div className="w-full">
      <div
        className="wow fadeInUp rounded-md bg-white p-8 shadow-one dark:bg-[#1D2144] lg:px-5 xl:px-8"
        data-wow-delay=".1s"
      >
        <div className="mb-5 flex items-center space-x-1">{ratingIcons}</div>
        <p className="mb-8 border-b border-gray-700 border-opacity-10 pb-8 text-base leading-relaxed text-gray-700 dark:border-white dark:border-opacity-10 dark:text-white">
          â€œ{content}
        </p>
        <div className="flex items-center">
          <div className="relative mr-4 h-[50px] w-full max-w-[50px] overflow-hidden rounded-full">
            <Image src={image} alt={name} fill />
          </div>
          <div className="w-full">
            <h5 className="mb-1 text-lg font-semibold text-black dark:text-white lg:text-base xl:text-lg">
              {name}
            </h5>
            <p className="text-sm text-gray-700">{designation}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SingleTestimonial;


---

File: 3d-card.jsx

"use client";;
import { cn } from "../../lib/utils";
import React, {
  createContext,
  useState,
  useContext,
  useRef,
  useEffect,
} from "react";

const MouseEnterContext = createContext(undefined);

export const CardContainer = ({
  children,
  className,
  containerClassName
}) => {
  const containerRef = useRef(null);
  const [isMouseEntered, setIsMouseEntered] = useState(false);

  const handleMouseMove = (e) => {
    if (!containerRef.current) return;
    const { left, top, width, height } =
      containerRef.current.getBoundingClientRect();
    const x = (e.clientX - left - width / 2) / 25;
    const y = (e.clientY - top - height / 2) / 25;
    containerRef.current.style.transform = `rotateY(${x}deg) rotateX(${y}deg)`;
  };

  const handleMouseEnter = (e) => {
    setIsMouseEntered(true);
    if (!containerRef.current) return;
  };

  const handleMouseLeave = (e) => {
    if (!containerRef.current) return;
    setIsMouseEntered(false);
    containerRef.current.style.transform = `rotateY(0deg) rotateX(0deg)`;
  };
  return (
    (<MouseEnterContext.Provider value={[isMouseEntered, setIsMouseEntered]}>
      <div
        className={cn("py-6 flex items-center justify-center", containerClassName)}
        style={{
          perspective: "1000px",
        }}>
        <div
          ref={containerRef}
          onMouseEnter={handleMouseEnter}
          onMouseMove={handleMouseMove}
          onMouseLeave={handleMouseLeave}
          className={cn(
            "flex items-center justify-center relative transition-all duration-200 ease-linear",
            className
          )}
          style={{
            transformStyle: "preserve-3d",
          }}>
          {children}
        </div>
      </div>
    </MouseEnterContext.Provider>)
  );
};

export const CardBody = ({
  children,
  className
}) => {
  return (
    (<div
      className={cn(
        "h-96 w-96 [transform-style:preserve-3d]  [&>*]:[transform-style:preserve-3d]",
        className
      )}>
      {children}
    </div>)
  );
};

export const CardItem = ({
  as: Tag = "div",
  children,
  className,
  translateX = 0,
  translateY = 0,
  translateZ = 0,
  rotateX = 0,
  rotateY = 0,
  rotateZ = 0,
  ...rest
}) => {
  const ref = useRef(null);
  const [isMouseEntered] = useMouseEnter();

  useEffect(() => {
    handleAnimations();
  }, [isMouseEntered]);

  const handleAnimations = () => {
    if (!ref.current) return;
    if (isMouseEntered) {
      ref.current.style.transform = `translateX(${translateX}px) translateY(${translateY}px) translateZ(${translateZ}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotateZ(${rotateZ}deg)`;
    } else {
      ref.current.style.transform = `translateX(0px) translateY(0px) translateZ(0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg)`;
    }
  };

  return (
    (<Tag
      ref={ref}
      className={cn("w-fit transition duration-200 ease-linear", className)}
      {...rest}>
      {children}
    </Tag>)
  );
};

// Create a hook to use the context
export const useMouseEnter = () => {
  const context = useContext(MouseEnterContext);
  if (context === undefined) {
    throw new Error("useMouseEnter must be used within a MouseEnterProvider");
  }
  return context;
};


---

File: avatar.jsx

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "../../lib/utils"

const Avatar = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props} />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props} />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props} />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


---

File: background-beams.js

"use client";
import React from "react";
import { motion } from "framer-motion";
import { cn } from "../../lib/utils";

export const BackgroundBeams = (
  ({ className }) => {
    const paths = [
      "M-380 -189C-380 -189 -312 216 152 343C616 470 684 875 684 875",
      "M-373 -197C-373 -197 -305 208 159 335C623 462 691 867 691 867",
      "M-366 -205C-366 -205 -298 200 166 327C630 454 698 859 698 859",
      "M-359 -213C-359 -213 -291 192 173 319C637 446 705 851 705 851",
      "M-352 -221C-352 -221 -284 184 180 311C644 438 712 843 712 843",
      "M-345 -229C-345 -229 -277 176 187 303C651 430 719 835 719 835",
      "M-338 -237C-338 -237 -270 168 194 295C658 422 726 827 726 827",
      "M-331 -245C-331 -245 -263 160 201 287C665 414 733 819 733 819",
      "M-324 -253C-324 -253 -256 152 208 279C672 406 740 811 740 811",
      "M-317 -261C-317 -261 -249 144 215 271C679 398 747 803 747 803",
      "M-310 -269C-310 -269 -242 136 222 263C686 390 754 795 754 795",
      "M-303 -277C-303 -277 -235 128 229 255C693 382 761 787 761 787",
      "M-296 -285C-296 -285 -228 120 236 247C700 374 768 779 768 779",
      "M-289 -293C-289 -293 -221 112 243 239C707 366 775 771 775 771",
      "M-282 -301C-282 -301 -214 104 250 231C714 358 782 763 782 763",
      "M-275 -309C-275 -309 -207 96 257 223C721 350 789 755 789 755",
      "M-268 -317C-268 -317 -200 88 264 215C728 342 796 747 796 747",
      "M-261 -325C-261 -325 -193 80 271 207C735 334 803 739 803 739",
      "M-254 -333C-254 -333 -186 72 278 199C742 326 810 731 810 731",
      "M-247 -341C-247 -341 -179 64 285 191C749 318 817 723 817 723",
      "M-240 -349C-240 -349 -172 56 292 183C756 310 824 715 824 715",
      "M-233 -357C-233 -357 -165 48 299 175C763 302 831 707 831 707",
      "M-226 -365C-226 -365 -158 40 306 167C770 294 838 699 838 699",
      "M-219 -373C-219 -373 -151 32 313 159C777 286 845 691 845 691",
      "M-212 -381C-212 -381 -144 24 320 151C784 278 852 683 852 683",
      "M-205 -389C-205 -389 -137 16 327 143C791 270 859 675 859 675",
      "M-198 -397C-198 -397 -130 8 334 135C798 262 866 667 866 667",
      "M-191 -405C-191 -405 -123 0 341 127C805 254 873 659 873 659",
      "M-184 -413C-184 -413 -116 -8 348 119C812 246 880 651 880 651",
      "M-177 -421C-177 -421 -109 -16 355 111C819 238 887 643 887 643",
      "M-170 -429C-170 -429 -102 -24 362 103C826 230 894 635 894 635",
      "M-163 -437C-163 -437 -95 -32 369 95C833 222 901 627 901 627",
      "M-156 -445C-156 -445 -88 -40 376 87C840 214 908 619 908 619",
      "M-149 -453C-149 -453 -81 -48 383 79C847 206 915 611 915 611",
      "M-142 -461C-142 -461 -74 -56 390 71C854 198 922 603 922 603",
      "M-135 -469C-135 -469 -67 -64 397 63C861 190 929 595 929 595",
      "M-128 -477C-128 -477 -60 -72 404 55C868 182 936 587 936 587",
      "M-121 -485C-121 -485 -53 -80 411 47C875 174 943 579 943 579",
      "M-114 -493C-114 -493 -46 -88 418 39C882 166 950 571 950 571",
      "M-107 -501C-107 -501 -39 -96 425 31C889 158 957 563 957 563",
      "M-100 -509C-100 -509 -32 -104 432 23C896 150 964 555 964 555",
      "M-93 -517C-93 -517 -25 -112 439 15C903 142 971 547 971 547",
      "M-86 -525C-86 -525 -18 -120 446 7C910 134 978 539 978 539",
      "M-79 -533C-79 -533 -11 -128 453 -1C917 126 985 531 985 531",
      "M-72 -541C-72 -541 -4 -136 460 -9C924 118 992 523 992 523",
      "M-65 -549C-65 -549 3 -144 467 -17C931 110 999 515 999 515",
      "M-58 -557C-58 -557 10 -152 474 -25C938 102 1006 507 1006 507",
      "M-51 -565C-51 -565 17 -160 481 -33C945 94 1013 499 1013 499",
      "M-44 -573C-44 -573 24 -168 488 -41C952 86 1020 491 1020 491",
      "M-37 -581C-37 -581 31 -176 495 -49C959 78 1027 483 1027 483",
    ];
    return (
      <div
        className={cn(
          "absolute top-0 left-0  h-full w-full  [mask-size:40px] [mask-repeat:no-repeat] flex items-center justify-center z-[-2]",
          className
        )}
      >
        <svg
          className=" h-full w-full pointer-events-none absolute "
          width="100%"
          height="100%"
          viewBox="0 0 696 316"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M-380 -189C-380 -189 -312 216 152 343C616 470 684 875 684 875M-373 -197C-373 -197 -305 208 159 335C623 462 691 867 691 867M-366 -205C-366 -205 -298 200 166 327C630 454 698 859 698 859M-359 -213C-359 -213 -291 192 173 319C637 446 705 851 705 851M-352 -221C-352 -221 -284 184 180 311C644 438 712 843 712 843M-345 -229C-345 -229 -277 176 187 303C651 430 719 835 719 835M-338 -237C-338 -237 -270 168 194 295C658 422 726 827 726 827M-331 -245C-331 -245 -263 160 201 287C665 414 733 819 733 819M-324 -253C-324 -253 -256 152 208 279C672 406 740 811 740 811M-317 -261C-317 -261 -249 144 215 271C679 398 747 803 747 803M-310 -269C-310 -269 -242 136 222 263C686 390 754 795 754 795M-303 -277C-303 -277 -235 128 229 255C693 382 761 787 761 787M-296 -285C-296 -285 -228 120 236 247C700 374 768 779 768 779M-289 -293C-289 -293 -221 112 243 239C707 366 775 771 775 771M-282 -301C-282 -301 -214 104 250 231C714 358 782 763 782 763M-275 -309C-275 -309 -207 96 257 223C721 350 789 755 789 755M-268 -317C-268 -317 -200 88 264 215C728 342 796 747 796 747M-261 -325C-261 -325 -193 80 271 207C735 334 803 739 803 739M-254 -333C-254 -333 -186 72 278 199C742 326 810 731 810 731M-247 -341C-247 -341 -179 64 285 191C749 318 817 723 817 723M-240 -349C-240 -349 -172 56 292 183C756 310 824 715 824 715M-233 -357C-233 -357 -165 48 299 175C763 302 831 707 831 707M-226 -365C-226 -365 -158 40 306 167C770 294 838 699 838 699M-219 -373C-219 -373 -151 32 313 159C777 286 845 691 845 691M-212 -381C-212 -381 -144 24 320 151C784 278 852 683 852 683M-205 -389C-205 -389 -137 16 327 143C791 270 859 675 859 675M-198 -397C-198 -397 -130 8 334 135C798 262 866 667 866 667M-191 -405C-191 -405 -123 0 341 127C805 254 873 659 873 659M-184 -413C-184 -413 -116 -8 348 119C812 246 880 651 880 651M-177 -421C-177 -421 -109 -16 355 111C819 238 887 643 887 643M-170 -429C-170 -429 -102 -24 362 103C826 230 894 635 894 635M-163 -437C-163 -437 -95 -32 369 95C833 222 901 627 901 627M-156 -445C-156 -445 -88 -40 376 87C840 214 908 619 908 619M-149 -453C-149 -453 -81 -48 383 79C847 206 915 611 915 611M-142 -461C-142 -461 -74 -56 390 71C854 198 922 603 922 603M-135 -469C-135 -469 -67 -64 397 63C861 190 929 595 929 595M-128 -477C-128 -477 -60 -72 404 55C868 182 936 587 936 587M-121 -485C-121 -485 -53 -80 411 47C875 174 943 579 943 579M-114 -493C-114 -493 -46 -88 418 39C882 166 950 571 950 571M-107 -501C-107 -501 -39 -96 425 31C889 158 957 563 957 563M-100 -509C-100 -509 -32 -104 432 23C896 150 964 555 964 555M-93 -517C-93 -517 -25 -112 439 15C903 142 971 547 971 547M-86 -525C-86 -525 -18 -120 446 7C910 134 978 539 978 539M-79 -533C-79 -533 -11 -128 453 -1C917 126 985 531 985 531M-72 -541C-72 -541 -4 -136 460 -9C924 118 992 523 992 523M-65 -549C-65 -549 3 -144 467 -17C931 110 999 515 999 515M-58 -557C-58 -557 10 -152 474 -25C938 102 1006 507 1006 507M-51 -565C-51 -565 17 -160 481 -33C945 94 1013 499 1013 499M-44 -573C-44 -573 24 -168 488 -41C952 86 1020 491 1020 491M-37 -581C-37 -581 31 -176 495 -49C959 78 1027 483 1027 483M-30 -589C-30 -589 38 -184 502 -57C966 70 1034 475 1034 475M-23 -597C-23 -597 45 -192 509 -65C973 62 1041 467 1041 467M-16 -605C-16 -605 52 -200 516 -73C980 54 1048 459 1048 459M-9 -613C-9 -613 59 -208 523 -81C987 46 1055 451 1055 451M-2 -621C-2 -621 66 -216 530 -89C994 38 1062 443 1062 443M5 -629C5 -629 73 -224 537 -97C1001 30 1069 435 1069 435M12 -637C12 -637 80 -232 544 -105C1008 22 1076 427 1076 427M19 -645C19 -645 87 -240 551 -113C1015 14 1083 419 1083 419"
            stroke="url(#paint0_radial_242_278)"
            strokeOpacity="0.05"
            strokeWidth="0.5"
          ></path>

          {paths.map((path, index) => (
            <motion.path
              key={`path-` + index}
              d={path}
              stroke={`url(#linearGradient-${index})`}
              strokeOpacity="0.4"
              strokeWidth="0.5"
            ></motion.path>
          ))}
          <defs>
            {paths.map((path, index) => (
              <motion.linearGradient
                id={`linearGradient-${index}`}
                key={`gradient-${index}`}
                initial={{
                  x1: "0%",
                  x2: "0%",
                  y1: "0%",
                  y2: "0%",
                }}
                animate={{
                  x1: ["0%", "100%"],
                  x2: ["0%", "95%"],
                  y1: ["0%", "100%"],
                  y2: ["0%", `${93 + Math.random() * 8}%`],
                }}
                transition={{
                  duration: Math.random() * 10 + 10,
                  ease: "easeInOut",
                  repeat: Infinity,
                  delay: Math.random() * 10,
                }}
              >
                <stop stopColor="#18CCFC" stopOpacity="0"></stop>
                <stop stopColor="#18CCFC"></stop>
                <stop offset="32.5%" stopColor="#6344F5"></stop>
                <stop offset="100%" stopColor="#AE48FF" stopOpacity="0"></stop>
              </motion.linearGradient>
            ))}

            <radialGradient
              id="paint0_radial_242_278"
              cx="0"
              cy="0"
              r="1"
              gradientUnits="userSpaceOnUse"
              gradientTransform="translate(352 34) rotate(90) scale(555 1560.62)"
            >
              <stop offset="0.0666667" stopColor="var(--neutral-300)"></stop>
              <stop offset="0.243243" stopColor="var(--neutral-300)"></stop>
              <stop offset="0.43594" stopColor="white" stopOpacity="0"></stop>
            </radialGradient>
          </defs>
        </svg>
      </div>
    );
  }
);

BackgroundBeams.displayName = "BackgroundBeams";


---

File: badge.jsx

import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "../../lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  ...props
}) {
  return (<div className={cn(badgeVariants({ variant }), className)} {...props} />);
}

export { Badge, badgeVariants }


---

File: button.jsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "../../lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    (<Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props} />)
  );
})
Button.displayName = "Button"

export { Button, buttonVariants }


---

File: card.jsx

import * as React from "react"

import { cn } from "../../lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-xl border  backdrop-blur-xl text-card-foreground shadow", className)}
    {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props} />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


---

File: dialog.jsx

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { Cross2Icon } from "@radix-ui/react-icons"

import { cn } from "../../lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


---

File: input.jsx

import * as React from "react"

import { cn } from "../../lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    (<input
      type={type}
      className={cn(
        "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props} />)
  );
})
Input.displayName = "Input"

export { Input }


---

File: label.jsx

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority";

import { cn } from "../../lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


---

File: placeholders-and-vanish-input.jsx

"use client";

import { AnimatePresence, motion } from "framer-motion";
import { useCallback, useEffect, useRef, useState } from "react";
import { cn } from "../../lib/utils";

export default function PlaceholdersAndVanishInput({
  placeholders,
  onChange,
  onSubmit
}) {
  const [currentPlaceholder, setCurrentPlaceholder] = useState(0);

  const intervalRef = useRef(null);
  const startAnimation = () => {
    intervalRef.current = setInterval(() => {
      setCurrentPlaceholder((prev) => (prev + 1) % placeholders.length);
    }, 3000);
  };
  const handleVisibilityChange = () => {
    if (document.visibilityState !== "visible" && intervalRef.current) {
      clearInterval(intervalRef.current); // Clear the interval when the tab is not visible
      intervalRef.current = null;
    } else if (document.visibilityState === "visible") {
      startAnimation(); // Restart the interval when the tab becomes visible
    }
  };

  useEffect(() => {
    startAnimation();
    document.addEventListener("visibilitychange", handleVisibilityChange);

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [placeholders]);

  const canvasRef = useRef(null);
  const newDataRef = useRef([]);
  const inputRef = useRef(null);
  const [value, setValue] = useState("");
  const [animating, setAnimating] = useState(false);

  const draw = useCallback(() => {
    if (!inputRef.current) return;
    const canvas = canvasRef.current;
    if (!canvas) return;
    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    canvas.width = 800;
    canvas.height = 800;
    ctx.clearRect(0, 0, 800, 800);
    const computedStyles = getComputedStyle(inputRef.current);

    const fontSize = parseFloat(computedStyles.getPropertyValue("font-size"));
    ctx.font = `${fontSize * 2}px ${computedStyles.fontFamily}`;
    ctx.fillStyle = "#FFF";
    ctx.fillText(value, 16, 40);

    const imageData = ctx.getImageData(0, 0, 800, 800);
    const pixelData = imageData.data;
    const newData = [];

    for (let t = 0; t < 800; t++) {
      let i = 4 * t * 800;
      for (let n = 0; n < 800; n++) {
        let e = i + 4 * n;
        if (
          pixelData[e] !== 0 &&
          pixelData[e + 1] !== 0 &&
          pixelData[e + 2] !== 0
        ) {
          newData.push({
            x: n,
            y: t,
            color: [
              pixelData[e],
              pixelData[e + 1],
              pixelData[e + 2],
              pixelData[e + 3],
            ],
          });
        }
      }
    }

    newDataRef.current = newData.map(({ x, y, color }) => ({
      x,
      y,
      r: 1,
      color: `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${color[3]})`,
    }));
  }, [value]);

  useEffect(() => {
    draw();
  }, [value, draw]);

  const animate = (start) => {
    const animateFrame = (pos = 0) => {
      requestAnimationFrame(() => {
        const newArr = [];
        for (let i = 0; i < newDataRef.current.length; i++) {
          const current = newDataRef.current[i];
          if (current.x < pos) {
            newArr.push(current);
          } else {
            if (current.r <= 0) {
              current.r = 0;
              continue;
            }
            current.x += Math.random() > 0.5 ? 1 : -1;
            current.y += Math.random() > 0.5 ? 1 : -1;
            current.r -= 0.05 * Math.random();
            newArr.push(current);
          }
        }
        newDataRef.current = newArr;
        const ctx = canvasRef.current?.getContext("2d");
        if (ctx) {
          ctx.clearRect(pos, 0, 800, 800);
          newDataRef.current.forEach((t) => {
            const { x: n, y: i, r: s, color: color } = t;
            if (n > pos) {
              ctx.beginPath();
              ctx.rect(n, i, s, s);
              ctx.fillStyle = color;
              ctx.strokeStyle = color;
              ctx.stroke();
            }
          });
        }
        if (newDataRef.current.length > 0) {
          animateFrame(pos - 8);
        } else {
          setValue("");
          setAnimating(false);
        }
      });
    };
    animateFrame(start);
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter" && !animating) {
      vanishAndSubmit();
    }
  };

  const vanishAndSubmit = () => {
    setAnimating(true);
    draw();

    const value = inputRef.current?.value || "";
    if (value && inputRef.current) {
      const maxX = newDataRef.current.reduce((prev, current) => (current.x > prev ? current.x : prev), 0);
      animate(maxX);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    vanishAndSubmit();
    onSubmit && onSubmit(e);
  };
  return (
    (<form
      className={cn(
        "w-full relative max-w-xl mx-auto bg-white dark:bg-zinc-800 h-12 rounded-full overflow-hidden shadow-[0px_2px_3px_-1px_rgba(0,0,0,0.1),_0px_1px_0px_0px_rgba(25,28,33,0.02),_0px_0px_0px_1px_rgba(25,28,33,0.08)] transition duration-200",
        value && "bg-gray-50"
      )}
      onSubmit={handleSubmit}>
      <canvas
        className={cn(
          "absolute pointer-events-none  text-base transform scale-50 top-[20%] left-2 sm:left-8 origin-top-left filter invert dark:invert-0 pr-20",
          !animating ? "opacity-0" : "opacity-100"
        )}
        ref={canvasRef} />
      <input
        onChange={(e) => {
          if (!animating) {
            setValue(e.target.value);
            onChange && onChange(e);
          }
        }}
        onKeyDown={handleKeyDown}
        ref={inputRef}
        value={value}
        type="text"
        className={cn(
          "w-full relative text-sm sm:text-base z-50 border-none dark:text-white bg-transparent text-black h-full rounded-full focus:outline-none focus:ring-0 pl-4 sm:pl-10 pr-20",
          animating && "text-transparent dark:text-transparent"
        )} />
      <button
        disabled={!value}
        type="submit"
        className="absolute right-2 top-1/2 z-50 -translate-y-1/2 h-8 w-8 rounded-full disabled:bg-gray-100 bg-black dark:bg-zinc-900 dark:disabled:bg-zinc-800 transition duration-200 flex items-center justify-center">
        <motion.svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
          className="text-gray-300 h-4 w-4">
          <path stroke="none" d="M0 0h24v24H0z" fill="none" />
          <motion.path
            d="M5 12l14 0"
            initial={{
              strokeDasharray: "50%",
              strokeDashoffset: "50%",
            }}
            animate={{
              strokeDashoffset: value ? 0 : "50%",
            }}
            transition={{
              duration: 0.3,
              ease: "linear",
            }} />
          <path d="M13 18l6 -6" />
          <path d="M13 6l6 6" />
        </motion.svg>
      </button>
      <div
        className="absolute inset-0 flex items-center rounded-full pointer-events-none">
        <AnimatePresence mode="wait">
          {!value && (
            <motion.p
              initial={{
                y: 5,
                opacity: 0,
              }}
              key={`current-placeholder-${currentPlaceholder}`}
              animate={{
                y: 0,
                opacity: 1,
              }}
              exit={{
                y: -15,
                opacity: 0,
              }}
              transition={{
                duration: 0.3,
                ease: "linear",
              }}
              className="dark:text-zinc-500 text-sm sm:text-base font-normal text-neutral-500 pl-4 sm:pl-12 text-left w-[calc(100%-2rem)] truncate">
              {placeholders[currentPlaceholder]}
            </motion.p>
          )}
        </AnimatePresence>
      </div>
    </form>)
  );
}


---

File: progress.jsx

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "../../lib/utils"

const Progress = React.forwardRef(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}>
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }} />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


---

File: scroll-area.jsx

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "../../lib/utils"

const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}>
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}>
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


---

File: select.jsx

"use client"

import * as React from "react"
import {
  CaretSortIcon,
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from "@radix-ui/react-icons"
import * as SelectPrimitive from "@radix-ui/react-select"

import { cn } from "../../lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}>
    {children}
    <SelectPrimitive.Icon asChild>
      <CaretSortIcon className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronUpIcon />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronDownIcon />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}>
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn("p-1", position === "popper" &&
          "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]")}>
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props} />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


---

File: sheet.jsx

"use client";
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { Cross2Icon } from "@radix-ui/react-icons"
import { cva } from "class-variance-authority";

import { cn } from "../../lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref} />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

const SheetContent = React.forwardRef(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
      <SheetPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
    {...props} />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props} />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


---

File: switch.jsx

"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "../../lib/utils"

const Switch = React.forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}>
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )} />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


---

File: tabs.jsx

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "../../lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props} />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props} />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props} />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


---

File: UserCard.js

"use client"
import React, { useEffect, useState } from 'react'
import Link from 'next/link';
import { useAuth } from '../../helper/Auth1';
import { usePathname } from 'next/navigation';
import CardSkeleton from '../Skeleton/CardSkeleton';
import { GetUserDataByUserIdFunc } from '../../helper/User/GetUserDataById';


// =================== User Card ===================
export default function UserCard({ UserId }) {
  const currentRoute = usePathname();
  const { LoggedInUserData } = useAuth();

  const [QueryUserData, setQueryUserData] = useState(null);

  const [ProfileLoaderVisi, setProfileLoaderVisi] = useState(true);
  const [NotFoundVisibility, setNotFoundVisibility] = useState(false);


  // ==================== Fetch Query User Data ====================
  const FetchQueryUserData = async () => {
    try {
      const res = await GetUserDataByUserIdFunc(UserId);
      if (res.success) {
        setQueryUserData(res.user);
      }
      else {
        setNotFoundVisibility(true);
      }
    } catch (error) {
      setNotFoundVisibility(true);
    }
    setProfileLoaderVisi(false);
  }

  useEffect(() => {
    FetchQueryUserData();
  }, [LoggedInUserData, UserId, currentRoute]);



  // =================== Return ===================
  return (<>
    {!QueryUserData && ProfileLoaderVisi && <CardSkeleton />}


    {QueryUserData &&
      <div className="text-center text-gray-600 dark:text-gray-300 py-2 md:w-96 border-b-4 border-gray-700 rounded-lg dark:border-gray-700 border-opacity-60 md:mx-2 w-screen h-full">

        <div className="bg-transparent rounded-b lg:rounded-b-none lg:rounded-r h-full flex flex-col justify-between leading-normal">

          {/* ==================== Cover Pic ==================== */}
          <div className="rounded-t-lg overflow-hidden">
            <img className="h-32 object-top w-full" src={(QueryUserData?.coverPicUrl ?? "/cover.jpg")} alt='Cover Pic'
              onError={(e) => {
                e.target.onerror = null; // Prevent infinite loop
                e.target.src = '/cover.jpg'; // Set fallback image source
              }}
            />
          </div>


          {/* ==================== User Image ==================== */}
          <div className="mx-auto w-32 h-32 relative -mt-12 border-4 items-center border-white rounded-full overflow-hidden">
            <img className="object-contain object-center items-center h-32 w-32 bg-black" src={(QueryUserData.userPicUrl ?? '/user_default_pic.jpg')} alt='User Pic'
              onError={(e) => {
                e.target.onerror = null; // Prevent infinite loop
                e.target.src = '/user_default_pic.jpg'; // Set fallback image source
              }}
            />
          </div>

          {/* ==================== User Details ==================== */}
          <div className="text-center mt-2">

            {/* ==================== Display Name ==================== */}
            <h2 className="font-bold text-black dark:text-white">{QueryUserData?.displayName}</h2>


            {/* ==================== Username ==================== */}
            <div className='flex justify-center items-center flex-row'>
              <p className="font-bold text-gray-900 dark:text-gray-300">@{QueryUserData?.userName}</p>
              {QueryUserData?.isVerifiedBadge &&
                <img className="h-6 w-6 ml-2 inline object-contain object-cente rounded-full" src={'/images/verifiedbadge.png'} />
              }
            </div>


            {/* ==================== About ==================== */}
            <p className="text-gray-900 dark:text-gray-300 font-semibold break-words px-2">{QueryUserData?.about?.substring(0, 60)} {QueryUserData?.about?.length > 60 && '... more'}</p>


            {/* ==================== Address ==================== */}
            <p className="text-gray-900 dark:text-gray-300 font-medium break-words px-2">{QueryUserData?.address}</p>


            {/* ==================== BDay ==================== */}
            <p className="text-gray-900 dark:text-gray-300  font-medium">{QueryUserData?.birthday}</p>


            {/* ==================== Last Seen ==================== */}
            <p className="mb-3 text-gray-900 dark:text-gray-300 font-medium break-words px-2">Last Seen: {QueryUserData?.lastOnlineTime}</p>
          </div>

          {/* ==================== Visit Profile Btn ==================== */}
          <div className="p-4 border-t mx-4 mt-2">
            <Link href={`/user/${QueryUserData?.userName}`} className="w-full block mx-auto rounded-full bg-gray-700 hover:bg-gray-800 font-semibold text-white px-6 py-2">View Profile</Link>
          </div>


        </div>
      </div>
    }
  </>)
}

// ================================================================================

---

File: DangerBtns.js

import React from 'react'
import { useAuth } from '../../helper/Auth1';
import { Logout } from '../../helper/Auth/Logout';
import { faClose } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

// ==================== Danger Btns ====================
export default function DangerBtns({ setDangerButtonsVisi }) {

  const { setLoggedInUserData } = useAuth();


  // ================== Log Out Handel ==================
  const logoutHandel = () => {
    Logout();
    setDangerButtonsVisi(false);
    setLoggedInUserData(null);
  }


  // ============================= Return =============================
  return (
    <div className='p-1 w-screen h-screen bg-black bg-opacity-80 fixed top-0 z-[101] left-0 object-contain flex justify-center items-center' onClick={() => setDangerButtonsVisi(false)}>
      <div className="sm:min-w-96 min-h-40 min-w-full backdrop-blur-lg border-2 border-white relative text-center sm:p-16 p-2 rounded-lg" onClick={(e) => { e.stopPropagation() }}>
        <p className="text-red-400 text-xl mb-4 font-bold">Warning !</p>


        {/* ================== Log Out Btn ================== */}
        <button className="text-white bg-gradient-to-r from-red-400 via-red-500 to-red-600 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-red-300  shadow-lg shadow-red-500/50  font-medium rounded-lg text-sm px-5 py-2.5 text-center m-2" onClick={logoutHandel}>Log Out</button>


        {/* <p className="text-sm text-center text-gray-400 mt-4">Â© 2024 Designed By
          <a href="https://soumojitshome.vercel.app/" rel="noopener noreferrer" className="text-gray-400 ml-1" target="_blank">@soumojit_shome</a>
        </p> */}


        {/* ================== Cross PopUp Btn ================== */}
        <button type="button" className="absolute top-0 right-0 mx-4 my-2 z-[102] text-white bg-gradient-to-r  font-medium rounded-lg text-sm text-center" onClick={() => {
          setDangerButtonsVisi(false);
        }}>
          <FontAwesomeIcon icon={faClose} size='2xl' style={{ color: '#ffffff' }} />
        </button>


      </div>
    </div>
  )
}

// ========================================================================

---

File: UserProfile.js

"use client"
// ==================== Imports ====================
import React, { useEffect, useState } from 'react'
import Link from "next/link";
import DangerBtns from './DangerBtns';
import { useAuth } from '../../helper/Auth1';
import { useUrl } from 'nextjs-current-url';
import DisplayImg from '../Common/DisplayImg';
import NotFound from '../Common/NotFound';
import SocialMediaShareBox from '../Common/SocialMediaShareBox';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import UserProfileSkeleton from '../Skeleton/UserProfileSkeleton';
import { StringtoLinkExtract } from '../../helper/Others/StringtoLinkExtract';
import { GetUserDataByUsername } from '../../helper/User/GetUserDataByUsername';
import { faClose, faSignOutAlt, faBell, faShareSquare, faExpand } from '@fortawesome/free-solid-svg-icons';



// ==================== User Profile ====================
export default function UserProfile({ UserName }) {

	const { LoggedInUserData } = useAuth();
	const { href: currentUrl, pathname } = useUrl() ?? {};

	const [QueryUserData, setQueryUserData] = useState(null);


	const [DisplayImgLink, setDisplayImgLink] = useState(null);
	const [LoaderVisibility, setLoaderVisibility] = useState(true);
	const [DangerButtonsVisi, setDangerButtonsVisi] = useState(false);
	const [NotFoundVisibility, setNotFoundVisibility] = useState(false);
	const [DisplayImgBoxVisibility, setDisplayImgBoxVisibility] = useState(false);
	const [DisplayShareBoxVisibility, setDisplayShareBoxVisibility] = useState(false);



	// ==================== Fetch Query User Data ====================
	const FetchQueryUserData = async () => {
		console.log("User Profile Fetch");
		try {
			const Res = await GetUserDataByUsername(UserName);
			if (Res.success) {
				setQueryUserData(Res.user);
			}
			else {
				setNotFoundVisibility(true);
			}
		} catch (error) {
			setNotFoundVisibility(true);
		}
		setLoaderVisibility(false);
	}


	// ===================== Display Image Box =====================
	const DisplayImgBox = (link) => {
		setDisplayImgLink(link);
		setDisplayImgBoxVisibility(true);
	}


	useEffect(() => {
		FetchQueryUserData();
	}, [LoggedInUserData, UserName, currentUrl]);



	// ==================== Return ====================
	return (<>
		{DisplayShareBoxVisibility &&
			<SocialMediaShareBox link={currentUrl} setDisplayShareBoxVisibility={setDisplayShareBoxVisibility} />
		}

		{LoaderVisibility && <UserProfileSkeleton />}

		{DisplayImgBoxVisibility &&
			<DisplayImg url={DisplayImgLink} setDisplayImgBoxVisibility={setDisplayImgBoxVisibility} />
		}

		{NotFoundVisibility && <NotFound />}


		{/* ==================== User Data ==================== */}
		{QueryUserData && !LoaderVisibility && !NotFoundVisibility &&
			<div>
				<section className="text-gray-600 dark:text-gray-300 body-font border-b-2 border-gray-500 dark:border-gray-800">
					<div className="mx-auto w-full flex px-2 py-5 flex-row flex-wrap justify-evenly items-center ">


						{/* ==================== Cover Pic ==================== */}
						<div className='w-full items-center rounded-lg overflow-hidden' >
							<img className=" max-h-72 w-full object-center items-center rounded-lg cursor-pointer" src={QueryUserData.coverPicUrl ?? "/cover.jpg"} alt="Cover Pic"
								onError={(e) => {
									e.target.onerror = null; // Prevent infinite loop
									e.target.src = '/cover.jpg'; // Set fallback image source
								}}
								onDoubleClick={() => { DisplayImgBox(QueryUserData.coverPicUrl ?? "/cover.jpg") }} title="Double Click to View Full Screen" />
						</div>


						{/* ==================== User Image ==================== */}
						<div className="relative sm:-top-20 -top-10 w-full">
							<div className="md:m-2 items-center" >
								<img className="object-contain border-4 dark:border-white border-black object-center mx-auto items-center rounded-full w-40 h-40 sm:w-52 sm:h-52 bg-black cursor-pointer" src={QueryUserData.userPicUrl ?? '/user_default_pic.jpg'} alt="User Dp"
									onError={(e) => {
										e.target.onerror = null; // Prevent infinite loop
										e.target.src = '/user_default_pic.jpg'; // Set fallback image source
									}}
									onDoubleClick={() => { DisplayImgBox(QueryUserData.userPicUrl ?? '/user_default_pic.jpg') }}
									title="Double Click to View Full Screen" />
								{/* <figcaption className="mt-2 text-md text-center text-gray-700 dark:text-gray-300">{QueryUserData.isActive ? QueryUserData.User_Name : DisableAccountUserObj.User_Name}</figcaption> */}
							</div>


							{/* ==================== User Details ==================== */}
							<div className="m-2 flex flex-col sm:items-center items-start sm:text-center text-left ">

								{/* ==================== Display Name ==================== */}
								<h1 className="title-font md:text-4xl text-2xl mb-2 font-bold text-gray-900 dark:text-gray-300">
									{QueryUserData.displayName}
								</h1>


								{/* ==================== Verified Badge ==================== */}
								<div className='flex flex-row justify-center items-center mb-2'>
									<h1 className="title-font text-2xl font-bold text-gray-900 dark:text-gray-300">@{QueryUserData.userName}</h1>
									{QueryUserData.isVerifiedBadge &&
										<img className="h-6 w-6 ml-2 inline object-contain object-cente rounded-full" src={'/images/verifiedbadge.png'} />
									}
								</div>

								{/* <p className="tracking-tighter text-black dark:text-gray-400 md:text-lg">{QueryUserData.isActive ? QueryUserData.User_Posts.length : DisableAccountUserObj.PostNumber} Post</p> */}


								{/* ==================== Address ==================== */}
								{QueryUserData.address && QueryUserData.address != "" &&
									<p className="tracking-tighter font-semibold text-black dark:text-gray-400 md:text-lg">City : {QueryUserData.address}</p>
								}

								{/* ==================== BDay ==================== */}
								{QueryUserData.birthday && QueryUserData.birthday != "" &&
									<p className="tracking-tighter font-semibold text-black dark:text-gray-400 md:text-lg">Birthday : {QueryUserData.birthday}</p>
								}

								{/* ==================== Email ==================== */}
								{/* <p className="tracking-tighter font-semibold text-black dark:text-gray-400 md:text-lg">{QueryUserData.email}</p> */}


								{/* ==================== Last Seen ==================== */}
									<p className="tracking-tighter font-semibold text-black dark:text-gray-400 md:text-lg">Last Seen : {QueryUserData.lastOnlineTime}</p>

								{/* ==================== Reg Time ==================== */}
								<p className="tracking-tighter font-semibold text-black dark:text-gray-400 md:text-lg">Date Joined : {QueryUserData.regTime}</p>


								{/* ==================== About ==================== */}
								<p className="tracking-tighter  font-semibold lg:w-3/4 w-full break-words  text-black dark:text-gray-300 text-md">{StringtoLinkExtract(QueryUserData.about)}</p>


							</div>


							{/* <h1 className="m-2 mt-4 text-xl sm:text-center text-left font-extrabold text-purple-700 dark:text-purple-300 md:text-2xl lg:text-3xl">Links : </h1> */}

							{/* ==================== SocialProfiles ==================== */}
							{QueryUserData.socialProfiles && QueryUserData.socialProfiles.length != 0 &&
								<div className='m-2 w-full max-w-full overflow-hidden flex mt-2 justify-center items-start sm:items-center flex-col'>
									{QueryUserData.socialProfiles.map((val, index) => (
										<p key={index} className='text-black dark:text-gray-400 text-md max-w-full break-words font-bold sm:text-lg text-md'>{val.platform} :
											<a href={val.link} target='_blank' className='text-blue-900 dark:text-blue-300 break-words m-1 underline sm:text-lg text-sm font-bold'>{val.link.substring(0, 20)} {val.link.length > 20 && '...'}</a>
										</p>
									))}
								</div>
							}


							<div className="flex m-2 p-2 justify-center flex-wrap">
								{/* ==================== Share Btn ==================== */}
								<button onClick={() => setDisplayShareBoxVisibility(true)} className="text-white order-3 bg-gray-800 hover:bg-gray-900 focus:outline-none font-medium rounded-lg text-md px-5 py-2.5 me-2 mb-2  dark:bg-gray-800 dark:hover:bg-gray-700">
									<FontAwesomeIcon icon={faShareSquare} size='xl' style={{ color: '#ffffff' }} />
								</button>

								{QueryUserData && LoggedInUserData && QueryUserData._id == LoggedInUserData?._id && <>
									{/* ==================== Edit Profile Btn ==================== */}
									<Link href="/editprofile" className="text-white order-1 bg-gray-800 hover:bg-gray-900 focus:outline-none font-medium rounded-lg text-md px-4 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700">
										Edit Profile
									</Link>

									{/* ==================== Write Blog Btn ==================== */}
									{/* <Link href="/createblog" className="text-white order-1 bg-gray-800 hover:bg-gray-900 focus:outline-none font-medium rounded-lg text-md px-4 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700">
										Write Blog
									</Link> */}

									{/* ==================== Danger Btn ==================== */}
									<button onClick={() => setDangerButtonsVisi(true)} className="text-white order-4 bg-gradient-to-r from-red-400 via-red-500 to-red-600 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-red-300   font-medium rounded-lg text-md px-5 py-2.5 me-2 mb-2 text-current">
										<FontAwesomeIcon icon={faSignOutAlt} size='xl' style={{ color: '#ffffff' }} />
									</button>


									{/* ==================== Danger Box Popup ==================== */}
									{DangerButtonsVisi &&
										<DangerBtns setDangerButtonsVisi={setDangerButtonsVisi} />
									}
								</>}
							</div>
						</div>
					</div>
				</section >

				{/* ==================== User Posts ==================== */}
				{/* {QueryUserData.isActive &&
					<QueryUserBlogs userid={QueryUserData._id} />
				} */}

			</div >
		}

	</>)
}

// ================================================================================

---

File: UsersSec.js

"use client"
// ==================== Imports ====================
import React, { useEffect, useRef, useState } from 'react';
import UserCard from '../UserCard/UserCard';
import UsersPageSkeleton from '../Skeleton/UsersPageSkeleton';
import { FetchRandomUserIdsFunc } from '../../helper/User/FetchRandomUserIdsFunc';
import Breadcrumb from '../Common/Breadcrumb';
import SectionTitle from '../Common/SectionTitle';


// ==================== UsersSec ====================
export default function UsersSec() {

  const friendsPgaeLoadmoreBtnRef = useRef();

  const [PageLoaderVisi, setPageLoaderVisi] = useState(true);
  const [GetMoreBtnVisi, setGetMoreBtnVisi] = useState(true);
  const [GetMoreLoaderVisi, setGetMoreLoaderVisi] = useState(false);

  const [TotalUserNo, setTotalUserNo] = useState(0);
  const [skipCount, setskipCount] = useState(0);
  const [SelectedUserIds, setSelectedUserIds] = useState([]);


  // =================== Fetch Initial ===================
  const fetchData = async () => {
    try {
      const data = await FetchRandomUserIdsFunc(0, 4);
      if (data.success) {
        setSelectedUserIds(data.selectedUserIds);
        setskipCount(data.newskipCount);
        setTotalUserNo(data.totalUserNo);
      }
    } catch (error) {
      console.error(error);
      setSelectedUserIds([]);
    }
    setPageLoaderVisi(false);
  }



  // ==================== Get Load More ====================
  const GetMore = async () => {
    if (skipCount < TotalUserNo) {
      console.log("Get More Friend Data");
      setGetMoreLoaderVisi(true);
      try {
        const data = await FetchRandomUserIdsFunc(skipCount, 4);
        if (data.success) {
          setSelectedUserIds(prev => [...prev, ...data.selectedUserIds]);
          setskipCount(data.newskipCount);
        }
      } catch (error) {
        console.error(error);
      }
      setGetMoreLoaderVisi(false);
    }
  }

  useEffect(() => {
    fetchData();
  }, []);


  // =================== Scroll to Load More ===================
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
      };
      const target = friendsPgaeLoadmoreBtnRef.current;
      const observer = new IntersectionObserver((entries) => {
        const [entry] = entries;
        if (entry.isIntersecting) {
          GetMore();
        }
      }, observerOptions);

      if (target) {
        observer.observe(target);
      }
      return () => {
        if (target) {
          observer.unobserve(target);
        }
      };
    }
  }, [SelectedUserIds, GetMoreBtnVisi]);




  // ==================== Return ====================
  return (
    <div className='mt-10'>

      <SectionTitle
        title="Users"
        paragraph={TotalUserNo}
        center
        mb="20px"
      />

      {/* <Breadcrumb
      pageName="Users"
      description=""
    /> */}

      <div className='px-1 py-10 mx-auto min-h-screen'>

        {/* ==================== Search Bar ==================== */}
        {/* <SearchBar setCustomizeUsersOrder={setCustomizeUsersOrder} fetchData={fetchData} setGetMoreBtnVisi={setGetMoreBtnVisi} /> */}


        {PageLoaderVisi ? <UsersPageSkeleton /> : <>

          {/* ==================== User Cards ==================== */}
          {SelectedUserIds.length != 0 ?
            <div className="flex flex-wrap justify-center text-center">
              {SelectedUserIds.map((id, index) => (
                <div key={index} className="py-2 sm:mx-4">
                  <UserCard UserId={id} />
                </div>
              ))}
            </div>
            :
            <h1 className="mt-10 text-xl text-center font-bold tracking-tight text-gray-900 dark:text-gray-300 sm:text-5xl">User not found :(</h1>
          }


          {GetMoreBtnVisi && <>
            {GetMoreLoaderVisi ? <UsersPageSkeleton /> :
              <div ref={friendsPgaeLoadmoreBtnRef} className='w-full flex justify-center py-10'>
                <button className="text-white w-full mt-10 bg-gray-800 hover:bg-gray-900 rounded-lg text-sm px-5 py-2.5 me-2 mb-2 font-bold"
                  onClick={GetMore}>
                  {(TotalUserNo - skipCount) == 0 ?
                    "All Done " : "Click to Load More "
                  }
                  ({skipCount} / {TotalUserNo})
                </button>
              </div>
            }
          </>}
        </>}
      </div>
      <div className=" sticky bottom-0 left-0 right-0 z-[-1]">
        <img src="/images/video/shape.svg" alt="shape" className="w-full" />
      </div>
    </div>
  )
}

// ============================================================


---

File: index.js

"use client";
import Image from "next/image";
import { useState } from "react";
import SectionTitle from "../Common/SectionTitle";
// import ModalVideo from "react-modal-video";


const Video = () => {
  const [isOpen, setOpen] = useState(false);

  return (
    <section className="relative z-10 py-3 mb-10">
      <div className="container">
        <SectionTitle
          title="We are ready to help"
          paragraph="At Last Minute Engineering, we understand the unique challenges that engineering students face. Our dedicated support team is here to ensure you have the best possible learning experience."
          center
          mb="30px"
        />

        <div className="-mx-4 flex flex-wrap">
          <div className="w-full px-4">
            <div
              className="wow fadeInUp mx-auto max-w-[770px] overflow-hidden rounded-md"
              data-wow-delay=".15s"
            >
              <div className="relative items-center justify-center">
                {/* <Image src="/images/video/video.jpg" alt="video image" fill /> */}

                <iframe width="100%" height="300" src="https://www.youtube.com/embed/7Mc9C4Eht_o" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerPolicy="strict-origin-when-cross-origin" allowFullScreen></iframe>
                
              </div>
            </div>
          </div>
        </div>


      </div>

      {/* <ModalVideo
        channel="youtube"
        autoplay={true}
        start={true}
        isOpen={isOpen}
        videoId="L61p2uyiMSo"
        onClose={() => setOpen(false)}
      /> */}

      <div className="absolute bottom-0 left-0 right-0 z-[-1]">
        <img src="/images/video/shape.svg" alt="shape" className="w-full" />
      </div>
    </section>
  );
};

export default Video;


---

File: demoQuestions.js

export const demoQuestions = [
    {
      id: 1,
      type: 'mcq',
      question: 'What is the value of the universal gravitational constant (G)?',
      options: ['6.67 Ã— 10^-11 N mÂ²/kgÂ²', '9.8 m/sÂ²', '1.6 Ã— 10^-19 C', '3 Ã— 10^8 m/s'],
      answer: '6.67 Ã— 10^-11 N mÂ²/kgÂ²',
    },
    {
      id: 2,
      type: 'saq',
      question: 'State Newtonâ€™s Universal Law of Gravitation.',
      answer: 'Every particle of matter in the universe attracts every other particle with a force directly proportional to the product of their masses and inversely proportional to the square of the distance between their centers.',
    },
    {
      id: 3,
      type: 'numerical',
      question: 'Calculate the gravitational force between two 1 kg masses separated by a distance of 1 meter.',
      answer: '6.67 Ã— 10^-11 N',
    },
    {
      id: 4,
      type: 'mcq',
      question: 'Which planet has the strongest gravitational pull in the solar system?',
      options: ['Earth', 'Jupiter', 'Mars', 'Venus'],
      answer: 'Jupiter',
    },
    {
      id: 5,
      type: 'saq',
      question: 'What is the effect of altitude on the value of acceleration due to gravity (g)?',
      answer: 'The value of g decreases as altitude increases because the distance from the center of the Earth increases.',
    },
    {
      id: 6,
      type: 'mcq',
      question: 'Which of the following does not affect the gravitational force between two objects?',
      options: ['The masses of the objects', 'The distance between the objects', 'The shape of the objects', 'The gravitational constant'],
      answer: 'The shape of the objects',
    },
    {
      id: 7,
      type: 'saq',
      question: 'What is weightlessness?',
      answer: 'Weightlessness occurs when the force of gravity is not felt, such as when an object is in free fall or in orbit.',
    },
    {
      id: 8,
      type: 'numerical',
      question: 'Calculate the weight of a 70 kg person on the surface of the Moon. (Given: g on Moon = 1.6 m/sÂ²)',
      answer: '112 N',
    },
    {
      id: 9,
      type: 'mcq',
      question: 'What is the gravitational potential energy formula for an object of mass m at height h?',
      options: ['mgh', '1/2 mvÂ²', 'mgÂ²h', '2mgh'],
      answer: 'mgh',
    },
    {
      id: 10,
      type: 'long',
      question: 'Describe the role of gravitational force in shaping the universe. Discuss how it governs the motion of planets, stars, and galaxies, and how it influences the structure and evolution of the universe over billions of years.',
      answer: 'Gravitational force plays a fundamental role in shaping the universe... [expand answer here].',
    },
    {"answer": "A linked list is a linear data structure in which each element is a node that contains data and a pointer (or link) to the next node in the sequence.", "id": 1, "question": "What is a linked list?", "type": "saq"}, {"answer": "Nodes.", "id": 2, "question": "What are the individual elements in a linked list called?", "type": "saq"}, {"answer": "Head", "id": 3, "question": "What is the name of the first node in a linked list?", "type": "saq"}, {"answer": "Tail", "id": 4, "question": "What is the name of the last node in a linked list?", "type": "saq"}, {"answer": "Dynamic memory allocation.", "id": 5, "question": "What is the primary advantage of using a linked list over an array?", "type": "saq"}
  ];
  

---

File: MainDataSet.js


export const MainDataSet= [
  {
    "name": "B.Tech in Civil Engineering",
    "key": "ce",
    "children": [
      {
        "name": "Semester 1",
        "key": "sem1",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1g7_9bn1M0r7mmMT9o1Zdp37U8nPRKe3j"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1FOJ-cM0F_X10acPYB6gOFE20MZREb7q9"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "15_PWELuBXnpx1JJWvArCNRnDJSrFCEDz"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "13ng-puFDejnLW2AN7i8baogr8tD7wikV"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "17IZkoymA7Rl3x0eQnNnQvjkhPcMuQW_3"
          }
        ]
      },
      {
        "name": "Semester 2",
        "key": "sem2",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1aD4G_0MgW38lqrSg2RR5WmQgn1e67YRq"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1kPnoUmgGl_y8m_ujNvM2feAZrRfNRLAM"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1lJe8ep_EsB3K5_Qe3eicEqvhLbjW75w4"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1-cZ7u6GiJfgqJbiR25xqpE2kKuPPA_Sn"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1WSvJnsIsWzaDU-pqp7n0FBI-h4KZywQt"
          }
        ]
      },
      {
        "name": "Semester 3",
        "key": "sem3",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CE/sem3.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1J8gQFUHnGgeh_IWJDl6VoZWpoZcn_uu4"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1DxcMqoboGXa27P9QuvZM-XNYudk8y6qH"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1AmZUYjaZy2O-PoagAkx0CWPHBFy2bn0C"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1KTU7eqzVZoY5Au-4UMa-sBQjUJMYhEMF"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1UEjvjf2TogmlOezllQ71tRYAwUpx5Ic2"
          }
        ]
      },
      {
        "name": "Semester 4",
        "key": "sem4",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CE/sem4.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "13toa1aW18JOIqeZ4hTAINymCsUpBR2-x"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1RLGvGYM9AOiYSjGU25A8QA_twGMC33x5"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1YA_Jn1poNLlc7Z1lmUFIi_Jz0bDl6qGI"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1k22hIC8d56CihELrjNYO896MK4ol3-TN"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "18HA--IZjstCiv_HfdMaLWaQ9s_cDIplU"
          }
        ]
      },
      {
        "name": "Semester 5",
        "key": "sem5",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CE/sem5.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1JsvWL-Ibt-v3YNG_JgaBVdK6o5Kv3k5b"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "121i7erGK98DIp34kjOx6j7fRokSi528h"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1N3Mp176UEraPwCT1yk0FyBm74KpJOjfR"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1czguIVNG9dnTrDoRxy41zdM4XhvjYm7r"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1CtxmHjpzwPG38hTMEUNGBdM4X-XqEkZu"
          }
        ]
      },
      {
        "name": "Semester 6",
        "key": "sem6",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CE/sem6.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1px4qRpbrUU-C8FUhDxtJbmgYIxlz5l7S"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1VWt4w0YJGiDjHU0kWuCgMDBZBGVDezfw"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1Lxw3GLLQ4mqL5_PIZ9RsGblb4-kmc6Kc"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1ETUJJIQKAhwFOcBl6bfC0PXVrUYS2F_I"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1vwaUHHPSVBDn-rJ9OhlycyyAtYlxtKcD"
          }
        ]
      },
      {
        "name": "Semester 7",
        "key": "sem7",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CE/sem7.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1mzQmgMvNXyoex_IWk56Ems-vjIY8Dz_w"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1k-lXwZGa8tEuFwpSbUHodyvjDFo1DJ3M"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1E0gY8RXNFUIoxJm1suNGeAzGoMzo56vO"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1lwMQP8JZVn7qAn7gL3onDtsTc-gfqzAo"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1rdHZbODgvqXSavw2AurmWjKwlCr20oGE"
          }
        ]
      },
      {
        "name": "Semester 8",
        "key": "sem8",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CE/sem8.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "18zL5jlGFd0kFCxu1zsjC1Mh64oR-BNTf"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1aRoDlrHUQxruHXnC84JbMC0TiADxemVP"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1yls2hSSptjsVAjJTeCGf0k8fHTI7NLfT"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1w40pphFZNqlgw2DImttYgOVwPvAnWun9"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1Nn18zhnj735xw1J_okL3TVSVuApj41DY"
          }
        ]
      }
    ]
  },
  {
    "name": "B.Tech in Computer Sc. & Engineering",
    "key": "cse",
    "children": [
      {
        "name": "Semester 1",
        "key": "sem1",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1OUF-RCHL_dk1VTH2ta7q009-rgjDhV8U"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1wj4EjtdjLHZ0Hq5a01QGIfBS5JJNElzR"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1zT1v8C7xqyXC-F0j_pjy4-cpZTKe11BS"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1xHCgoK7H4pcl2K2nCiU6iZAhXTznVzbS"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1IaDdWN3tx4vTcO8WL7Y6is2lKQGkPla4"
          }
        ]
      },
      {
        "name": "Semester 2",
        "key": "sem2",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1v0M6O1nJFlOs38WlcZzuPupyGae0Nqv0"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1LsHvBMVMAghlXPAP-q4WlK9unplxjM-p"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1idAlQ5P59ntrudGJ-LnQNKTUGUf-bFg1"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1WcyuCcpukxGr6sDMtaYhqnktNWJsAJon"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1C7ERkeNplWYUrbvNkmfiL4xA7XVxfzQA"
          }
        ]
      },
      {
        "name": "Semester 3",
        "key": "sem3",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CSE/sem320.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1MBVv1c8pEfmcUIBGSnDgNKSczzLZOi46"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1ZpbZW_2_-OX_UZy395FOR8p-fCeL9OlZ"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1ePUpRTzX5MRJIJQ1IeW9FXBOrlCw57nJ"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1j-8nhGxpBaciKjXnQB7deIhDZabAzIZS"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1gju2TAh0tDX09efjthUD2HIc7qK4II5k"
          }
        ]
      },
      {
        "name": "Semester 4",
        "key": "sem4",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CSE/sem420.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "12eNEsugAiBCjlxaBANxx4rWd5rxE6rnF"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1Au1RZbDl1TwRwbjAp2fr_kCeXrn2Onvq"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1fHHzKU0LOeqjuYZ2ajBY_m1gcXNXfouy"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1d9YIlxmrYMg69n01qd5mFUsBcX-vPeel"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1CHWuF1qUMfa7Ijkb9W3db6CRVcxVNFVp"
          }
        ]
      },
      {
        "name": "Semester 5",
        "key": "sem5",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CSE/sem520.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1SLvHRm8Ei_FaAzPjbaLrfqsx7Heu_0h8"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1jrTa2iiO1fo2ov7yTdojQ_XpQ2E4Q-0f"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1q2Ep-oDnlTFY_5KRfynuJPPPlI7cpdIE"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1SLrxlXmmo6erzRvjHnmIUvKoYY7tfguX"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1hVsbeFGTbK3nZ_p-pAMgJshyNp2gC_zo"
          }
        ]
      },
      {
        "name": "Semester 6",
        "key": "sem6",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CSE/sem620.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1YYEf9dgJGEJb2wWuwJo53gcgX_VmZi9s"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "10Vgvl1GGhznQmSmHX3-o2THKASo3Sy3T"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1hTMGMNJHLbmo6crh-TFlxdBjb0trlRl7"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1gKXMRvxxDS5qFuZgnvZa060etnvj-_9y"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1QdUPLRnlXRPEs6Y7IBcS2BOvvHI-zLt7"
          }
        ]
      },
      {
        "name": "Semester 7",
        "key": "sem7",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CSE/sem720.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "19LSFJ3DpTd0pQ0xROaFwbdd4fiP0J9vc"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1eyK9TEKqBXBlLyRC2s2pBI66Omh3Lubb"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1C_fV7_lJeq8-UG-mDR_abjfBlXfXRqj8"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1qFDVQqNB3W3ixxwlXrir_jyEzymf2dNu"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1CyM6W0FM-MWPGy18wE4A9nYTz75QDVU1"
          }
        ]
      },
      {
        "name": "Semester 8",
        "key": "sem8",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CSE/sem820.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1xrQdp4AE2FvG6qJLUg2Gioefb4250Bgf"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1bYYw6snJ1C3ttCZ1rrSNOn9J8EPSZw4O"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1hKVXtquB5NIECpC9UqAFgkrHAzGjWHZD"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1qkRvVuGdjP_2Wh6DTARMFHrm-T9oL6CU"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1Trw1NqB6ZNn_6kk5RGiQ6dlhGvvlX8oI"
          }
        ]
      }
    ]
  },
  {
    "name": "B.Tech in Information Technology",
    "key": "it",
    "children": [
      {
        "name": "Semester 1",
        "key": "sem1",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1OUF-RCHL_dk1VTH2ta7q009-rgjDhV8U"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1wj4EjtdjLHZ0Hq5a01QGIfBS5JJNElzR"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1zT1v8C7xqyXC-F0j_pjy4-cpZTKe11BS"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1xHCgoK7H4pcl2K2nCiU6iZAhXTznVzbS"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1IaDdWN3tx4vTcO8WL7Y6is2lKQGkPla4"
          }
        ]
      },
      {
        "name": "Semester 2",
        "key": "sem2",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1v0M6O1nJFlOs38WlcZzuPupyGae0Nqv0"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1LsHvBMVMAghlXPAP-q4WlK9unplxjM-p"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1idAlQ5P59ntrudGJ-LnQNKTUGUf-bFg1"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1WcyuCcpukxGr6sDMtaYhqnktNWJsAJon"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1C7ERkeNplWYUrbvNkmfiL4xA7XVxfzQA"
          }
        ]
      },
      {
        "name": "Semester 3",
        "key": "sem3",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/IT/sem3.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1MBVv1c8pEfmcUIBGSnDgNKSczzLZOi46"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1ZpbZW_2_-OX_UZy395FOR8p-fCeL9OlZ"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1ePUpRTzX5MRJIJQ1IeW9FXBOrlCw57nJ"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1j-8nhGxpBaciKjXnQB7deIhDZabAzIZS"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1gju2TAh0tDX09efjthUD2HIc7qK4II5k"
          }
        ]
      },
      {
        "name": "Semester 4",
        "key": "sem4",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/IT/sem4.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "12eNEsugAiBCjlxaBANxx4rWd5rxE6rnF"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1Au1RZbDl1TwRwbjAp2fr_kCeXrn2Onvq"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1fHHzKU0LOeqjuYZ2ajBY_m1gcXNXfouy"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1d9YIlxmrYMg69n01qd5mFUsBcX-vPeel"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1CHWuF1qUMfa7Ijkb9W3db6CRVcxVNFVp"
          }
        ]
      },
      {
        "name": "Semester 5",
        "key": "sem5",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/IT/sem5.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1SLvHRm8Ei_FaAzPjbaLrfqsx7Heu_0h8"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1jrTa2iiO1fo2ov7yTdojQ_XpQ2E4Q-0f"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1q2Ep-oDnlTFY_5KRfynuJPPPlI7cpdIE"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1SLrxlXmmo6erzRvjHnmIUvKoYY7tfguX"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1hVsbeFGTbK3nZ_p-pAMgJshyNp2gC_zo"
          }
        ]
      },
      {
        "name": "Semester 6",
        "key": "sem6",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/IT/sem6.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1YYEf9dgJGEJb2wWuwJo53gcgX_VmZi9s"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "10Vgvl1GGhznQmSmHX3-o2THKASo3Sy3T"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1hTMGMNJHLbmo6crh-TFlxdBjb0trlRl7"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1gKXMRvxxDS5qFuZgnvZa060etnvj-_9y"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1QdUPLRnlXRPEs6Y7IBcS2BOvvHI-zLt7"
          }
        ]
      },
      {
        "name": "Semester 7",
        "key": "sem7",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/IT/sem7.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "19LSFJ3DpTd0pQ0xROaFwbdd4fiP0J9vc"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1eyK9TEKqBXBlLyRC2s2pBI66Omh3Lubb"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1C_fV7_lJeq8-UG-mDR_abjfBlXfXRqj8"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1qFDVQqNB3W3ixxwlXrir_jyEzymf2dNu"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1CyM6W0FM-MWPGy18wE4A9nYTz75QDVU1"
          }
        ]
      },
      {
        "name": "Semester 8",
        "key": "sem8",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/IT/sem8.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1xrQdp4AE2FvG6qJLUg2Gioefb4250Bgf"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1bYYw6snJ1C3ttCZ1rrSNOn9J8EPSZw4O"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1hKVXtquB5NIECpC9UqAFgkrHAzGjWHZD"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1qkRvVuGdjP_2Wh6DTARMFHrm-T9oL6CU"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1Trw1NqB6ZNn_6kk5RGiQ6dlhGvvlX8oI"
          }
        ]
      }
    ]
  },
  {
    "name": "B.Tech in Electronics & Communications Engg",
    "key": "ece",
    "children": [
      {
        "name": "Semester 1",
        "key": "sem1",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1rstW35Zo4rwp8RlDTCDSBPyLP3g-NPIW"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1Buc1hza1CUQptCB9tER8KT-6xYAin4Ul"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1P-SyxDhzbE1QmiykmBjiqAJZ8iTeZ0HL"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1Ba050ILtwy0A6yCWLb-iwe_qvM2KLxS6"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "10JgvxbYFceC5N2zPMt24AjiqE-0x-Qk5"
          }
        ]
      },
      {
        "name": "Semester 2",
        "key": "sem2",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1PlON4bF2XlWL2JFEK54c-CzVWyLPo1sj"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1gX7udqRqxCnWsb39LxCX5P0llTUgvrC8"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1Oy8UI2BIbJIikSH6nilSafGcXGGDVKwx"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1_vz496JlXOHWJs5o5z3s48RRwjEdPxeM"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1skNP8tUqlEvipH_7VjRLZrXWv0qcBJAs"
          }
        ]
      },
      {
        "name": "Semester 3",
        "key": "sem3",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/ECE/sem3.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1KWib97gbVDUqnFRZWZfxxAvZoTV4tYAD"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "107SZJy4puRQKfNvel-OlW5klB-NNJ6Or"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1kUZCgE-XeJ_PCIxV_680P3xDMci8N917"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1FclHYqTuVih8fGx6k6N-Gilj9UT_W0oG"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1XcTjE7ow9YZUw8LO_W-mG_8rqwaHNxfK"
          }
        ]
      },
      {
        "name": "Semester 4",
        "key": "sem4",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/ECE/sem4.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1fe-lik4BxRJIU8-Z2qDPYBKgl8vHpzvn"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1rsofwmdFC-E5ZXhyBZVyuvQ6gHO1DQmF"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1DZ2h31ko8iwgYh5rEBjGkltLQ5drkzl4"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "19KpgLBkXYyZDivGx1aphNeeldtL26AAZ"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1CTBz2piIJMpf4MF2CVJX8pxJZ_Ma5vo-"
          }
        ]
      },
      {
        "name": "Semester 5",
        "key": "sem5",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/ECE/sem5.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1vXAymtiy62zrnH5l71IROpdr1xGt0xDc"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1JRHM57-3DzkFVDnezFBgtCNf0u2h3Uf1"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1E6iHW-LLPMnA9WvwnVdOE8gJfSkbAUro"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1APa_aA2MDyz6vOxTX8EglDgNqOz_9SNT"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "107mp8DbagIyLlDEqX-VxRBeQjue82ol9"
          }
        ]
      },
      {
        "name": "Semester 6",
        "key": "sem6",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/ECE/sem6.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1uTWYuJC_VbtaYBx-qD1ZqeNWwxtXYxT0"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1ymkayeU1sCe4IqjdSATihu043mVgaFAo"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1ZelRSBUqADVKgPVIyPBSBBNHWXmEFOsz"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1bRZ2go5kswgYJVk_lkDtFsDDevQ8xy6z"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1A8yzBUChmUCoRSx9BS8JEYDFKT3xB2kS"
          }
        ]
      },
      {
        "name": "Semester 7",
        "key": "sem7",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/ECE/sem7.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1-8ZlhEqCTSksGKcmc-JWDAWWBzLgHDki"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1-BujmHG40O3tjWjYR1wqgQfAMleKjTdt"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1-FiYOSF6YsmNvIEvxDM7lV0ty6zT-O6T"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1-JTmdSdi-5Q_ovm8U38UuOoKwOLlWMk7"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1-DQBoHPGnDQuoiXTbVGbSSe0lQYWjMcF"
          }
        ]
      },
      {
        "name": "Semester 8",
        "key": "sem8",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/ECE/sem8.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1-N4EZx-MdYxB3yMaAcrMN8NfNKoFARZi"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1-OAc8Qg32b3xnGill147cwsWobdGcB8P"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1-W1Tq96HuhNGxkT4F1zBb8__6rGLhRmK"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1-eMdHtUprCx_sm-kWSPKqNDE4rJZPzta"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1-TGv-xggkyImlTwjewEoOUvhYeQy-JW-"
          }
        ]
      }
    ]
  },
  {
    "name": "B.Tech in Electrical Engineering",
    "key": "ee",
    "children": [
      {
        "name": "Semester 1",
        "key": "sem1",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "10sIx_H5dZZO0fhMKekl43oZ6Gd3lJxVM?usp=drive_link"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "10sZPHn4qUL3El1ojCAyJlvTo5j6A9zYa?usp=drive_link"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "110oaYrZYjW_tgrMyQum7-2nXRcXnMAtU?usp=drive_link"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "111G3UUnrEIkweMiv45nnw4KYRVLN_GUS?usp=drive_link"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "11-P5FsjAyplZGNOV3U_NeSU5T7pnItut?usp=drive_link"
          }
        ]
      },
      {
        "name": "Semester 2",
        "key": "sem2",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1170lEfdK2T7pKBF-WAz4F-iDw6UvuG8t?usp=drive_link"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "11OACrW1Njqi15FB94_1gvWOOtbQJRf-K?usp=drive_link"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "11YmGvXRUm897g-EzANZ0Fgv9Xm8AnVp1?usp=drive_link"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "11bwZoaF22eNWJssy9qWgaoZGUTWlPLWW?usp=drive_link"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "11PsUr28_Ts5ov4jUB3JeyWsfOH8JPTbr?usp=drive_link"
          }
        ]
      },
      {
        "name": "Semester 3",
        "key": "sem3",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/EE/sem3.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "11inAXoi4mGtLd3V566NT4Nf5pzTBnguE?usp=drive_link"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "11jr9ii2Hl7Gy4WYD2Lwmpq2w0crp4YgS?usp=drive_link"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "11tQGr9lul8BwvvzDGc6ZhJD9od0PAult?usp=drive_link"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "11v4MPzSjeWxi5fXPcgUa8JTAf8U3Tj91?usp=drive_link"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "11o1Ys4LCuVcfoZZqssjStrba821TSbU5?usp=drive_link"
          }
        ]
      },
      {
        "name": "Semester 4",
        "key": "sem4",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/EE/sem4.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "11xVBy_AlrSlmJw7YA126PE77WSQ1ZJYc?usp=drive_link"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "120YbFP5JABgzepKf5MEbQB5H3OlNQYCE?usp=drive_link"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1234yqpMAgo5pzxf6Vm2c5wsZ24sFSGRY?usp=drive_link"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1243k0Gk5b6uistIjazdfz2Sg5O3UyVkw?usp=drive_link"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "122f0LSLcmEe3pJvw1cunOJMh8auEZhos?usp=drive_link"
          }
        ]
      },
      {
        "name": "Semester 5",
        "key": "sem5",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/EE/sem5.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "126TAb60ryWoTDAEWOBHt0_Bbslgh5FqV?usp=drive_link"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "12DIPbxMW8QceF-bRtlyBEc3BhA1FD_g4?usp=drive_link"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "12FupSjeRlzRM7UZhPUimkLwWbCuiVHks?usp=drive_link"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "12H1rdc5LmphEwMmlSaOTLKEjSIIOqZWK?usp=drive_link"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "12Fb6chlvWO707FnKDanGJsCyxN6VUrRY?usp=drive_link"
          }
        ]
      },
      {
        "name": "Semester 6",
        "key": "sem6",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/EE/sem6.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "12HCTPujial8E4yq3FfNEqu5yeEduONln?usp=drive_link"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "12JePBbA5R6nV23vPzUmkKLNZNZCQaLnn?usp=drive_link"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "12abxvSLGYYLi0GuKKyrDKBRcB7Irjko8?usp=drive_link"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "12ewogCerc1P1asunvUmuqgLB6H7AbCwH?usp=drive_link"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "12UnxKeHblOwNpY74TJucsp2xd9tXzN1q?usp=drive_link"
          }
        ]
      },
      {
        "name": "Semester 7",
        "key": "sem7",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/EE/sem7.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "12jCnmwAf7sD4G24Q4FcbarFdcKo_lCjt?usp=drive_link"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "12mAc9rqPPahT51n8aKiiN71-ztIvRVxT?usp=drive_link"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "12txIDcWwfmFKpvrw6uobS9Ya1_MoCLvK?usp=drive_link"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1303vVXYrfvvcU8lO_hMmftz3sQueH7iz?usp=drive_link"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "12nLqT9ecYQydsGCyOMT_IVpBcB6mE8hr?usp=drive_link"
          }
        ]
      },
      {
        "name": "Semester 8",
        "key": "sem8",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/EE/sem8.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "139YEPvOPN4ZViqDocQZ0ltepTCmYPPRq?usp=drive_link"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "13BGzUQD8b-IBeNxSLO2cqpATr1iyLG9u?usp=drive_link"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "13J0KFoPyseTn80PWL9NXJc4532DFsrGg?usp=drive_link"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "13JOUdjxW8CQNdwZOu3b3K6bfXRlJFP31?usp=drive_link"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "13BRiEt6Kk6mDfRAhdnXq4oViz-_iNN3b?usp=drive_link"
          }
        ]
      }
    ]
  },
  {
    "name": "B.Tech in Mechanical Engineering",
    "key": "me",
    "children": [
      {
        "name": "Semester 1",
        "key": "sem1",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 2",
        "key": "sem2",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 3",
        "key": "sem3",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/ME/sem3.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1IshnsOJkeSSUlSFGxbBUsZV1ltub2zli?usp=drive_link"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1gT5cYoBSfbUUX5FSJNueMh5azTl-wOKM?usp=drive_link"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1AFQqj3yt-Spx6_n-MyhP31ZDu2ThLZOZ?usp=drive_link"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1IYDQcG6tPUbj49hRTublj9VtCoFad1ut?usp=drive_link"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1O1zZ8C_pcVAqHXWSGMyWSgonBGtEtQyu?usp=drive_link"
          }
        ]
      },
      {
        "name": "Semester 4",
        "key": "sem4",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/ME/sem4.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1knO66DIgqkthXd9SZNMVtHuOQ_xydEfh?usp=drive_link"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1NBLMdo634IUCA8DQtKyqUHmlSSdUDVxz?usp=drive_link"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1XpSh3Hy2Lf2ymoyPHwk4KL1kHx-aePf1?usp=drive_link"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1jF6scYhczVIrc7I3hLAhEZ_g3zPjwQ_2?usp=drive_link"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "12F6pusAIGYZ785MpaNk3QlXfBm_p_YpZ?usp=drive_link"
          }
        ]
      },
      {
        "name": "Semester 5",
        "key": "sem5",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/ME/sem5.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "13E4Y-oiRne6pxUkg3ZwXvQ_wvB1mq4y_?usp=drive_link"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1-alBT0h9zOb7U1FoGvgWU_O9PjVy9xus?usp=drive_link"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1DxbzTl-McDGz_d4sT0q7nCRBdwKhRRSj?usp=drive_link"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1oMBHMUx3eck8iFFg_6XpJmHqs-btPFfT?usp=drive_link"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1zz-XT80O0qpDxJg53Ki_yvX4jmNmmfxD?usp=drive_link"
          }
        ]
      },
      {
        "name": "Semester 6",
        "key": "sem6",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/ME/sem6.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1YLXS3FN5Wm7J_Y3rZA7VqmCcCk98dl0w?usp=drive_link"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1WNieKbyzX95WFqvIpEu7yEQDq6kxCCq2?usp=drive_link"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1hPBy6LkN6XGeZCDNxiP3R7-27uwr4_gh?usp=drive_link"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "1cr7_Pfom16PhRHZDQ_KKjvL9MqYG3bQ6?usp=drive_link"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "1XqRcnqPkNv7vtnGurZCO_a0gDqn3guIZ?usp=drive_link"
          }
        ]
      },
      {
        "name": "Semester 7",
        "key": "sem7",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/ME/sem7.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "type": "folder",
            "id": "1HKvyKBvh-cW5UvfLF4vI3cUsBia3Op0j?usp=drive_link"
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "type": "folder",
            "id": "1kq32IajMJ3cTPUXLvEeI4bvFE-XEC5dd?usp=drive_link"
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "type": "folder",
            "id": "1YAGJAApFhnm2euM9ZWnfxVtCOLEbHciE?usp=drive_link"
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "type": "folder",
            "id": "14sEjWJjuo6flH1sd9qICGNCs0-yHOyju?usp=drive_link"
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "type": "folder",
            "id": "11oIbvCLcYEgVvceR-PXwe-vezhRhztQx?usp=drive_link"
          }
        ]
      },
      {
        "name": "Semester 8",
        "key": "sem8",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/ME/sem8.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      }
    ]
  },
  {
    "name": "B.Tech in Electrical & Electronics Engineering",
    "key": "eee",
    "children": [
      {
        "name": "Semester 1",
        "key": "sem1",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 2",
        "key": "sem2",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 3",
        "key": "sem3",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/EEE/sem3.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 4",
        "key": "sem4",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/EEE/sem4.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 5",
        "key": "sem5",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/EEE/sem5.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 6",
        "key": "sem6",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/EEE/sem6.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 7",
        "key": "sem7",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/EEE/sem7.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 8",
        "key": "sem8",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/EEE/sem8.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      }
    ]
  },
  {
    "name": "B.Tech in Computer Science and Business System",
    "key": "csbs",
    "children": [
      {
        "name": "Semester 1",
        "key": "sem1",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 2",
        "key": "sem2",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/BTECH.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 3",
        "key": "sem3",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CSBS/sem320.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 4",
        "key": "sem4",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CSBS/sem420.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 5",
        "key": "sem5",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CSBS/sem520.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 6",
        "key": "sem6",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CSBS/sem620.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 7",
        "key": "sem7",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CSBS/sem720.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      },
      {
        "name": "Semester 8",
        "key": "sem8",
        "children": [
          {
            "name": "Syllabus",
            "key": "syllabus",
            "link": "https://makautexam.net/aicte_details/Syllabus/CSBS/sem820.pdf"
          },
          {
            "name": "Books",
            "key": "books",
            "link": ""
          },
          {
            "name": "CA Questions",
            "key": "ca-questions",
            "link": ""
          },
          {
            "name": "Organizer",
            "key": "organizers",
            "link": ""
          },
          {
            "name": "PYQ",
            "key": "pyqs",
            "link": ""
          },
          {
            "name": "Suggestions",
            "key": "suggestions",
            "link": ""
          }
        ]
      }
    ]
  }
]

---

File: login.js

import { FetchEnvFunc } from "../Others/FetchEnv";

export const LogInFunction = async (email, password, time) => {
    return new Promise(async (resolve, reject) => {
        try {

            // Fetch API
            const fetchlink = process.env.NEXT_PUBLIC_BASE_URL;
            const { FETCHAPIPASSCODE } = await FetchEnvFunc();

            let result = await fetch(fetchlink + "/api/user/login/", {
                method: "POST",
                body: JSON.stringify(
                    {
                        "email": email,
                        "password": password,
                        "lastLoginTime": time,
                        "lastOnlineTime": time,
                        "PassCode": FETCHAPIPASSCODE
                    }
                )
            });

            const data = await result.json();
            resolve(data);

        } catch (error) {
            reject({
                message: `${error}`,
                success: false
            });
        }
    })
}

---

File: Logout.js

export const Logout = async () => {
    return new Promise(async (resolve, reject) => {
        try {

            // Fetch API
            const fetchlink = process.env.NEXT_PUBLIC_BASE_URL;
            let result = await fetch(fetchlink + "/api/user/logout/", {
                method: "POST",

            });

            const data = await result.json();

            if (typeof window !== 'undefined') {
                localStorage.clear();
            }
            resolve(data);

        } catch (error) {
            reject({
                message: `${error}`,
                success: false
            });
        }
    })
}

---

File: ResetPassword.js

import { FetchEnvFunc } from "../Others/FetchEnv";

export const ResetPassword = async (email, password, time) => {

    return new Promise(async (resolve, reject) => {
        try {

            // Fetch API
            const fetchlink = process.env.NEXT_PUBLIC_BASE_URL;
            const { FETCHAPIPASSCODE } = await FetchEnvFunc();
            
            let result = await fetch(fetchlink + "/api/user/resetpassword/", {
                method: "POST",
                body: JSON.stringify(
                    {
                        "email": email,
                        "password": password,
                        "lastLoginTime": time,
                        "lastOnlineTime": time,
                        "PassCode": FETCHAPIPASSCODE
                    }
                )
            });

            const data = await result.json();
            resolve(data);

        } catch (error) {
            reject({
                message: `${error}`,
                success: false
            });
        }
    })
}

---

File: SignInWithGoogleFunc.js

// ======================== Google Auth ========================

import { auth } from "../firebase/firebase";
import { GoogleAuthProvider, signInWithPopup } from "firebase/auth";
import { Get_Current_Time_String } from "../Others/Get_Current_Time_String";
import { FetchEnvFunc } from "../Others/FetchEnv";


const Provider = new GoogleAuthProvider();

export const signInWithGoogleFunc = async () => {
  return new Promise(async (resolve, reject) => {
    console.log("Run signInWithGoogle");
    try {
      const userData = await signInWithPopup(auth, Provider);

      if (userData) {
        const user = userData.user;
        const user_uid = user.uid;
        const user_email = user.email;
        const user_displayName = user.displayName;
        const user_picurl = user.photoURL;
        const UserName = user_email.split("@")[0];
        const current_time = Get_Current_Time_String();


        // Fetch API
        const fetchlink = process.env.NEXT_PUBLIC_BASE_URL;
        const { FETCHAPIPASSCODE } = await FetchEnvFunc();

        let result = await fetch(fetchlink + "/api/user/signInWithGoogle/", {
          method: "POST",
          body: JSON.stringify(
            {
              "PassCode": FETCHAPIPASSCODE,
              "UserDataObj": {
                "userName": UserName,
                "userPicUrl": user_picurl,
                "displayName": user_displayName,
                "email": user_email,
                "regTime": current_time,
                "lastLoginTime": current_time,
                "lastOnlineTime": current_time
              }
            }
          )
        });

        const data = await result.json();
        resolve(data);
      }
    } catch (error) {
      console.error(error);
      reject({
        success: false,
        error: error
      });
    }
  })
}



// ============================================================

---

File: signup.js

import { FetchEnvFunc } from "../Others/FetchEnv";

export const SignUpFunction = async (username, displayname, email, password, time) => {
    return new Promise(async (resolve, reject) => {
        try {

            // Fetch API
            const fetchlink = process.env.NEXT_PUBLIC_BASE_URL;
            const { FETCHAPIPASSCODE } = await FetchEnvFunc();

            let result = await fetch(fetchlink + "/api/user/signup/", {
                method: "POST",
                body: JSON.stringify(
                    {
                        "PassCode": FETCHAPIPASSCODE,
                        "UserDataObj": {
                            "userName": username,
                            "displayName": displayname,
                            "email": email,
                            "password": password,
                            "regTime": time,
                            "lastLoginTime": time,
                            "lastOnlineTime": time
                        }
                    }
                )
            });

            const data = await result.json();
            resolve(data);

        } catch (error) {
            reject({
                message: `${error}`,
                success: false
            });
        }
    })
}

---

File: auth.js

"use client"
// ======================== Imports ========================
import { createContext, useContext, useState, useEffect } from "react";
import { GetCurrentUserData } from "./User/GetCurrentUserData";
import { VisitorCountFunc } from "./VisitorCount/VisitorCountFunc";


// ======================== Create Context ========================
const AuthUserContext = createContext();

export default function useRajAuth() {
    const [LoggedInUserData, setLoggedInUserData] = useState(null);

    const [FirstLoad, setFirstLoad] = useState(true);
    const [isInstalled, setIsInstalled] = useState(true);
    const [InstallDeferredPrompt, setInstallDeferredPrompt] = useState(null);
    const [VisitorCountStats, setVisitorCountStats] = useState([]);


    const FetchInstallprompt = () => {
        if (typeof window !== 'undefined' && !InstallDeferredPrompt) {
            const handleBeforeInstallPrompt = (e) => {
                e.preventDefault();
                setInstallDeferredPrompt(e);
                setIsInstalled(false);
            };
            window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
            return () => {
                window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
            };
        }
    }


    const FetchAndSetVisitorCount = async () => {
        try {
            const res = await VisitorCountFunc();
            if (res.success) {
                setVisitorCountStats([
                    { name: 'Unique Visitors', value: res.uniqueVisitors },
                    { name: 'Total Visitors', value: res.totalVisitors },
                    { name: 'Page Views', value: res.pageViews },
                ])
            }
        } catch (error) {
            console.error(error);
        }
    }



    const OnPageLoad = async () => {
        try {
            const data = await GetCurrentUserData();
            if (data.success) {
                setLoggedInUserData(data.user);
            }
        } catch (error) {
            console.error(error);
        }
        setFirstLoad(false);
    }


    useEffect(() => {
        OnPageLoad();
        FetchAndSetVisitorCount();
        FetchInstallprompt();
    }, [])



    // ====================== Return ======================
    return {
        LoggedInUserData, setLoggedInUserData, FirstLoad, setFirstLoad, isInstalled, setIsInstalled, InstallDeferredPrompt, setInstallDeferredPrompt, VisitorCountStats
    };
}


// ======================== Auth Provider ========================
export const AuthUserProvider = ({ children }) => {
    const auth = useRajAuth();
    return (
        <AuthUserContext.Provider value={auth}>
            {children}
        </AuthUserContext.Provider>
    );
};

export  const useAuth = () => useContext(AuthUserContext);


// ========================================================================

---

File: Auth1.js

"use client"
// ======================== Imports ========================
import { createContext, useContext, useState, useEffect } from "react";
import { GetCurrentUserData } from "./User/GetCurrentUserData";
import { VisitorCountFunc } from "./VisitorCount/VisitorCountFunc";


// ======================== Create Context ========================
const AuthUserContext = createContext();

export default function useRajAuth() {
    const [LoggedInUserData, setLoggedInUserData] = useState(null);

    const [FirstLoad, setFirstLoad] = useState(true);
    const [isInstalled, setIsInstalled] = useState(true);
    const [InstallDeferredPrompt, setInstallDeferredPrompt] = useState(null);
    const [VisitorCountStats, setVisitorCountStats] = useState([]);


    const FetchInstallprompt = () => {
        if (typeof window !== 'undefined' && !InstallDeferredPrompt) {
            const handleBeforeInstallPrompt = (e) => {
                e.preventDefault();
                setInstallDeferredPrompt(e);
                setIsInstalled(false);
            };
            window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
            return () => {
                window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
            };
        }
    }


    const FetchAndSetVisitorCount = async () => {
        try {
            const res = await VisitorCountFunc();
            if (res.success) {
                setVisitorCountStats([
                    { name: 'Unique Visitors', value: res.uniqueVisitors },
                    { name: 'Total Visitors', value: res.totalVisitors },
                    { name: 'Page Views', value: res.pageViews },
                ])
            }
        } catch (error) {
            console.error(error);
        }
    }



    const OnPageLoad = async () => {
        try {
            const data = await GetCurrentUserData();
            if (data.success) {
                setLoggedInUserData(data.user);
            }
        } catch (error) {
            console.error(error);
        }
        setFirstLoad(false);
    }


    useEffect(() => {
        OnPageLoad();
        FetchAndSetVisitorCount();
        FetchInstallprompt();
    }, [])



    // ====================== Return ======================
    return {
        LoggedInUserData, setLoggedInUserData, FirstLoad, setFirstLoad, isInstalled, setIsInstalled, InstallDeferredPrompt, setInstallDeferredPrompt, VisitorCountStats
    };
}


// ======================== Auth Provider ========================
export const AuthUserProvider = ({ children }) => {
    const auth = useRajAuth();
    return (
        <AuthUserContext.Provider value={auth}>
            {children}
        </AuthUserContext.Provider>
    );
};

export const useAuth = () => useContext(AuthUserContext);


// ========================================================================

---

File: db.js

"use server";
import mongoose from "mongoose";

export const connectDb = async () => {
    return new Promise(async (resolve, reject) => {
        try {

            const { connection } = await mongoose.connect(process.env.MONGO_DB_URL, {
                dbName: "lastminuteengineering",
            })
            console.log("Db Connected");
            resolve("Db Connected");

        } catch (error) {
            console.log("DB Connection Error : " + error);
            reject("DB Connection Error");
        }
    })
}

---

File: firebase.js

import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getStorage } from "firebase/storage";

const firebaseConfig = {
    apiKey: process.env.NEXT_PUBLIC_apiKey,
    authDomain: process.env.NEXT_PUBLIC_authDomain,
    projectId: process.env.NEXT_PUBLIC_projectId,
    storageBucket: process.env.NEXT_PUBLIC_storageBucket,
    messagingSenderId: process.env.NEXT_PUBLIC_messagingSenderId,
    appId: process.env.NEXT_PUBLIC_appId,
};

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const storage = getStorage(app);



/*
Rules : 

service cloud.firestore {
  match /databases/{database}/documents {

    // Deny delete operations for all documents
    match /{document=**} {
      allow delete: if false;
    }

    // Read-only for everyone, write/update/create only for authenticated users, delete always denied for "lensWorldMain"
    match /lensWorldMain/{document=**} {
      allow read: if true;
      allow write, update, create: if request.auth != null;
      allow delete: if false;
    }

    // Read-only for everyone, write/update/create only for authenticated users, delete always denied for "lensWorldPostData"
    match /lensWorldPostData/{document=**} {
      allow read: if true;
      allow write, update, create: if request.auth != null;
      allow delete: if false;
    }

    // Read-only for everyone, write/update/create only for authenticated users, delete always denied for "lensWorldUserData"
    match /lensWorldUserData/{document=**} {
      allow read: if true;
      allow write, update, create: if request.auth != null;
      allow delete: if false;
    }

    // Allow write, update, create operations for authenticated users for all other collections
    match /{collection}/{document=**} {
      allow read, write, update, create: if request.auth != null;
      allow delete: if false;
    }

 }
}

*/

---

File: OTPSend.js

import { SendMail } from "./SendMail";


export const OTPSendFunction = async (OTP, email) => {
    return new Promise(async (resolve, reject) => {
        try {
            const fetchlink = process.env.NEXT_PUBLIC_BASE_URL;
            const SendHtml =

                `

<head>

<![endif]-->
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="x-apple-disable-message-reformatting">
  <!--[if !mso]><!-->
  <meta http-equiv="X-UA-Compatible" content="IE=edge"><!--<![endif]-->
  <title></title>

  <style type="text/css">
    @media only screen and (min-width: 620px) {
      .u-row {
        width: 600px !important;
      }

      .u-row .u-col {
        vertical-align: top;
      }

      .u-row .u-col-100 {
        width: 600px !important;
      }

    }

    @media (max-width: 620px) {
      .u-row-container {
        max-width: 100% !important;
        padding-left: 0px !important;
        padding-right: 0px !important;
      }

      .u-row .u-col {
        min-width: 320px !important;
        max-width: 100% !important;
        display: block !important;
      }

      .u-row {
        width: 100% !important;
      }

      .u-col {
        width: 100% !important;
      }

      .u-col>div {
        margin: 0 auto;
      }
    }

    body {
      margin: 0;
      padding: 0;
    }

    table,
    tr,
    td {
      vertical-align: top;
      border-collapse: collapse;
    }

    .ie-container table,
    .mso-container table {
      table-layout: fixed;
    }

    * {
      line-height: inherit;
    }

    a[x-apple-data-detectors='true'] {
      color: inherit !important;
      text-decoration: none !important;
    }

    table,
    td {
      color: #000000;
    }

    #u_body a {
      color: #0000ee;
      text-decoration: underline;
    }
  </style>



  <!--[if !mso]><!-->
  <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700&display=swap" rel="stylesheet" type="text/css">
  <!--<![endif]-->

</head>

<body class="clean-body u_body"
  style="margin: 0;padding: 0;-webkit-text-size-adjust: 100%;background-color: #f0f0f0;color: #000000">
  <!--[if IE]><div class="ie-container"><![endif]-->
  <!--[if mso]><div class="mso-container"><![endif]-->
  <table id="u_body"
    style="border-collapse: collapse;table-layout: fixed;border-spacing: 0;mso-table-lspace: 0pt;mso-table-rspace: 0pt;vertical-align: top;min-width: 320px;Margin: 0 auto;background-color: #f0f0f0;width:100%"
    cellpadding="0" cellspacing="0">
    <tbody>
      <tr style="vertical-align: top">
        <td style="word-break: break-word;border-collapse: collapse !important;vertical-align: top">
          <!--[if (mso)|(IE)]><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td align="center" style="background-color: #f0f0f0;"><![endif]-->



          <div class="u-row-container" style="padding: 0px;background-color: transparent">
            <div class="u-row"
              style="margin: 0 auto;min-width: 320px;max-width: 600px;overflow-wrap: break-word;word-wrap: break-word;word-break: break-word;background-color: transparent;">
              <div
                style="border-collapse: collapse;display: table;width: 100%;height: 100%;background-color: transparent;">
                <!--[if (mso)|(IE)]><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td style="padding: 0px;background-color: transparent;" align="center"><table cellpadding="0" cellspacing="0" border="0" style="width:600px;"><tr style="background-color: transparent;"><![endif]-->

                <!--[if (mso)|(IE)]><td align="center" width="600" style="background-color: #ffffff;width: 600px;padding: 0px;border-top: 0px solid transparent;border-left: 0px solid transparent;border-right: 0px solid transparent;border-bottom: 0px solid transparent;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;" valign="top"><![endif]-->
                <div class="u-col u-col-100"
                  style="max-width: 320px;min-width: 600px;display: table-cell;vertical-align: top;">
                  <div
                    style="background-color: #ffffff;height: 100%;width: 100% !important;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;">
                    <!--[if (!mso)&(!IE)]><!-->
                    <div
                      style="box-sizing: border-box; height: 100%; padding: 0px;border-top: 0px solid transparent;border-left: 0px solid transparent;border-right: 0px solid transparent;border-bottom: 0px solid transparent;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;">
                      <!--<![endif]-->

                      <table style="font-family:arial,helvetica,sans-serif;" role="presentation" cellpadding="0"
                        cellspacing="0" width="100%" border="0">
                        <tbody>
                          <tr>
                            <td
                              style="overflow-wrap:break-word;word-break:break-word;padding:30px 10px 10px;font-family:arial,helvetica,sans-serif;"
                              align="left">

                              <!--[if mso]><table width="100%"><tr><td><![endif]-->
                              <h1
                                style="margin: 0px; line-height: 140%; text-align: center; word-wrap: break-word; font-family: 'Montserrat',sans-serif; font-size: 22px; font-weight: 700;">
                                <span><span><span>LastMinuteEngineering OTP<br />Your one-time code
                                      is</span></span></span>
                              </h1>
                              <!--[if mso]></td></tr></table><![endif]-->

                            </td>
                          </tr>
                        </tbody>
                      </table>

                      <table style="font-family:arial,helvetica,sans-serif;" role="presentation" cellpadding="0"
                        cellspacing="0" width="100%" border="0">
                        <tbody>
                          <tr>
                            <td
                              style="overflow-wrap:break-word;word-break:break-word;padding:10px;font-family:arial,helvetica,sans-serif;"
                              align="left">

                              <!--[if mso]><style>.v-button {background: transparent !important;}</style><![endif]-->
                              <div align="center">
                                <!--[if mso]><v:roundrect xmlns:v="urn:schemas-microsoft-com:vml" xmlns:w="urn:schemas-microsoft-com:office:word" href="https://unlayer.com" style="height:42px; v-text-anchor:middle; width:216px;" arcsize="0%"  strokecolor="#000000" strokeweight="2px" fillcolor="#ffffff"><w:anchorlock/><center style="color:#000000;"><![endif]-->
                                <p class="v-button"
                                  style="box-sizing: border-box;display: inline-block;text-decoration: none;-webkit-text-size-adjust: none;text-align: center;color: #000000; background-color: #ffffff; border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px; width:38%; max-width:100%; overflow-wrap: break-word; word-break: break-word; word-wrap:break-word; mso-border-alt: none;border-top-color: #000000; border-top-style: solid; border-top-width: 2px; border-left-color: #000000; border-left-style: solid; border-left-width: 2px; border-right-color: #000000; border-right-style: solid; border-right-width: 2px; border-bottom-color: #000000; border-bottom-style: solid; border-bottom-width: 2px;font-size: 18px;">
                                  <span style="display:block;padding:10px 20px;line-height:120%;">${OTP}</span>
                                </p>
                                <!--[if mso]></center></v:roundrect><![endif]-->
                              </div>

                            </td>
                          </tr>
                        </tbody>
                      </table>

                      <!--[if (!mso)&(!IE)]><!-->
                    </div><!--<![endif]-->
                  </div>
                </div>
                <!--[if (mso)|(IE)]></td><![endif]-->
                <!--[if (mso)|(IE)]></tr></table></td></tr></table><![endif]-->
              </div>
            </div>
          </div>





          <div class="u-row-container" style="padding: 2px 0px 0px;background-color: transparent">
            <div class="u-row"
              style="margin: 0 auto;min-width: 320px;max-width: 600px;overflow-wrap: break-word;word-wrap: break-word;word-break: break-word;background-color: transparent;">
              <div
                style="border-collapse: collapse;display: table;width: 100%;height: 100%;background-color: transparent;">
                <!--[if (mso)|(IE)]><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td style="padding: 2px 0px 0px;background-color: transparent;" align="center"><table cellpadding="0" cellspacing="0" border="0" style="width:600px;"><tr style="background-color: transparent;"><![endif]-->

                <!--[if (mso)|(IE)]><td align="center" width="600" style="background-color: #ffffff;width: 600px;padding: 0px;border-top: 0px solid transparent;border-left: 0px solid transparent;border-right: 0px solid transparent;border-bottom: 0px solid transparent;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;" valign="top"><![endif]-->
                <div class="u-col u-col-100"
                  style="max-width: 320px;min-width: 600px;display: table-cell;vertical-align: top;">
                  <div
                    style="background-color: #ffffff;height: 100%;width: 100% !important;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;">
                    <!--[if (!mso)&(!IE)]><!-->
                    <div
                      style="box-sizing: border-box; height: 100%; padding: 0px;border-top: 0px solid transparent;border-left: 0px solid transparent;border-right: 0px solid transparent;border-bottom: 0px solid transparent;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;">
                      <!--<![endif]-->

                      <table style="font-family:arial,helvetica,sans-serif;" role="presentation" cellpadding="0"
                        cellspacing="0" width="100%" border="0">
                        <tbody>
                          <tr>
                            <td
                              style="overflow-wrap:break-word;word-break:break-word;padding:30px 10px 10px;font-family:arial,helvetica,sans-serif;"
                              align="left">

                              <!--[if mso]><table width="100%"><tr><td><![endif]-->
                              <h1
                                style="margin: 0px; line-height: 140%; text-align: center; word-wrap: break-word; font-family: 'Montserrat',sans-serif; font-size: 13px; font-weight: 400;">
                                <span><span><span><span><span><span><span><strong>If you have any questions, contact our
                                                Website Â Guides.</strong><br /><strong>Or, visit our Help
                                                Center.</strong><br /><br />
                                                <strong>
                                                <a href=${fetchlink}>
                                                ${fetchlink}
                                                </a></strong>
                                                </span></span></span></span></span></span></span>
                              </h1>
                              <!--[if mso]></td></tr></table><![endif]-->

                            </td>
                          </tr>
                        </tbody>
                      </table>

                      <!--[if (!mso)&(!IE)]><!-->
                    </div><!--<![endif]-->
                  </div>
                </div>
                <!--[if (mso)|(IE)]></td><![endif]-->
                <!--[if (mso)|(IE)]></tr></table></td></tr></table><![endif]-->
              </div>
            </div>
          </div>





          <div class="u-row-container" style="padding: 0px;background-color: transparent">
            <div class="u-row"
              style="margin: 0 auto;min-width: 320px;max-width: 600px;overflow-wrap: break-word;word-wrap: break-word;word-break: break-word;background-color: transparent;">
              <div
                style="border-collapse: collapse;display: table;width: 100%;height: 100%;background-color: transparent;">
                <!--[if (mso)|(IE)]><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td style="padding: 0px;background-color: transparent;" align="center"><table cellpadding="0" cellspacing="0" border="0" style="width:600px;"><tr style="background-color: transparent;"><![endif]-->

                <!--[if (mso)|(IE)]><td align="center" width="600" style="width: 600px;padding: 0px;border-top: 0px solid transparent;border-left: 0px solid transparent;border-right: 0px solid transparent;border-bottom: 0px solid transparent;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;" valign="top"><![endif]-->
                <div class="u-col u-col-100"
                  style="max-width: 320px;min-width: 600px;display: table-cell;vertical-align: top;">
                  <div
                    style="height: 100%;width: 100% !important;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;">
                    <!--[if (!mso)&(!IE)]><!-->
                    <div
                      style="box-sizing: border-box; height: 100%; padding: 0px;border-top: 0px solid transparent;border-left: 0px solid transparent;border-right: 0px solid transparent;border-bottom: 0px solid transparent;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;">
                      <!--<![endif]-->

                      <table style="font-family:arial,helvetica,sans-serif;" role="presentation" cellpadding="0"
                        cellspacing="0" width="100%" border="0">
                        <tbody>
                          <tr>
                            <td
                              style="overflow-wrap:break-word;word-break:break-word;padding:10px 0px 0px;font-family:arial,helvetica,sans-serif;"
                              align="left">

                              <table height="0px" align="center" border="0" cellpadding="0" cellspacing="0" width="100%"
                                style="border-collapse: collapse;table-layout: fixed;border-spacing: 0;mso-table-lspace: 0pt;mso-table-rspace: 0pt;vertical-align: top;border-top: 1px solid #000000;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%">
                                <tbody>
                                  <tr style="vertical-align: top">
                                    <td
                                      style="word-break: break-word;border-collapse: collapse !important;vertical-align: top;font-size: 0px;line-height: 0px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%">
                                      <span>&#160;</span>
                                    </td>
                                  </tr>
                                </tbody>
                              </table>

                            </td>
                          </tr>
                        </tbody>
                      </table>

                      <table style="font-family:arial,helvetica,sans-serif;" role="presentation" cellpadding="0"
                        cellspacing="0" width="100%" border="0">
                        <tbody>
                          <tr>
                            <td
                              style="overflow-wrap:break-word;word-break:break-word;padding:0px 0px 10px;font-family:arial,helvetica,sans-serif;"
                              align="left">

                              <table height="0px" align="center" border="0" cellpadding="0" cellspacing="0" width="100%"
                                style="border-collapse: collapse;table-layout: fixed;border-spacing: 0;mso-table-lspace: 0pt;mso-table-rspace: 0pt;vertical-align: top;border-top: 1px solid #000000;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%">
                                <tbody>
                                  <tr style="vertical-align: top">
                                    <td
                                      style="word-break: break-word;border-collapse: collapse !important;vertical-align: top;font-size: 0px;line-height: 0px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%">
                                      <span>&#160;</span>
                                    </td>
                                  </tr>
                                </tbody>
                              </table>

                            </td>
                          </tr>
                        </tbody>
                      </table>

                      <!--[if (!mso)&(!IE)]><!-->
                    </div><!--<![endif]-->
                  </div>
                </div>
                <!--[if (mso)|(IE)]></td><![endif]-->
                <!--[if (mso)|(IE)]></tr></table></td></tr></table><![endif]-->
              </div>
            </div>
          </div>



          <!--[if (mso)|(IE)]></td></tr></table><![endif]-->
        </td>
      </tr>
    </tbody>
  </table>
  <!--[if mso]></div><![endif]-->
  <!--[if IE]></div><![endif]-->
</body>

`


            const data = await SendMail({
                "email": email,
                "subject": "LastMinuteEngineering OTP",
                "html": SendHtml
            })

            resolve(data);

        } catch (error) {
            reject({
                message: `${error.message}`,
                success: false
            });
        }
    })
}

---

File: SendMail.js

import { FetchEnvFunc } from "../Others/FetchEnv";

// =========================== SendMail ===========================
export const SendMail = async (MailObj) => {
  return new Promise(async (resolve, reject) => {
    // ========================= Post ========================= 
    try {
      const fetchlink = process.env.NEXT_PUBLIC_BASE_URL;
      const { FETCHAPIPASSCODE } = await FetchEnvFunc();
      
      let result = await fetch(fetchlink + "/api/mail/", {
        method: "POST",
        body: JSON.stringify(
          {
            ...MailObj,
            "PassCode": FETCHAPIPASSCODE
          }
        ),
      });
      result = await result.json();
      console.log("Mail Sent Done");
      resolve(result);


    } catch (error) {
      console.log("Error Mail send", error);
      reject({
        error: error,
        success: false
      });
    }


  })
}


---

File: DownloadFile.js

import axios from 'axios';

// ===================== Download Image =====================
export const downloadImage = async (imageURL) => {
    return new Promise(async (resolve, reject) => {
        try {
            const response = await axios.get(imageURL, { responseType: 'blob' });
            const blob = new Blob([response.data]);
            const link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = 'LensWorld_Pic.jpg';
            link.click();
            resolve("Ok");
        } catch (error) {
            console.error('Error downloading image:', error);
            reject(error);
        }
    });
};

// ===============================================================



---

File: ExtractTime.js

export const ExtractTimeFunc = (milliseconds) => {
  // Convert seconds to milliseconds
  // const milliseconds = seconds * 1000;

  // Create a new Date object
  const date = new Date(milliseconds);


  const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
    "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

  // Extract date components
  const year = date.getFullYear();
  const month = monthNames[date.getMonth()]; // Get the month name from the array
  const day = date.getDate();

  const formattedDate = pad(day) + ' ' + month + ' ' + year;

  // Extract time components
  const hours = date.getHours();
  const minutes = date.getMinutes();
  // const seconds = date.getSeconds();

  // Format the time
  const formattedTime = pad(hours) + ':' + pad(minutes);

  const formattedDateTime = formattedDate + " " + formattedTime;
  return formattedDateTime;
}

function pad(number) {
  if (number < 10) {
    return '0' + number;
  }
  return number;
}

---

File: FetchEnv.js

"use server";

export const FetchEnvFunc = () => {
  return new Promise(async (resolve, reject) => {
    const JWT_KEY = process.env.JWT_KEY;
    const FETCHAPIPASSCODE = process.env.FETCHAPIPASSCODE;

    const MONGO_DB_URL = process.env.MONGO_DB_URL;

    resolve({
      JWT_KEY: JWT_KEY,
      FETCHAPIPASSCODE: FETCHAPIPASSCODE,
      MONGO_DB_URL: MONGO_DB_URL

    })
  })

};

---

File: FetchGFolderFunc.js

import { FetchEnvFunc } from "../Others/FetchEnv";


export const FetchGFolderFunc = async (id) => {
  return new Promise(async (resolve, reject) => {
    try {
      // Fetch API
      const fetchlink = `https://script.google.com/macros/s/AKfycbxapIGQ6pHE_OmfjT2kZxd2eMClj3uPtTTySksysejhH1_18Ot8wD1AZPuST-EpdStm/exec?folderId=${id}`

      let result = await fetch(fetchlink, {
        method: "GET",
      });

      const data = await result.json();
      resolve(data);

    } catch (error) {
      reject({
        message: `${error}`,
        success: false
      });
    }
  })
}

---

File: GenerateRandomNumber.js

/*
Generates a random number within a range determined by the length parameter. like OTP
*/

// ======================== generateRandomNumber ========================
export const generateRandomNumber = (length) => {
  if (length <= 0) {
    console.error("Length must be greater than 0");
    return null;
  }

  // Calculate the minimum and maximum values for the random number
  const min = Math.pow(10, length - 1);
  const max = Math.pow(10, length) - 1;

  // Generate the random number within the specified range
  const randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;

  return randomNumber;
}

---

File: GetRandomValuesFromArrayWithExclusion.js

// ================= getRandomValuesFromArrayWithExclusion =================

export const getRandomValuesFromArrayWithExclusion = (arr, excludedValues, count = 4, SortOptions = { shuffle: true, sortBy: 'newest' }) => {
  const filteredArray = arr.filter(value => !excludedValues.includes(value));

  const diff = filteredArray.length;
  const numberOfValues = (diff >= count) ? count : diff;

  let resultArray = filteredArray;

  switch (SortOptions.sortBy) {
    case 'newest':
      resultArray = resultArray.reverse();
      // Reverse the array to put newest items first
      break;
    case 'oldest':
      // No need to change for oldest first
      break;
    default:
      break;
  }

  if (SortOptions.shuffle) {
    resultArray.sort(() => Math.random() - 0.5);
  }

  return resultArray.slice(0, numberOfValues);
}


---

File: Get_Current_Time_String.js

// ==================== Get_Current_Time_String ====================
export const Get_Current_Time_String = () => {

  const now = new Date();

  const optionsDate = {
    day: '2-digit',
    month: 'short', // or 'short' for abbreviated month names long for full
    year: 'numeric',
  };

  const optionsTime = {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: true,
  };

  const formattedDate = now.toLocaleDateString('en-US', optionsDate);
  const formattedTime = now.toLocaleTimeString('en-US', optionsTime);

  const formattedDateTime = `${formattedDate}, ${formattedTime}`;
  // console.log(formattedDateTime);
  return formattedDateTime;

}


---

File: ImageCompressorFunc.js

export const ImageCompressorFunc = (file, maxWidth = 1920, maxHeight = 1920, quality = 0.4) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);

    reader.onload = (e) => {
      const img = new Image();
      img.src = e.target.result;

      img.onload = () => {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');

        let width = img.width;
        let height = img.height;

        if (width > height) {
          if (width > maxWidth) {
            height *= maxWidth / width;
            width = maxWidth;
          }
        } else {
          if (height > maxHeight) {
            width *= maxHeight / height;
            height = maxHeight;
          }
        }

        canvas.width = width;
        canvas.height = height;
        ctx.drawImage(img, 0, 0, width, height);

        canvas.toBlob(
          (blob) => {
            if (blob) {
              resolve(blob);
            } else {
              reject(new Error('Image compression failed'));
            }
          },
          'image/jpeg',
          quality
        );
      };

      img.onerror = () => {
        reject(new Error('Image loading failed'));
      };
    };

    reader.onerror = () => {
      reject(new Error('File reading failed'));
    };
  });
};


---

File: InputContext.js

'use client'

import React, { createContext, useState, useEffect, useContext } from 'react'

const InputContext = createContext(undefined)

export function InputProvider({ children }) {
  const [inputValue, setInputValue] = useState(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('inputValue') || ''
    }
    return ''
  })

  useEffect(() => {
    if (typeof window !== 'undefined') {
      localStorage.setItem('inputValue', inputValue)
    }
  }, [inputValue])

  return (
    <InputContext.Provider value={{ inputValue, setInputValue }}>
      {children}
    </InputContext.Provider>
  )
}

export function useInput() {
  const context = useContext(InputContext)
  if (!context) {
    throw new Error('useInput must be used within an InputProvider')
  }
  return context
}

---

File: LocalCompare.js

export const LocalCompare = (SenderUserId, ReceiverUserId) => {
  const result = SenderUserId.localeCompare(ReceiverUserId);
  let DocId;

  if (result == -1) {
    DocId = `${SenderUserId}_${ReceiverUserId}`;
  }
  else if (result == 1) {
    DocId = `${ReceiverUserId}_${SenderUserId}`;
  }

  return DocId;
}

---

File: SelectRandomNumber.js

/*
Generates a random number between 0 (inclusive) and the length (exclusive). This means that the random number will be between 0 and length - 1.
*/

export const SelectRandomNumber = (length) => {
  if (length <= 0) {
    console.error("Length must be greater than 0");
    return null;
  }
  return Math.floor(Math.random() * length);
}

---

File: StringtoLinkExtract.js

import Link from 'next/link';

// Function to process parts based on a regex and a component
const processParts = (inputArray, regex, componentFn) => {
  return inputArray.map((item, idx) => {
    if (typeof item === 'string') {
      let parts = item.split(regex);
      return parts.map((part, index) => {
        if (index % 2 === 1) {
          return componentFn(part, index);
        }
        return part;
      });
    }
    return item;
  });
};

// Function to process URLs within an array of elements/strings
const processUrls = (inputArray, urlRegex) => {
  return inputArray.map((item, idx) => {
    if (typeof item === 'string') {
      let parts = item.split(urlRegex);
      return parts.map((part, index) => {
        if (urlRegex.test(part)) {
          return (
            <a
              key={`url-${idx}-${index}`}
              href={part}
              target='_blank'
              className="text-blue-500 hover:underline font-semibold"
            >
              {part}
            </a>
          );
        }
        return part;
      });
    }
    return item;
  });
};

export const StringtoLinkExtract = (text) => {
  const usernameRegex = /@(\S+)/g;
  const hashtagRegex = /#(\S+)/g;
  const urlRegex = /(https:\/\/[^\s]+)/g;


  // Process @usernames
  let newStr = processParts([text], usernameRegex, (username, index) => (
    <Link
      key={`user-${index}`}
      href={`/user/${username}`}
      className="text-blue-500 hover:underline font-semibold"
    >
      @{username}
    </Link>
  ));
  // Flatten the array to handle nested arrays from username processing
  newStr = newStr.flat();


  // Process #hashtags
  newStr = processParts(newStr, hashtagRegex, (hashtag, index) => (
    <Link
      key={`hashtag-${index}`}
      href={`/hashtag/${hashtag}`}
      className="text-blue-500 hover:underline font-semibold"
    >
      #{hashtag}
    </Link>
  ));
  // Flatten the array to handle nested arrays from hashtag processing
  newStr = newStr.flat();



  // Process https://URLs
  newStr = processUrls(newStr, urlRegex);

  // Flatten the array to handle nested arrays from URL processing
  return newStr.flat();
};


---

File: UploadFile.js

// ======================== Imports ========================
// import { storage } from "@/firebase/firebase";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { ImageCompressorFunc } from "./ImageCompressorFunc";
import { storage } from "../firebase/firebase";


// ======================== Upload_File_Func ========================
export const Upload_File_Func = (path, FileUpload) => {
    return new Promise(async (resolve, reject) => {
        console.log("================== Run Upload_File_Func ==================");

        try {
            if (FileUpload != null) {
                let uploadPromise;
                // Handle image files (compress if needed)
                if (FileUpload.type.startsWith('image/')) {
                    const imageCompressionOptions = {
                        maxWidth: 1920,
                        maxHeight: 1920,
                        quality: 0.2,
                    };
                    const compressedFile = await ImageCompressorFunc(FileUpload, imageCompressionOptions.maxWidth, imageCompressionOptions.maxHeight, imageCompressionOptions.quality);
                    uploadPromise = uploadBytes(ref(storage, path), compressedFile);
                }
                // Handle video files
                else {
                    // const compressedFile = await VideoCompressorFunc(FileUpload, 640, 480);
                    // uploadPromise = uploadBytes(ref(storage, path), compressedFile);
                    uploadPromise = uploadBytes(ref(storage, path), FileUpload);
                }

                uploadPromise.then((snapshot) => {
                    getDownloadURL(snapshot.ref).then((url) => {
                        resolve({
                            url: url,
                            success: true
                        });
                    });
                }).catch((error) => {
                    console.log(error);
                    reject({
                        success: false,
                        error: error
                    });
                });
            } else {
                throw new Error('No such File!');
            }
        } catch (error) {
            console.log(error);
            reject({
                success: false,
                error: error
            });
        }
    });
};




/*
Rules : 

rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Allow read access to all files
    match /{allPaths=**} {
      allow read: if true;
      allow write, create: if true;
      allow update, delete: if false;
    }
  }
}


*/

---

File: subscriptionFunc.js

import { FetchEnvFunc } from "../Others/FetchEnv";
import { Get_Current_Time_String } from "../Others/Get_Current_Time_String";

export const subscriptionFunc = async (email) => {
    return new Promise(async (resolve, reject) => {
        try {

            // Fetch API
            const fetchlink = process.env.NEXT_PUBLIC_BASE_URL;
            const { FETCHAPIPASSCODE } = await FetchEnvFunc();
            const current_time = Get_Current_Time_String();

            let result = await fetch(fetchlink + "/api/Subscription/", {
                method: "POST",
                body: JSON.stringify(
                    {
                        "PassCode": FETCHAPIPASSCODE,
                        "email": email,
                        "time" : current_time
                    }
                )
            });

            const data = await result.json();
            resolve(data);

        } catch (error) {
            reject({
                message: `${error}`,
                success: false
            });
        }
    })
}

---

File: EditProfileSave.js

import { FetchEnvFunc } from "../Others/FetchEnv";


export const EditProfileSave = async (dataObj) => {
    return new Promise(async (resolve, reject) => {
        try {
            // Fetch API
            const fetchlink = process.env.NEXT_PUBLIC_BASE_URL;
            const { FETCHAPIPASSCODE } = await FetchEnvFunc();

            let result = await fetch(fetchlink + "/api/user/edituser/", {
                method: "PUT",
                body: JSON.stringify({
                    "PassCode": FETCHAPIPASSCODE,
                    "UserUpdateDataObj": dataObj
                })
            });

            const data = await result.json();
            resolve(data);

        } catch (error) {
            reject({
                message: `${error}`,
                success: false
            });
        }
    })
}

---

File: FetchRandomUserIdsFunc.js

import { FetchEnvFunc } from "../Others/FetchEnv";


export const FetchRandomUserIdsFunc = async (skipCount = 0, count = 4) => {

    return new Promise(async (resolve, reject) => {
        try {

            // Fetch API
            const fetchlink = process.env.NEXT_PUBLIC_BASE_URL;
            const { FETCHAPIPASSCODE } = await FetchEnvFunc();

            let result = await fetch(fetchlink + "/api/user/fetchRandomUserIds/", {
                method: "POST",
                body: JSON.stringify(
                    {
                        "skipCount": skipCount,
                        "count": count,
                        "PassCode": FETCHAPIPASSCODE
                    }
                )
            });

            const data = await result.json();
            resolve(data);

        } catch (error) {
            reject({
                message: `${error}`,
                success: false
            });
        }
    })
}

---

File: GetCurrentUserData.js

import { FetchEnvFunc } from "../Others/FetchEnv";
import { Get_Current_Time_String } from "../Others/Get_Current_Time_String";

export const GetCurrentUserData = async () => {

    return new Promise(async (resolve, reject) => {
        try {
            const time = Get_Current_Time_String();
            // Fetch API

            let token = null;
            if (typeof window !== 'undefined') {
                token = localStorage.getItem('authToken');
            }

            const fetchlink = process.env.NEXT_PUBLIC_BASE_URL;
            const { FETCHAPIPASSCODE } = await FetchEnvFunc();

            let result = await fetch(fetchlink + "/api/user/current/", {
                method: "POST",
                body: JSON.stringify(
                    {
                        "lastOnlineTime": time,
                        "PassCode": FETCHAPIPASSCODE,
                        "token": token

                    }
                )
            });

            const data = await result.json();
            resolve(data);
        } catch (error) {
            reject({
                message: `${error}`,
                success: false
            });
        }
    })
}

---

File: GetUserDataById.js

import { FetchEnvFunc } from "../Others/FetchEnv";

export const GetUserDataByUserIdFunc = (UserId) => {
    return new Promise(async (resolve, reject) => {
        try {


            // Fetch API
            const fetchlink = process.env.NEXT_PUBLIC_BASE_URL;
            const { FETCHAPIPASSCODE } = await FetchEnvFunc();

            let result = await fetch(fetchlink + "/api/user/getbyid/", {
                method: "POST",
                body: JSON.stringify(
                    {
                        "UserId": UserId,
                        "PassCode": FETCHAPIPASSCODE
                    }
                )
            });

            const data = await result.json();
            resolve(data);

        } catch (error) {
            reject({
                message: `${error}`,
                success: false
            });
        }
    })
}

// ========================================================================

---

File: GetUserDataByUsername.js

import { FetchEnvFunc } from "../Others/FetchEnv";

export const GetUserDataByUsername = (userName) => {
    return new Promise(async (resolve, reject) => {
        try {

            // Fetch API
            const fetchlink = process.env.NEXT_PUBLIC_BASE_URL;
            const { FETCHAPIPASSCODE } = await FetchEnvFunc();

            let result = await fetch(fetchlink + "/api/user/getbyusername/", {
                method: "POST",
                body: JSON.stringify(
                    {
                        "userName": userName,
                        "PassCode": FETCHAPIPASSCODE
                    }
                )
            });

            const data = await result.json();
            resolve(data);

        } catch (error) {
            reject({
                message: `${error}`,
                success: false
            });
        }
    })
}

---

File: VisitorCountFunc.js

import { v4 as uuidv4 } from 'uuid';
import { FetchEnvFunc } from "../Others/FetchEnv";


export const VisitorCountFunc = async () => {
  return new Promise(async (resolve, reject) => {
    try {
      let isUniqueVisitorsIncrease = false;
      let isTotalVisitorsIncrease = false;

      let token = localStorage.getItem('visitorToken');
      if (!token) {
        // Generate UUID if not found in local storage
        token = uuidv4();
        localStorage.setItem('visitorToken', token); // Store token in local storage
        isUniqueVisitorsIncrease = true;
      }

      const currentTimeSec = Date.now();
      const lastvisit = localStorage.getItem('lastvisit') || 0;

      if (currentTimeSec - lastvisit > 1000 * 60) {
        localStorage.setItem('lastvisit', currentTimeSec);
        isTotalVisitorsIncrease = true;
      }


      // Fetch API
      const fetchlink = process.env.NEXT_PUBLIC_BASE_URL;
      const { FETCHAPIPASSCODE } = await FetchEnvFunc();


      let result = await fetch(fetchlink + "/api/VisitorCount/", {
        method: "POST",
        body: JSON.stringify(
          {
            "PassCode": FETCHAPIPASSCODE,
            "isUniqueVisitorsIncrease": isUniqueVisitorsIncrease,
            "isTotalVisitorsIncrease": isTotalVisitorsIncrease
          }
        )
      });

      const data = await result.json();
      resolve(data);

    } catch (error) {
      reject({
        message: `${error}`,
        success: false
      });
    }
  })
}

---

File: schema.js

import { z } from 'zod';

const BlockDataSchema = z.union([
  z.object({
    text: z.string(),
    color: z.enum(['Red', 'Blue', 'Pink','Orange','Yellow','Purple','Green']),
    alignText: z.enum(['Text-Align-Center', 'Text-Align-Left', 'Text-Align-Right']),
    titleType: z.enum(['H1', 'H2', 'H3']),
  }),

  z.object({
    text: z.string(),
    level: z.number().optional(),
  }),
  z.object({
    text: z.string(),
  }),
  z.object({
    style: z.enum(['ordered', 'unordered']),
    items: z.array(z.string()),
  }),
  z.object({
    items: z.array(
      z.object({
        text: z.string(),
        checked: z.boolean(),
      })
    ),
  }),
  z.object({
    text: z.string(),
    caption: z.string(),
    alignment: z.enum(['left', 'center', 'right']),
  }),
  z.object({
    withHeadings: z.boolean(),
    content: z.array(z.array(z.string())),
  }),
  z.object({
    code: z.string(),
    language: z.string().optional(),
  }),
  z.object({
    link: z.string().url(),
    meta: z.object({
      title: z.string(),
      description: z.string().optional(),
      image: z.string().url().optional(),
    }),
  }),
]);

const BlockSchema = z.object({
  id: z.string(),
  type: z.enum(['title','header', 'paragraph', 'list', 'checklist', 'quote', 'table', 'code', 'linkTool']),
  data: BlockDataSchema,
});

export const EditorDataSchema = z.object({
  time: z.number(),
  blocks: z.array(BlockSchema),
  version: z.string(),
});  

---

File: utils.js

import { clsx } from "clsx";
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}


---

File: middleware.js

// pages/_middleware.js
import { NextResponse } from 'next/server';
import socialLinks from '../src/Data/socialLinks.json'

export function middleware(request) {
  const { pathname } = request.nextUrl;
  const socialLinksObj = Object.fromEntries(socialLinks.map(item => [item.id, item.link]));


  const routesObj = {
    "/r/instagram": socialLinksObj.insta,
    "/r/insta": socialLinksObj.insta,
    "/r/wpgroup": socialLinksObj.wpgroup,
    "/r/wpchannel": socialLinksObj.wpchannel,
    "/r/twitter": socialLinksObj.twitter,
    "/r/x": socialLinksObj.twitter,
    "/r/youtube": socialLinksObj.youtube,
    "/r/yt": socialLinksObj.youtube,
    "/r/threads": socialLinksObj.threads,
    "/r/linkedin": socialLinksObj.linkedin,
    "/r/telegram": socialLinksObj.telegram,
    "/r/telegramchannel": socialLinksObj.telegramchannel,
    "/r/telegramch": socialLinksObj.telegramchannel
  }


  if (routesObj[pathname]) {
    return NextResponse.redirect(new URL(routesObj[pathname], request.url))
  }
  return NextResponse.next();
}

export const config = {
  matcher: [
    "/r/:path*"
  ]
}

---

File: card.models.js

import mongoose, { Schema } from "mongoose";


// ==================== Card Schema ====================
const CardSchema = new Schema(
    {
        name: {
            type: String,
            required: true
        },
        description: {
            type: String,
            default: ""
        },
        keywords: {
            type: [String],
            default: []
        },
        links: [
            {
                type: String
            }
        ],
        uploaderUserId: {
            type: Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        timestamp: {
            type: Date,
            default: Date.now
        },
        parentIds: [
            {
                type: Schema.Types.ObjectId,
                ref: 'Card'
            }
        ],
        childIds: [
            {
                type: Schema.Types.ObjectId,
                ref: 'Card'
            }
        ]
    },
    {
        timestamps: true,
        indexes: [
            { _id: 1 }
        ]
    }
);

// Indexing keywords field for efficient searching
CardSchema.index({ keywords: 'text' });

export const Card = mongoose.models.cards || mongoose.model("cards", CardSchema);


---

File: ebook.models.js

import mongoose, { Schema } from "mongoose";


// ==================== ebookSchema ====================
const ebookSchema = new Schema(
    {
        title: {
            type: String,
            required: true,
        },
        description: {
            type: String,
            required: true,
        },
        keywords: {
            type: [String],
            default: []
        },
        coverImage: {
            type: String,
            required: true,
        },
        fileUrl: {
            type: String,
            required: true,
        },
        uploadDate: {
            type: String,
            required: true
        },
        downloadCount: {
            type: Number,
            default: 0,
        },
        likeCount: {
            type: Number,
            default: 0,
        },
        uploaderUserId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true,
        }
    },
    {
        timestamps: true,
        indexes: [
            { _id: 1 }
        ]
    }
);

export const Ebook = mongoose.models.ebooks || mongoose.model("ebooks", ebookSchema);


---

File: subscription.models.js

import mongoose, { Schema } from "mongoose";


// ==================== SubscriptionSchema ====================
const SubscriptionSchema = new Schema(
    {
        email: {
            type: String,
            required: true,
            unique: true,
            trim: true,
            lowercase: true,
            match: [/.+\@.+\..+/, 'Please fill a valid email address']
        },
        time: {
            type: String,
            required: true
        },
    }
);


export const Subscription = mongoose.models.subscriptions || mongoose.model("subscriptions", SubscriptionSchema);


---

File: study-material.ts

export interface Subject {
    name: string;
    key: string;
    type?: 'folder' | 'link';
    id?: string;
    link?: string;
  }
  
  export interface Semester {
    name: string;
    key: string;
    children: Subject[];
  }
  
  export interface Department {
    name: string;
    key: string;
    children: Semester[];
  }
  
  export type MainDataSetType = Department[];

---

File: user.models.js

import mongoose, { Schema } from "mongoose";


const socialProfileSchema = new Schema(
    {
        platform: {
            type: String,
            required: true
        },
        link: {
            type: String,
            required: true
        }
    }
)

const notificationSchema = new Schema(
    {
        notificationText: {
            type: String,
            required: true
        },
        notificationImage: {
            type: String,
            required: true
        },
        notificationBlogId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: "Blog"
        },
        notificationUserId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: "User"
        },
        notificationTimeStamp: {
            type: String,
            required: true
        },

    },
    {
        timestamps: true
    }
)


// ==================== User Schema ====================
const UserSchema = new Schema(
    {
        userName: {
            type: String,
            required: true,
            unique: true,
            lowercase: true,
            trim: true,
            index: true
        },
        displayName: {
            type: String,
            required: true,
            index: true
        },
        email: {
            type: String,
            required: true,
            unique: true,
            lowercase: true,
            trim: true,
            index: true
        },
        password: {
            type: String,
            // required: true
        },
        about: {
            type: String,
        },
        birthday: {
            type: String
        },
        socialProfiles: {
            type: [socialProfileSchema]
        },
        education: {
            type: String
        },
        interests: {
            type: [String]
        },
        followers: [{
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        }],
        following: [{
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        }],
        viewCount: {
            type: Number,
            default: 0
        },
        settings: {
            theme: {
                type: String,
                enum: ['light', 'dark', 'system', 'time varying'],
                default: 'system'
            },
            language: {
                type: String,
                default: 'en'
            },
            emailNotifications: {
                type: Boolean,
                default: true
            }
        },
        address: {
            type: String
        },
        userPicUrl: {
            type: String, // cloudinary url
        },
        coverPicUrl: {
            type: String, // cloudinary url
        },
        regTime: {
            type: String,
            required: true
        },
        lastLoginTime: {
            type: String,
            required: true
        },
        lastOnlineTime: {
            type: String,
            required: true
        },
        savedBlogIds: [{
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Blog'
        }],
        likedBlogIds: [{
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Blog'
        }],
        isActive: {
            type: Boolean,
            default: true
        },
        isVerifiedBadge: {
            type: Boolean,
            default: false // Set default value to false
        },
        privacySettings: {
            type: {
                profileVisibility: {
                    type: String,
                    enum: ['public', 'private', 'friends'],
                    default: 'public'
                },
                activityVisibility: {
                    type: String,
                    enum: ['public', 'private', 'friends'],
                    default: 'public'
                }
            },
            default: {
                profileVisibility: 'public',
                activityVisibility: 'public'
            }
        },
        subscriptionStatus: {
            type: String,
            enum: ['free', 'basic', 'premium'],
            default: 'free'
        },
        interactionMetrics: {
            totalLikesGiven: {
                type: Number,
                default: 0
            },
            totalCommentsMade: {
                type: Number,
                default: 0
            },
            totalBlogsCreated: {
                type: Number,
                default: 0
            }
        },
        notifications: {
            type: [notificationSchema]
        }
    },
    {
        timestamps: true,
        indexes: [
            { _id: 1 }
        ]
    }
);

export const User = mongoose.models.users || mongoose.model("users", UserSchema);


---

File: visitorstats.models.js

import mongoose, { Schema } from "mongoose";


// ==================== VisitorStatsSchema ====================
const VisitorStatsSchema = new Schema(
    {
        // date: {
        //     type: Date,
        //     required: true,
        //     default: Date.now,
        // },
        timeFrame: {
            type: String,
            // enum: ['lastDay', 'lastWeek', 'lastMonth', 'lifetime'],
            required: true,
            default: "lifetime"
        },
        uniqueVisitors: {
            type: Number,
            default: 0,
        },
        totalVisitors: {
            type: Number,
            default: 0,
        },
        pageViews: {
            type: Number,
            default: 0,
        },
    }
);


export const VisitorStats = mongoose.models.visitorstats || mongoose.model("visitorstats", VisitorStatsSchema);


---


      I will provide you with the entire codebase of my website. Your job is to help me fix bugs, add new features, and make improvements as needed. Whenever a change is made in one file, you must ensure that any other related files are updated to maintain consistency and functionality.

      Key points:

      - Use only the code and features I provide. Do not create new files unless explicitly asked to do so.
      - Always treat the first input document I provide as the main reference and context.
      - Ensure that all modifications, additions, or fixes are integrated seamlessly across the entire codebase.
      - If a feature is requested that requires updating multiple parts of the codebase, make sure that changes are made across all affected files.

      All code is given in the upper side.
    